[
    "",
    "Interactive Brokers does maintain the use of creating contracts in both the Trader Workstation and Client Portal APIs. The default structure will allow the individual to typically reference the ticker symbol, security type, exchange, and currency; however, the best practice recommended by Interactive Brokers for both platforms is to use only the contract identifier, or ConId, and the Exchange instead. This will cover a complete contract without the need for additional parameters. These conids are static for each and every contract and will never change. Values such as 265598 for AAPL will always remain as the AAPL contract identifier for the underlying stock contract.",
    "Since TWS 10.16+, there is one more setting called 'Compatibility Mode: Send ISLAND for US Stocks trading on NASDAQ' in TWS - Global Configuration - API - Settings. This setting will enable all of the contract definitions with ISLAND exchange to be still acknowledged. It is strongly recommended for TWS Users to start implementing the NASDAQ exchange definition. However, this setting has not been introduced in IB Gateway yet. IB Gateway users still need to implement ISLAND exchange definition instead of the NASDAQ exchange definition.",
    "In TWS, you can right click the symbol and click 'Financial Instrument Info' - 'Description' or 'Details' to find the target contract details information.",
    "IB SmartRoutingSM is dedicated to best price execution for our customers. And with that, Interactive Brokers offers an array of SmartRouting options to our Trader Workstation and TWS API users. Users familiar with Trader Workstation are likely already familiar with the process of Configuring SmartRouting via Global Configuration;however, these features are available in the API as well. The values are specifically formatted when submitted through the TWS API, and must follow the specified patterns below.  Available throughout TWS API SMART Option Algorithm API String SMART Multipurpose 'SMART' SMART Dark Only 'SMART DarkOnly'  Available for CAD-currency Exchanges Only SMART Option Algorithm API String SMART Maximize Rebate 'SMART MaxRebate' SMART Maximize Fill 'SMART MaxFill' SMART Prefer Rebate 'SMART PreferRebate' SMART Prefer Fill 'SMART PreferFill' SMART Primary Exchange 'SMART Primary' SMART Highest Volume Exchange w/ Rebate 'SMART VRebate' SMART Highest Volume Exchange w/ Lowest Fee 'SMART VLowFee'",
    "While clients will typically trade a given instrument at a designated exchange, some clients may find their contracts listed as trading on VALUE. The VALUE exchange is a holding exchange used for clients to close positions on a contract that is no longer listed. A recent example of this is when TWTR / X was recently purchased. In this event, customers would be able to close all existing positions they had on the contract; however, no new positions could be taken. This is a result of the company going private and no longer allowing the stocks to be publicly traded.",
    "Symbol: String. The CUSIP of the bond. SecType: String. Always specify as BOND. Exchange: String. Smart may be specified. May direct route if interested. Currency: String. Specify the base currency the BOND is traded with.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter symbol= '912828C57' secType = 'BOND' exchange = 'SMART' currency = 'USD' symbol= '912828C57' secType = 'BOND' exchange = 'SMART' currency = 'USD' symbol= '912828C57' secType = 'BOND' exchange = 'SMART' currency = 'USD'",
    "Symbol: String. Specify the symbol of the CFD. SecType: String. Specify CFD. Exchange: String. Specify SMART. Currency: String. Specify the base currency the CFD is traded with.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter symbol = 'IBDE30' secType = 'CFD' currency = 'EUR' exchange = 'SMART' symbol = 'IBDE30' secType = 'CFD' currency = 'EUR' exchange = 'SMART' symbol = 'IBDE30' secType = 'CFD' currency = 'EUR' exchange = 'SMART'",
    "Symbol: String. Specify the symbol of the commodity. SecType: String. Specify CMDTY. Exchange: String. Specify SMART. Currency: String. Specify the base currency the commodity is traded with.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter symbol = 'XAUUSD' secType = 'CMDTY' exchange = 'SMART' currency = 'USD' symbol = 'XAUUSD' secType = 'CMDTY' exchange = 'SMART' currency = 'USD' symbol = 'XAUUSD' secType = 'CMDTY' exchange = 'SMART' currency = 'USD'",
    "SecId: String. Specify the CUSIP, FIGI, or ISIN code of the instrument SecIdType: String. Supports 'CUSIP', 'FIGI', or 'ISIN'. Exchange: String. Specify SMART.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter secIdType = 'FIGI' secId = 'BBG000B9XRY4' exchange = 'SMART' secIdType = 'FIGI' secId = 'BBG000B9XRY4' exchange = 'SMART' secIdType = 'FIGI' secId = 'BBG000B9XRY4' exchange = 'SMART'",
    "Important: Please be aware that a Contract ID (conid) will vary for Cryptocurrencies based on their Listing Exchange. Bitcoin (BTC) held at PAXOS (479624278) will have a different conid than the listing at Zerohash (541686651). This behavior will apply to all other coins.  Symbol: String. Specify the symbol of the cryptocurrency. SecType: String. Specify CRYPTO. Exchange: String. Specify PAXOS or ZEROHASH. Not all accounts are permitted for both routing destinations. Currency: String. Only USD is available at this time.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter symbol = 'ETH' secType = 'CRYPTO' currency = 'USD' exchange = 'PAXOS' symbol = 'ETH' secType = 'CRYPTO' currency = 'USD' exchange = 'PAXOS' symbol = 'ETH' secType = 'CRYPTO' currency = 'USD' exchange = 'PAXOS' Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter symbol = 'ETH' secType = 'CRYPTO' currency = 'USD' exchange = 'ZEROHASH' symbol = 'ETH' secType = 'CRYPTO' currency = 'USD' exchange = 'ZEROHASH' symbol = 'ETH' secType = 'CRYPTO' currency = 'USD' exchange = 'ZEROHASH'  WebAPI Orders for Crypto Currencies cannot use the 'conid' field. Instead, orders must be submitted using 'conidEx' and specifying both the contract identifier in addition to the exchange for trading.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter // BTC ConId 'conidex': '557335679@ZEROHASH' 'conidex': '479624278@PAXOS' // BTC ConId 'conidex': '557335679@ZEROHASH' 'conidex': '479624278@PAXOS' // BTC ConId 'conidex': '557335679@ZEROHASH' 'conidex': '479624278@PAXOS'",
    "Symbol: String. Specify the underlying symbol of the future. SecType: String. Specify FUT. Exchange: String. Specify the exchange where the future is traded. Currency: String. Specify the currency which the future is traded. LastTradeDateOrContractMonth: String. Enter the month the contract expires. If there are multiple expiries in the same month, exact date must be specified. Multiplier: Integer. Enter the multiplier which the future is traded.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter symbol = 'ES' secType = 'FUT' exchange = 'CME' currency = 'USD' lastTradeDateOrContractMonth = '202809' multiplier = 50 symbol = 'ES' secType = 'FUT' exchange = 'CME' currency = 'USD' lastTradeDateOrContractMonth = '202809' multiplier = 50 symbol = 'ES' secType = 'FUT' exchange = 'CME' currency = 'USD' lastTradeDateOrContractMonth = '202809' multiplier = 50",
    "Users may choose to use Continuous Futures as well, which automatically presents the front future contract for customers to request historical data. This security type can only be used in the TWS API to request historical data. Continuous Futures can not be used: For placing orders For live market data For specific historical data. Please be aware that endDateTime must be left as an empty string when requesting historical data for continuous futures contracts. In the Client Portal API  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter symbol = 'ES' secType = 'CONTFUT' exchange = 'CME' currency = 'USD' symbol = 'ES' secType = 'CONTFUT' exchange = 'CME' currency = 'USD' symbol = 'ES' secType = 'CONTFUT' exchange = 'CME' currency = 'USD'",
    "While they can not be traded, TWS API users can refer to expired Futures contracts by including the 'IncludeExpired' field. This will permit users to review historical market data for contracts that have expired within the last 2 years. This functionality is not supported in the web api.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter symbol = 'ES' secType = 'FUT' exchange = 'CME' currency = 'USD' lastTradeDateOrContractMonth = '202309' IncludeExpired= True symbol = 'ES' secType = 'FUT' exchange = 'CME' currency = 'USD' lastTradeDateOrContractMonth = '202309' IncludeExpired= True symbol = 'ES' secType = 'FUT' exchange = 'CME' currency = 'USD' lastTradeDateOrContractMonth = '202309' IncludeExpired= True",
    "Symbol: String. Specify the underlying symbol of the futures option. SecType: String. Specify FOP. Exchange: String. Specify the exchange where the underlying is traded. Currency: String. Specify the base currency of the futures option. LastTradeDateOrContractMonth: String. Enter the month the contract expires. In the event there are multiple expiries in the same month, exact date must be specified. Strike: float. Enter the strike price of the derivative. Right: String. Enter the right, 'C' for Calls and 'P' for Puts. Multiplier: String. Enter the multiplier of the derivative.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter symbol = 'GBL' secType = 'FOP' exchange = 'EUREX' currency = 'EUR' lastTradeDateOrContractMonth = '20230224' strike = 138 right = 'C' multiplier = '1000' symbol = 'GBL' secType = 'FOP' exchange = 'EUREX' currency = 'EUR' lastTradeDateOrContractMonth = '20230224' strike = 138 right = 'C' multiplier = '1000' symbol = 'GBL' secType = 'FOP' exchange = 'EUREX' currency = 'EUR' lastTradeDateOrContractMonth = '20230224' strike = 138 right = 'C' multiplier = '1000'",
    "Symbol: String. Specify the target currency. For orders, this will dictate the quantity value. SecType: String. Specify CASH. Exchange: String. Specify IDEAL for Virtual Forex or IDEALPRO for true forex trading. Currency: String. Specify the base currency forex pair. This will dictate size with cash quantity trades.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter symbol = 'EUR' secType = 'CASH' exchange = 'IDEALPRO' currency = 'GBP' symbol = 'EUR' secType = 'CASH' exchange = 'IDEALPRO' currency = 'GBP' symbol = 'EUR' secType = 'CASH' exchange = 'IDEALPRO' currency = 'GBP'",
    "Symbol: String. Specify the symbol for the index. SecType: String. Specify IND. Exchange: String. Specify the host exchange for the index. Currency: String. Specify the base currency of the index.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter symbol = 'DAX' secType = 'IND' exchange = 'EUREX' currency = 'EUR' symbol = 'DAX' secType = 'IND' exchange = 'EUREX' currency = 'EUR' symbol = 'DAX' secType = 'IND' exchange = 'EUREX' currency = 'EUR'",
    "Symbol: String. Specify the symbol for the mutual fund. SecType: String. Specify FUND. Exchange: String. Specify the exchange of the fund. FUNDSERV is the most common. Currency: String. Specify the base currency of the fund.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter symbol = 'VINIX' secType = 'FUND' exchange = 'FUNDSERV' currency = 'USD' symbol = 'VINIX' secType = 'FUND' exchange = 'FUNDSERV' currency = 'USD' symbol = 'VINIX' secType = 'FUND' exchange = 'FUNDSERV' currency = 'USD'  Note: It is recommended to understand mutual fund orders on TWS UI before implementing via API due to restrictions enforced on trading mutual funds For example to buy ARBIX one requires to use cash quantity ie cashQty while selling ARBIX can be implemented using total quantity ie totalQuantity",
    "Symbol: String. Specify the underlying symbol of the option. SecType: String. Specify OPT. Exchange: String. SMART routing may be specified. May use direct routing such as BOX. Currency: String. Specify the base currency of the option. LastTradeDateOrContractMonth: String. Enter the month the contract expires. In the event there are multiple expiries in the same month, exact date must be specified. Strike: float. Enter the strike price of the derivative. Right: String. Enter the right, 'C' for Calls and 'P' for Puts. Multiplier: String. Enter the multiplier of the derivative.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter symbol = 'GOOG' secType = 'OPT' exchange = 'BOX' currency = 'USD' lastTradeDateOronth = '20190315' strike = 1180 right = 'C' multiplier = '100' symbol = 'GOOG' secType = 'OPT' exchange = 'BOX' currency = 'USD' lastTradeDateOronth = '20190315' strike = 1180 right = 'C' multiplier = '100' symbol = 'GOOG' secType = 'OPT' exchange = 'BOX' currency = 'USD' lastTradeDateOronth = '20190315' strike = 1180 right = 'C' multiplier = '100'",
    "Symbol: String. Specify the symbol for the Stock or ETF. SecType: String. Specify STK. Exchange: String. Smart routing is available. Otherwise, a direct exchange may be specified. Currency: String. Specify the base currency of the stock.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter symbol = 'AAPL' secType = 'STK' exchange = 'SMART' currency = 'USD' symbol = 'AAPL' secType = 'STK' exchange = 'SMART' currency = 'USD' symbol = 'AAPL' secType = 'STK' exchange = 'SMART' currency = 'USD'  For certain smart-routed stock that have the same symbol, currency and exchange, you would also need to specify the primary exchange attribute to uniquely define the This should be defined as the native exchange of a and is good practice to include for all stocks. For the purpose of requesting market data, the routing exchange and primary exchange can be specified in a single 'exchange' field if they are separated by a valid component exchange separator, for instance exchange = 'SMART:ARCA' The default separators available are colon ':' and slash '/' Other component exchange separators can be defined using the field defined in TWS Global Configuration under API -> Settings.  Symbol: String. Specify the symbol for the Stock or ETF. SecType: String. Specify STK. Exchange: String. Smart routing is available. Otherwise, a direct exchange may be specified. Currency: String. Specify the base currency of the stock. PrimaryExchange: Specify the primary listing exchange of the instrument.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter symbol = 'SPY' secType = 'STK' currency = 'USD' exchange = 'SMART' primaryExchange = 'ARCA' symbol = 'SPY' secType = 'STK' currency = 'USD' exchange = 'SMART' primaryExchange = 'ARCA' symbol = 'SPY' secType = 'STK' currency = 'USD' exchange = 'SMART' primaryExchange = 'ARCA'",
    "Symbol: String. Specify the symbol for the Stock or ETF. SecType: String. Specify STK. Exchange: String. Smart routing is available. Otherwise, a direct exchange may be specified. Currency: String. Specify the base currency of the stock.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter symbol = 'EMCGU' secType = 'STK' currency = 'USD' exchange = 'SMART' symbol = 'EMCGU' secType = 'STK' currency = 'USD' exchange = 'SMART' symbol = 'EMCGU' secType = 'STK' currency = 'USD' exchange = 'SMART'",
    "Warrants, like options, require an expiration date, a right, a strike and a multiplier. For some warrants it will be necessary to define a localSymbol or conId to uniquely identify the contract.",
    "Symbol: String. Specify the underlying symbol of the warrant. SecType: String. Specify WAR. Exchange: String. Specify the holding exchange for the warrant. SWB, FWB, and GETTEX are common holding exchanges. Currency: String. Specify the base currency of the warrant. LastTradeDateOrContractMonth: String. Enter the month the contract expires. In the event there are multiple expiries in the same month, exact date must be specified. Strike: float. Enter the strike price of the derivative. Right: String. Enter the right, 'C' for Calls and 'P' for Puts. Multiplier: String. Enter the multiplier of the derivative.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter symbol = 'GOOG' secType = 'WAR' exchange = 'FWB' currency = 'EUR' lastTradeDateOronth = '20201117' strike = 15000 right = 'C' multiplier = '001' symbol = 'GOOG' secType = 'WAR' exchange = 'FWB' currency = 'EUR' lastTradeDateOronth = '20201117' strike = 15000 right = 'C' multiplier = '001' symbol = 'GOOG' secType = 'WAR' exchange = 'FWB' currency = 'EUR' lastTradeDateOronth = '20201117' strike = 15000 right = 'C' multiplier = '001'",
    "LocalSymbol: String. Specify the exact symbol of the derivative. SecType: String. Specify IOPT. Exchange: String. Specify the holding exchange for the warrant. SWB, FWB, and GETTEX are common holding exchanges. Currency: String. Specify the base currency of the warrant.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter localSymbol = 'B881G' secType = 'IOPT' exchange = 'SBF' currency = 'EUR' localSymbol = 'B881G' secType = 'IOPT' exchange = 'SBF' currency = 'EUR' localSymbol = 'B881G' secType = 'IOPT' exchange = 'SBF' currency = 'EUR'  To unambiguously define a Dutch Warrant or Structured Product (IOPTs) the conId or localSymbol field must be used. It is important to note that if reqContractDetails is used with an incompletely-defined IOPT contract definition, that thousands of results can be returned and the API connection broken. IOPT contract definitions will often change and it will be necessary to restart TWS or IB Gateway to download the new contract definition.",
    "Spread contracts, also known as combos or combinations, combine two or more instruments. To define a combination contract it is required to know the conId of the contract in question. The conId of an instrument can easily be obtained via the EClientSocket.reqContractDetails request or the /iserver/secdef/search endpoint. Note: Even though a contract can be created with any pair of instruments, not all instruments are as actively traded as others. If you are unsure why data may not be retrieved, or why an order may not be executed, it is considered best practice to confirm data against the Trader Workstation or Client Portal market data.",
    "As with standard contracts, you will continue to define the standard values such as symbol, secType, exchange, and currency. However, with combo orders, the 'ComboLegs' field must be added and the ComboLeg objects should be attached. The example provided will showcase more detail of behavior; however, these require a conid, exchange, ratio, and an action for every ComboLeg on the order.  Contract() Symbol: String. Specify the symbol of the CFD. SecType: String. Specify CFD. Exchange: String. Specify SMART. Currency: String. Specify the base currency the CFD is traded with. ComboLegs: List of ComboLeg objects. Create a list to contain all subsequent legs. ComboLeg() ConId: int. The conId, or contract Identifier, should be used to specify the exact contract. Symbols or local symbols can not be used for ComboLegs. Ratio: int. Specify the ratio for the specific leg. The ratio will be multiplied by the totalQuantity field for of the order object. Action: String. Specify what to do with the order. Users may choose Buy or Sell for these orders. Exchange: String. Specify the routing exchange for the contract. SMART may be used.",
    "Futures spreads can also be defined as Smart-routed (non-guaranteed) combos. When placing an order for a non-guaranteed combo from the API, the non-guaranteed flag must be set to 1. Historical data for smart-routed futures spreads is generally available from the API with the requisite market data subscriptions.",
    "For Inter-Commodity futures, the 'Local Symbol' field in TWS is used for the 'Symbol' field in the API contract definition, e.g. 'CL.BZ'. They are always guaranteed combos, which is the default in the API. In some instances, a generic symbol must be provided instead. For example, a inter-commodity future containing ZF and ZN will require that the symbol be set to 'FYT'. Please be mindful of the fact that inter-commodity spreads are offered by the exchange directly, and so they are direct-routed though the legs have different underlyings. Only real time, and not historical, data is offered for inter-commodity spread contracts through the API. It is also possible in many cases to create a spread of the same future contracts in a inter-commodity spread which is smart-routed and non-guaranteed. Historical data for this spread would generally be available from the API. Also, historical data for expired spread contracts is not available in TWS or the API.",
    "Combo Orders follow the format of: '{spread_conid};;;{leg_conid1}/{ratio},{leg_conid2}/{ratio}' This example documents the same structure of a long IBKR order against a short MCD order.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter 'conidex': '28812380;;;43645865/1,9408/-1' 'conidex': '28812380;;;43645865/1,9408/-1' 'conidex': '28812380;;;43645865/1,9408/-1'  Combination orders or spread orders may also be placed using the same orders endpoint. In the case of combo orders, we must use the 'conidex' instead of 'conid'. The conidex field is a string representation of our combo order parameters. The spread_conid is a unique identified used to denote a spread order. For US Stock Combos, only the spread_conid needs to be submitted.. For all other countries, you will need to use the format 'spread_conid@exchange'.  Available currency spread conids: Currency Spread ConID AUD 61227077 CAD 61227082 CHF 61227087 CNH 136000441 GBP 58666491 HKD 61227072 INR 136000444 JPY 61227069 KRW 136000424 MXN 136000449 SEK 136000429 SGD 426116555 USD 28812380  Following our spread_conid, we will then follow with 4 semicolnons, and then the first leg_coind. This will be the first contract to trade. After the conid, a forward slash, '/', needs to be included followed by your spread ratio. The ratio indicates two parts. The first is the sign of the ratio, whether it is positive or negative. Positive signs indicate a 'Buy' side, while a negative value represents a 'Sell' side. This could also be explained as a state of 'Long' and 'Short' respectively, depending on your current position and intention. After indicating the side, you would indicate the ratio value. This is the multiplier of your quantity value. Now, you can continue to add legs to the order by separating them with a comma. The number of legs available is based on the exchange's rules.",
    "The ActiveX API is available for Windows computers to create a means of communication between Microsoft Excel and TWS or IB Gateway. The ActiveX API wraps the C#/.NET API and is provided as an open source project TWSLib. ActiveX is a legacy technology developed by Microsoft, it essentially allows applications to share information with each other. The current ActiveX API for Excel wraps the C#/.NET API and is provided as an open source project TWSLib. It is suggested to also consider using the C# API directly as it provides seamless integration with the .NET framework. One possible advantage of using the ActiveX for Excel API as compared to RTDServer or DDE is that ActiveX does provide the same number of functions as the other socket-based technologies (C#, Java, C++, Python). Disadvantages of the ActiveX Excel API is that it is more difficult to program as compared to other Excel APIs and not as robust as non-Excel socket-based API applications.",
    "The sample ActiveX spreadsheet provided with the API is meant only as a demonstration of API functionality, and not intended as a production-level tool to be used in trading. While it is designed with examples of almost all API functions, it does not have the necessary functionality to handle problems that may occur during trading such as disconnections, error codes, or dropped events in a robust way. One possible advantage of using the ActiveX for Excel API as compared to RTDServer or DDE is that ActiveX does provide the same number of functions as the other socket-based technologies (C#, Java, C++, Python). Disadvantages of the ActiveX Excel API is that it is more difficult to program as compared to other Excel APIs and not as robust as non-Excel socket-based API applications. Sample spreadsheet applications are distributed with the API download for each of the API technologies (RTD Server, ActiveX, DDE). It is important to keep in mind that the sample applications are intended as simple demonstrations of API functionality for third party programmers. They do not have robust error handling functionality and are not intended to be used as production level trading tools. Interactive Brokers does not offer any programming assistance and therefore it is strongly advised to anyone willing to use any of the TWS ActiveX API to become familiar with the technologies involved such as C#. By design, Microsoft Excel gives precedence to the user interface over the data connection to other applications. For that reason, Excel only receives updates when it is in a 'ready' state, and may ignore data sent for instance when a modal dialogue box is displayed to the user, a cell is being edited, or Excel is busy doing other things. A new Excel Real Time Data server (RTD) API has been introduced to help address some of these limitations, but they are inherent to Excel as a trading application and not specific to an API technology. Excel must be set to the US convention for commas and periods. That is, commas denote thousands and periods denote decimals.",
    "The TWS API Excel ActiveX Implementation is built around the Component Object Model (COM) architecture. The COM object and it's derivatives like ActiveX and OLE (Compound Documents) are built exclusively into Microsoft Windows and are reliant on the Operating System's Registry structure. Given the underlying technology of ActiveX requires Windows-specific architecture regarding it's registry, the TWSAPI Excel ActiveX functionality is not available in the Mac and Unix distribution of the TWSAPI offering.",
    "Clients who may have installed the API into a unique location may receive an #NA message in each ActiveX cell. While this is often indicative of a reference error, the #NA reference may be failing to call an installed DLL essential for the connection with Trader Workstation. To resolve this error, please follow the steps listed below: Uninstall the API from the 'Add/Remove Tool' in the Windows Control Panel as usual Delete the C:\\TWS API\\ folder if any files are still remaining to prevent a version mismatch. Locate the file 'C:\\Windows\\SysWOW64\\TwsSocketClient.dll'. Delete this file.",
    "In order to use the TWS API, all customers must install either Trader Workstation or IB Gateway to connect the API to. Both downloads maintain the same level of usage and support; however, they both have equal benefits. For example, IB Gateway will be less resource intensive as there is no UI; however, the Trader Workstation has access all of the same information as the API, if users would like an interface to confirm data. It is recommended for API users to use offline TWS because TWS online version has automatic update. Please use same TWS version to make sure the TWS version and TWS API version are synced. These will help preventing version conflict issue. Note: For IBHK API users, it is commended to use IB Gateway instead of TWS. it is because all IBHK users cannot choose 'Never Lock Trader Workstation' in TWS - Global Configuration - Lock and Exit. If there is inactivity, TWS will be locked and there will be API disconnection.  Download Trader Workstation Download IB Gateway",
    "It is recommended for API users to use same TWS API version to make sure the TWS version and TWS API version are synced in order to prevent version conflict issue. Running the Windows version of the API installer creates a directory 'C:\\\\TWS API\\' for the API source code in addition to automatically copying two files into the Windows directory for the DDE and C++ APIs. It is important that the API installs to the C: drive, as otherwise API applications may not be able to find the associated files. The Windows installer also copies compiled dynamic linked libraries (DLL) of the ActiveX control TWSLib.dll, C# API CSharpAPI.dll, and C++ API TwsSocketClient.dll. Starting in API version 973.07, running the API installer is designed to install an ActiveX control TWSLib.dll, and TwsRtdServer control TwsRTDServer.dll which are compatible with both 32 and 64 bit applications. It is important to know that the TWS API is only available through the interactivebrokers.github.io MSI or ZIP file. Any other resource, including pip, NuGet, or any other online repository is not hosted, endorsed, supported, or connected to Interactive Brokers. As such, updates to the installation should always be downloaded from the github directly.  TWS API Download Page",
    "Some TWS Settings affect API. You can open the Global Configuration by selecting the Cog Wheel icon in the top right corner.",
    "In TWS/ IB Gateway - 'Global Configuration' - 'General', you can adjust the Memory Allocation (in MB)*. This feature is to control how much memory your computer can assign to the TWS/ IB Gateway application. Usually, higher value allows users to have faster data returning speed. Normally, it is recommended for API users to set 4000. However, it depends on your computer memory size because setting too high may cause High Memory Usage and application not responding. For details, please visit: https://www.ibkrguides.com/traderworkstation/increase-tws-memory-size.htm",
    "In TWS Global Configuration - API - Settings, there are many API settings. Please enable/disable some API settings based on your use case. In this section, only the most important API settings for API connection and incident troubleshooting are covered. Please: Enable 'ActiveX and Socket Clients' Disable 'Read-Only API' Enable 'Create API message log file' Enable 'Include market data in API log file' Change 'Logging Level' to 'Detail' Note: In IB Gateway Global Configuration - API - settings, there is no 'Compatibility Mode: Send ISLAND for US stocks trading on NASDAQ'. Specifying NASDAQ exchange in contract details may cause error if connecting to IB Gateway. For this error, please specify ISLAND exchange.",
    "It is compulsory for TWS users to auto logoff/auto restart TWS daily and manually login TWS weekly. In TWS/ IB Gateway - 'Global Configuration' - 'Lock and Exit', you can choose the time that your TWS will be shut down. For API users, it is recommended to choose 'Never lock Trader Workstation' and 'Auto restart'. Note: IBHK users does not have 'Never lock Trader Workstation' and 'Auto restart' in TWS. Windows Sleeping Mode also causes API disconnection. It is strongly suggested to choose 'Never Sleep' in Windows.",
    "In TWS - 'Global Configuration' - 'API' - 'Precautions', you can enable the following items to stop receiving the order submission messages. Enable 'Bypass Order Precautions for API orders'. Enable 'Bypass Bond warning for API orders'. Enable 'Bypass negative yield to worst confirmation for API orders'. Enable 'Bypass Called Bond warning for API orders'. Enable 'Bypass 'same action pair trade' warning for API orders'. Enable 'Bypass price-based volatility risk warning for API orders'. Enable 'Bypass US Stocks market data in shares warning for API orders'. Enable 'Bypass Redirect Order warning for Stock API orders'. Enable 'Bypass No Overfill Protection precaution for destinations where implied natively'.",
    "Each IB account has a pre-decided IB server. You can visit this link to know our IB servers' locations: https://www.interactivebrokers.com/download/IB-Host-and-Ports.pdf Yet, all IB paper accounts are connected to US server by default and its location cannot be changed. As IB servers in different regions have different scheduled server maintenance time (https://www.interactivebrokers.com/en/software/systemStatus.php), you may need to change the IB server location in order to avoid service downtime. For checking your connected IB server location, you can go to TWS and click 'Data' to see your Primary server. In the below image, the pre-decided IB server location is: cdc1.ibllc.com If you want to change your live IB account server location in TWS, please submit a web ticket to 'Technical Assistance' - 'Connectivity' in order to request changing the IB server location. In the web ticket, you need to provide: Which account do you want to have IB server location change? Which IB server location would you like to connect to? TWS AMERICA - EAST (New York) TWS AMERICA - CENTRAL (Chicago) TWS Europe (Zurich) TWS Asia (Hong Kong) TWS Asia - CHINA (For mainland China users, if the account server is hosted in Hong Kong, they will automatically connect with the Shenzhen Gateway mcgw1.ibllc.com.cn) Which IB scheduled maintenance time do you choose? (Recommended to choose the default schedule maintenance time of its own IB server location) North America Europe Asia After you submit the ticket, you will receive a web ticket reply which require you to confirm and understand the migration request. Note: For Internet users, as the connection between IB server and Exchange goes through a dedicated line, it is commonly recommended to choose a IB server location which is closer to your TWS location. For IB connection types, please visit: https://www.interactivebrokers.co.uk/en/software/connectionInterface.php The pre-decided IB server location connected from TWS is different from the IB Server location connected from IB Client Portal and IBKR Mobile. IB server location connected from TWS is pre-decided. You can submit a web ticket to request the IB server relocation for the TWS connection. IB server location connected from Client Portal, IBKR Mobile is based on your nearest IB server location. You cannot request the IB server relocation for Client Portal and IBKR Mobile connections. However, OAuth CP API users can specify which server they want to connect to by themselves. For details, please visit: https://www.interactivebrokers.com/campus/ibkr-api-page/cpapi-v1/#oauth-base-url",
    "In TWS Global Configuration - Orders - Smart Routing, you can set your SMART order routing algorithm behavior.",
    "This guide is intended to introduce new customers to the ActiveX Excel Sample Sheet and introduce the systems available of our underlying API. Sample spreadsheet applications are distributed with the API download for each of the API technologies (RTD Server, ActiveX, DDE). It is important to keep in mind that the sample applications are intended as simple demonstrations of API functionality for third party programmers. They do not have robust error handling functionality and are not intended to be used as production level trading tools.",
    "While having TWS up and running and all the necessary API settings are set on TWS, as show on {TWS API CONFIG LINK}, we can then locate our sample sheet. Navigate to C:\\TWS API\\samples\\Excel C:\\TWS API\\samples\\Excel and select 'TwsActiveX.xls'. ",
    "After launching the sheet, you will be greeted with the General tab, which includes the connection details. As it is with other Socket-based technologies, the host, port and ClientID are required when establishing the connection to TWS: If TWS and Excel are on the same machine, then Host could be left blank as this represents the 'localHost'. Port Number must be the same port TWS listens on. By default, it will be set to 7496. The client ID can be any positive integer and will be used to identify this specific API connection. Assuming your connection details are correct, you may click the 'Connect to TWS' button in the top right corner now. The red 'Not connected' button will turn yellow while 'Connecting'. When can start using the sheet once the button says 'Connected' in green. Note: Please be aware it may take a second or two for the connection to begin. You may need to wait a moment for the connection to establish. ",
    "Selecting other tabs will display a green and grey sheet with several symbols listed. By looking in the bottom left, you should see a white banner labeled 'Tickers'. You will then see several additional tabs on the bottom such as Bulletins, Market Depth, Basic Orders, and more. All of these tabs on the bottom correspond to different functionality of the API. You may need to click the arrow in the bottom left to scroll to the right, showing even more tabs. ",
    "Requesting data through the Excel ActiveX API is quite simple in our sample structure. All that must be done for most pages is to select the row or rows of data, and select the 'Request ___ Data' button at the top. This will request data for whatever respective row is selected. ",
    "Endpoints can be received in two standard ways. The first most common method is to retrieve all of the data in-line within the same page. This is prevalent in the Tickers and BasicOrders and several others. This is common for situations where single cell values are released for a given value. Other times, you will see a new page created to house returned data. This is prevalent for Historical Market Data, Market Scanners, and more. This is where multiple values will be retrieved that correspond to the same identifier.",
    "For in-line data, you will see the value appear directly to the right. The code has been designed to reference the column headers. As such, if you find that certain data in in-line responses are not needed, you may simply remove the column form the sheet. ",
    "This will generate a brand new page at the end of the tab list as defined in the 'Page Name' column of the original request. In the case of Historical data and the IBKR Stock request, you will see column V list 'IBKR_STK_SMART_USD'. In Column W, we will see the Activate Page column. ",
    "The Interactive Brokers ActiveX API is rather unique in the sense that it demands the most Visual Basic knowledge to operate the API of our three Excel offerings. However, the API is similar to RTD in the sense that much of the underlying functionality and requests are based on C# source code. To elaborate on this process further, C# makes the underlying requests to EClient.reqMktData, receiving data in EWrapper.tickData, and so on with accordance to the Trader Workstation API. As such, changes to method request systems are built in the C# code directly. As with our other source code, this is the baseline for all clients and is used to interpret data from a TCP socket bridge connection to the Trader Workstation. This is documented within C:\\TWS API\\source\\CSharpClient\\activexC:\\TWS API\\source\\CSharpClient\\activex The ActiveX component of this API comes from the communication between C# and Visual Basic. Specifically, the use of the System.Runtime.InteropServices Namespace supports the COM interoperability that provides the foundation of ActiveX. Finally, Visual Basic will intercept the messages sent through the Namespace and then assign that data to specific cells in your active workbook. This code is all established at {TWS API}\\samples\\Excel\\TwsActiveX{TWS API}\\samples\\Excel\\TwsActiveX",
    "As stated within the Architecture section, the Excel ActiveX API is built on the underlying C# API with standard Visual Basic Translations to allocate the data onto the Excel sheets. For additional insight into the underlying methods, see the TWS API Documentation.",
    "The Dynamic Data Exchange protocol is a method of inter-process communication developed by Microsoft to establish communication between Windows applications running on the same computer. The DDE API is available for Windows computers to create a means of communication between Microsoft Excel and TWS or IB Gateway. This allows users to make calls to the standard API library using Visual Basic. The Excel DDE API has the full functionality offered by the Trader Workstation API implemented via a DDE socket bridge that uses the open source Java - DDE interoperability library JDDE. This means the DDE API offering is built utilizing both Java and VB together in order to create a complete Excel offering to the standard put in place by Microsoft.",
    "Sample spreadsheet applications are distributed with the API download for each of the API technologies (RTD Server, ActiveX, DDE). It is important to keep in mind that the sample applications are intended as simple demonstrations of API functionality for third party programmers. They do not have robust error handling functionality and are not intended to be used as production level trading tools. Interactive Brokers does not offer any programming assistance and therefore it is strongly advised to anyone willing to use any of the TWS DDE API to become familiar with the technologies involved such as the DDE protocol and VBA. By design, Microsoft Excel gives precedence to the user interface over the data connection to other applications. For that reason, Excel only receives updates when it is in a 'ready' state, and may ignore data sent for instance when a modal dialogue box is displayed to the user, a cell is being edited, or Excel is busy doing other things. A new Excel Real Time Data server (RTD) API has been introduced to help address some of these limitations, but they are inherent to Excel as a trading application and not specific to an API technology. Excel must be set to the US convention for commas and periods. That is, commas denote thousands and periods denote decimals.  Other programs running on the same computer which use DDE can interfere with the communication between Excel and TWS and cause Excel to 'hang' or 'freeze' after making the initial request. The only solution to this problem is to close other programs using DDE one-by-one to find the culprit. Programs which are known to cause this issue include Google Chrome, Microsoft OneNote, Skype and Adobe Creative Cloud. Because the DDE Bridge is built using Java technologies, please install the latest version on your operating system from https://www.oracle.com/java/technologies/downloads/#jdk21-windows .",
    "Excel DDE, Dynamic Data Exchange, is a system which produces a sub-task in order to exchange information to and from a given program. Given the TWS API is built around the EClient and EWrapper communication, discussed further in TWS API Connectivity. This data exchange system is essential for the functionality of our API offering. The macOS App Sandbox limit's an apps ability to create additional tasks required for dynamic data exchange and is required for macOS application distribution. Because this process limits the task creation of DDE, the TWS API Excel DDE offering cannot run on macOS, and is the reason the library is excluded from the Mac and Unix distribution of the TWS API.",
    "In many cases, customers might see a response for a given market data column which displays 'N/A', '0', '-1' in some of their cells. This can be occur for a few different reasons. While you may have part of the required market data subscription on the instrument, you may not have all of it. This is particularly common for derivatives traders who may not have a market data subscription for the given underlying. You might also encounter this by requesting too many symbols simultaneously. This is discussed further in the Outgoing Message Rate Limitations section Similar to (2) above, every client has a maximum number of market data lines shared between TWS and their API. By default, all customer's have a maximum of 100 market data lines, allowing for 100 unique contracts to be requested at any one time. If you surpass this limit, you may find that some fields can not be returned. This may also happen in the event your machine, in tandem with Excel, simply can not handle the volume of data requested. While the machine limitations are unique to each user, you may explore and modify the refresh rate as described in our documentation",
    "In order to use the TWS API, all customers must install either Trader Workstation or IB Gateway to connect the API to. Both downloads maintain the same level of usage and support; however, they both have equal benefits. For example, IB Gateway will be less resource intensive as there is no UI; however, the Trader Workstation has access all of the same information as the API, if users would like an interface to confirm data. It is recommended for API users to use offline TWS because TWS online version has automatic update. Please use same TWS version to make sure the TWS version and TWS API version are synced. These will help preventing version conflict issue. Note: For IBHK API users, it is commended to use IB Gateway instead of TWS. it is because all IBHK users cannot choose 'Never Lock Trader Workstation' in TWS - Global Configuration - Lock and Exit. If there is inactivity, TWS will be locked and there will be API disconnection.  Download Trader Workstation Download IB Gateway",
    "It is recommended for API users to use same TWS API version to make sure the TWS version and TWS API version are synced in order to prevent version conflict issue. Running the Windows version of the API installer creates a directory 'C:\\\\TWS API\\' for the API source code in addition to automatically copying two files into the Windows directory for the DDE and C++ APIs. It is important that the API installs to the C: drive, as otherwise API applications may not be able to find the associated files. The Windows installer also copies compiled dynamic linked libraries (DLL) of the ActiveX control TWSLib.dll, C# API CSharpAPI.dll, and C++ API TwsSocketClient.dll. Starting in API version 973.07, running the API installer is designed to install an ActiveX control TWSLib.dll, and TwsRtdServer control TwsRTDServer.dll which are compatible with both 32 and 64 bit applications. It is important to know that the TWS API is only available through the interactivebrokers.github.io MSI or ZIP file. Any other resource, including pip, NuGet, or any other online repository is not hosted, endorsed, supported, or connected to Interactive Brokers. As such, updates to the installation should always be downloaded from the github directly.  TWS API Download Page",
    "Some TWS Settings affect API. You can open the Global Configuration by selecting the Cog Wheel icon in the top right corner.",
    "In TWS/ IB Gateway - 'Global Configuration' - 'General', you can adjust the Memory Allocation (in MB)*. This feature is to control how much memory your computer can assign to the TWS/ IB Gateway application. Usually, higher value allows users to have faster data returning speed. Normally, it is recommended for API users to set 4000. However, it depends on your computer memory size because setting too high may cause High Memory Usage and application not responding. For details, please visit: https://www.ibkrguides.com/traderworkstation/increase-tws-memory-size.htm",
    "In TWS Global Configuration - API - Settings, there are many API settings. Please enable/disable some API settings based on your use case. In this section, only the most important API settings for API connection and incident troubleshooting are covered. Please: Enable 'ActiveX and Socket Clients' Disable 'Read-Only API' Enable 'Create API message log file' Enable 'Include market data in API log file' Change 'Logging Level' to 'Detail' Note: In IB Gateway Global Configuration - API - settings, there is no 'Compatibility Mode: Send ISLAND for US stocks trading on NASDAQ'. Specifying NASDAQ exchange in contract details may cause error if connecting to IB Gateway. For this error, please specify ISLAND exchange.",
    "It is compulsory for TWS users to auto logoff/auto restart TWS daily and manually login TWS weekly. In TWS/ IB Gateway - 'Global Configuration' - 'Lock and Exit', you can choose the time that your TWS will be shut down. For API users, it is recommended to choose 'Never lock Trader Workstation' and 'Auto restart'. Note: IBHK users does not have 'Never lock Trader Workstation' and 'Auto restart' in TWS. Windows Sleeping Mode also causes API disconnection. It is strongly suggested to choose 'Never Sleep' in Windows.",
    "In TWS - 'Global Configuration' - 'API' - 'Precautions', you can enable the following items to stop receiving the order submission messages. Enable 'Bypass Order Precautions for API orders'. Enable 'Bypass Bond warning for API orders'. Enable 'Bypass negative yield to worst confirmation for API orders'. Enable 'Bypass Called Bond warning for API orders'. Enable 'Bypass 'same action pair trade' warning for API orders'. Enable 'Bypass price-based volatility risk warning for API orders'. Enable 'Bypass US Stocks market data in shares warning for API orders'. Enable 'Bypass Redirect Order warning for Stock API orders'. Enable 'Bypass No Overfill Protection precaution for destinations where implied natively'.",
    "Each IB account has a pre-decided IB server. You can visit this link to know our IB servers' locations: https://www.interactivebrokers.com/download/IB-Host-and-Ports.pdf Yet, all IB paper accounts are connected to US server by default and its location cannot be changed. As IB servers in different regions have different scheduled server maintenance time (https://www.interactivebrokers.com/en/software/systemStatus.php), you may need to change the IB server location in order to avoid service downtime. For checking your connected IB server location, you can go to TWS and click 'Data' to see your Primary server. In the below image, the pre-decided IB server location is: cdc1.ibllc.com If you want to change your live IB account server location in TWS, please submit a web ticket to 'Technical Assistance' - 'Connectivity' in order to request changing the IB server location. In the web ticket, you need to provide: Which account do you want to have IB server location change? Which IB server location would you like to connect to? TWS AMERICA - EAST (New York) TWS AMERICA - CENTRAL (Chicago) TWS Europe (Zurich) TWS Asia (Hong Kong) TWS Asia - CHINA (For mainland China users, if the account server is hosted in Hong Kong, they will automatically connect with the Shenzhen Gateway mcgw1.ibllc.com.cn) Which IB scheduled maintenance time do you choose? (Recommended to choose the default schedule maintenance time of its own IB server location) North America Europe Asia After you submit the ticket, you will receive a web ticket reply which require you to confirm and understand the migration request. Note: For Internet users, as the connection between IB server and Exchange goes through a dedicated line, it is commonly recommended to choose a IB server location which is closer to your TWS location. For IB connection types, please visit: https://www.interactivebrokers.co.uk/en/software/connectionInterface.php The pre-decided IB server location connected from TWS is different from the IB Server location connected from IB Client Portal and IBKR Mobile. IB server location connected from TWS is pre-decided. You can submit a web ticket to request the IB server relocation for the TWS connection. IB server location connected from Client Portal, IBKR Mobile is based on your nearest IB server location. You cannot request the IB server relocation for Client Portal and IBKR Mobile connections. However, OAuth CP API users can specify which server they want to connect to by themselves. For details, please visit: https://www.interactivebrokers.com/campus/ibkr-api-page/cpapi-v1/#oauth-base-url",
    "In TWS Global Configuration - Orders - Smart Routing, you can set your SMART order routing algorithm behavior.",
    "The DDE Socket Bridge is an essential component of the Excel DDE API library. This governs all communication between the Trader Workstation and Excel using the JDDE implementation.",
    "Launch Trader Workstation or IB Gateway Open the Windows File Explorer Navigate to C:\\TWS API\\samples\\DdeSocketBridgeC:\\TWS API\\samples\\DdeSocketBridge Double click the file, runDdeSocketBridge.bat. It may just be labeled as runDdeSocketBridge on your computer. There should be two popup windows that appear. The first will be a black command prompt window. You may see a few lines stating you are connected, and a few stating 'Error... data farm connection is OK.' These 'errors' are only notifications, and should not cause concern. You will also see a small java window. This will list the service name, host, port, clientId, and you should see 'Connected!'. If you see 'Disconnected' instead, you may need to Configure Your Socket Bridge. Assuming your socket bridge is showing 'Connected!' then you can navigate to C:\\TWS API\\samples\\Excel C:\\TWS API\\samples\\Excel and open the TwsDde.xls file sample. Note: DDE Socket Bridge is built with Java. Excel DDE users must have installed Java such as Java SE (https://www.java.com/download/ie_manual.jsp) in order to launch DDE Socket Bridge. If you open the runDdeSocketBridge.bat without an installed Java, you may discover that your Windows Command Prompt (CMD) is automatically opened and closed very quickly.",
    "For various reasons, you may find the need to modify the connection values used for the DDE Socket Bridge. You are able to modify the ClientID, Host IP, Socket Port, or even the Service Name.",
    "Launch Trader Workstation or IB Gateway Open the Windows File Explorer Navigate to C:\\TWS API\\samples\\DdeSocketBridgeC:\\TWS API\\samples\\DdeSocketBridge Right click the 'runDdeSocketBridge.bat' file. Click Edit from the list. This will open a new Notepad window. NOTE: Windows 11 users may need to choose 'Show more options' first. On the third line after 'DdeSocketBridge.jar' add -c followed by whichever ClientID you wish to connect with.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter echo off if not exist 'DdeSocketBridge.jar' goto :error java -Djava.library.path=.\\src\\main\\resources -jar DdeSocketBridge.jar -c12345 goto :end :error echo DdeSocketBridge.jar is not found :end echo off if not exist 'DdeSocketBridge.jar' goto :error java -Djava.library.path=.\\src\\main\\resources -jar DdeSocketBridge.jar -c12345 goto :end :error echo DdeSocketBridge.jar is not found :end echo off if not exist 'DdeSocketBridge.jar' goto :error java -Djava.library.path=.\\src\\main\\resources -jar DdeSocketBridge.jar -c12345 goto :end :error echo DdeSocketBridge.jar is not found :end",
    "Launch Trader Workstation or IB Gateway Open the Windows File Explorer Navigate to C:\\TWS API\\samples\\DdeSocketBridgeC:\\TWS API\\samples\\DdeSocketBridge Right click the 'runDdeSocketBridge.bat' file. Click Edit from the list. This will open a new Notepad window. NOTE: Windows 11 users may need to choose 'Show more options' first. On the third line after 'DdeSocketBridge.jar' add -h followed by whichever IP Address you need to connect to. NOTE: Be sure this IP address matches the location of your Trader Workstation. Also be sure that the Socket Bridge's IP matches where Excel is being hosted.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter echo off if not exist 'DdeSocketBridge.jar' goto :error java -Djava.library.path=.\\src\\main\\resources -jar DdeSocketBridge.jar -h123.123.123.123 goto :end :error echo DdeSocketBridge.jar is not found :end echo off if not exist 'DdeSocketBridge.jar' goto :error java -Djava.library.path=.\\src\\main\\resources -jar DdeSocketBridge.jar -h123.123.123.123 goto :end :error echo DdeSocketBridge.jar is not found :end echo off if not exist 'DdeSocketBridge.jar' goto :error java -Djava.library.path=.\\src\\main\\resources -jar DdeSocketBridge.jar -h123.123.123.123 goto :end :error echo DdeSocketBridge.jar is not found :end",
    "Launch Trader Workstation or IB Gateway Open the Windows File Explorer Navigate to C:\\TWS API\\samples\\DdeSocketBridgeC:\\TWS API\\samples\\DdeSocketBridge Right click the 'runDdeSocketBridge.bat' file. Click Edit from the list. This will open a new Notepad window. NOTE: Windows 11 users may need to choose 'Show more options' first. On the third line after 'DdeSocketBridge.jar' add -s followed by whichever Service name you wish to use in Excel. NOTE: Be sure on each page of your connected DDE that you match the User Name cell with what is listed here.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter echo off if not exist 'DdeSocketBridge.jar' goto :error java -Djava.library.path=.\\src\\main\\resources -jar DdeSocketBridge.jar -sExcelsior goto :end :error echo DdeSocketBridge.jar is not found :end echo off if not exist 'DdeSocketBridge.jar' goto :error java -Djava.library.path=.\\src\\main\\resources -jar DdeSocketBridge.jar -sExcelsior goto :end :error echo DdeSocketBridge.jar is not found :end echo off if not exist 'DdeSocketBridge.jar' goto :error java -Djava.library.path=.\\src\\main\\resources -jar DdeSocketBridge.jar -sExcelsior goto :end :error echo DdeSocketBridge.jar is not found :end",
    "Launch Trader Workstation or IB Gateway Open the Windows File Explorer Navigate to C:\\TWS API\\samples\\DdeSocketBridgeC:\\TWS API\\samples\\DdeSocketBridge Right click the 'runDdeSocketBridge.bat' file. Click Edit from the list. This will open a new Notepad window. NOTE: Windows 11 users may need to choose 'Show more options' first. On the third line after 'DdeSocketBridge.jar' add -p followed by whichever socket port you have specified in TWS or IB Gateway. The default ports supplied by Interactive Brokers are as follows: TWS Live Account: 7496 (Socket Bridge's default value) TWS Paper Account: 7497 IB Gateway Live Account: 4001 IB Gateway Paper Account: 4002  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter echo off if not exist 'DdeSocketBridge.jar' goto :error java -Djava.library.path=.\\src\\main\\resources -jar DdeSocketBridge.jar -p7497 goto :end :error echo DdeSocketBridge.jar is not found :end echo off if not exist 'DdeSocketBridge.jar' goto :error java -Djava.library.path=.\\src\\main\\resources -jar DdeSocketBridge.jar -p7497 goto :end :error echo DdeSocketBridge.jar is not found :end echo off if not exist 'DdeSocketBridge.jar' goto :error java -Djava.library.path=.\\src\\main\\resources -jar DdeSocketBridge.jar -p7497 goto :end :error echo DdeSocketBridge.jar is not found :end",
    "The most common reason for this behavior is that the DDE socket bridge is not running at the time of the request. Please refer to the Socket Bridge section to learn more on operating the socket bridge connection.  This is typical where Java is not installed properly on the machine. This is explained further in our Notes & Limitations section.  Yes. Both the black command prompt and white java window must remain open at all times while using DDE. Please refer to the Socket Bridge section to learn more on operating the socket bridge connection.",
    "To elaborate further on the Excel DDE API, it is worth elaborating upon the underlying architecture of the system given its complexity. As stated prior, the Excel DDE is implemented using the open source Java - DDE interoperability library, JDDE because DDE is built around 32-bit systems natively. This is implemented utilizing two key parts. First and foremost, there is the creation of the socket bridge itself. If you explore further in the DdeSocketBridge directory, you will find the full path towards C:\\TWS API\\samples\\DdeSocketBridge\\src\\mainC:\\TWS API\\samples\\DdeSocketBridge\\src\\main where the source code of the socket bridge is housed. The socket bridge is used as a translation tool between the DDE implemented by Visual Basic and the Trader Workstation. Listed within C:\\TWS API\\samples\\DdeSocketBridge\\src\\main\\java\\com\\ib\\api\\impl\\EWrapperImpl.javaC:\\TWS API\\samples\\DdeSocketBridge\\src\\main\\java\\com\\ib\\api\\impl\\EWrapperImpl.java users will be able to find the full Java implementation structure of the TWS API. This particular file is used to receive and transmit data from Trader Workstation to Excel. Meanwhile, the C:\\TWS API\\samples\\DdeSocketBridge\\src\\main\\java\\com\\ib\\api\\dde\\dde2socket\\requests C:\\TWS API\\samples\\DdeSocketBridge\\src\\main\\java\\com\\ib\\api\\dde\\dde2socket\\requests directory encapsulates all of the various outbound requests sent from Excel to Trader Workstation. These files could be modified such that all outbound requests will then better modify values such as defaults or other passed information so as to not require they be implemented in each Excel request directly. It is important to note that whenever modifications are made under C:\\TWS API\\samples\\DdeSocketBridge\\src\\mainC:\\TWS API\\samples\\DdeSocketBridge\\src\\main then the socket bridge will need to be recompiled  The socket bridge is only half of the greater DDE API. As the socket bridge handles the transmission of data from Excel to the socket bridge, then the socket bridge to TWS and back again. However, once the data has reached Excel from the socket bridge, Visual Basic must now carry the translations into the designated cells for which the data will be displayed. The content of the visual basic which impacts the default sample sheet is hosted in C:\\TWS API\\samples\\Excel\\TwsDde C:\\TWS API\\samples\\Excel\\TwsDde. Users who wish to modify how data behaves within Excel itself, such as how or where data is set, would need to make modifications here. Files such as BasicOrders.cls will handle how orders are placed or from which sheets and cells the data can be handled. These functions and can be copied to new files or resaved as needed by developers so long as they are appropriately modified to match their new environment.",
    "Requests made through the Excel DDE are handled through two primary methods: An Excel Formula Structure or a DDEPoke method call. Requests with the TWS API that do not take any arguments, such as EClient.reqCurrentTime, EClient.reqOpenOrders, or EClient.reqPositions are all made using an Excel Formula request using the DDERequest Method call. Please note there is a known restriction in Excel that the DDERequest method can only send 255 symbols in its request. For requests that contain at least one or more argument, such as EClient.reqMktData, EClient.reqContractDetails, or EClient.placeOrder, must be made using the Visual Basic DDEPoke Method Call. Please be sure to review the underlying TWS API functions to understand which requests have arguments and which do not.",
    "Requests with the TWS API that do not take any arguments, such as EClient.reqCurrentTime, EClient.reqOpenOrders, or EClient.reqPositions are all made using an Excel Formula request using the DDERequest Method call.  Note: There is a known restriction in Excel that the DDERequest method can only send 255 symbols in its request.  The Excel DDE formula is comprised of several separate components. As a baseline there is the Server, also known as the Service Name from your DDE Socket Bridge. This is followed by your Request Type, and finally the Request String. We will use this formula to elaborate on this structure: =@Stwsserver|reqCurrentTime!id4?time=@Stwsserver|reqCurrentTime!id4?time '=@Stwsserver': This first part indicates the Service Name set for our socket bridge connection. The '=@S' indicates the start of a formula, and that the next value will be our Service Name. '|': The pipe, the character typically above the Enter/Return key, is used to divide our service name from the rest of the request. 'reqCurrentTime' immediately after the pipe is used to state the Request Type we would like to make. These request types are based on the TWS API EClient request types documented in the TWS API Documentation. '!'': The exclamation, (!) indicates the start of the request with the request ID. This is formatted as id1 or whichever number is pertinent. After the ID we should indicate a question mark (?), to denote which parameter to receive. In the example above, we are both requesting the current time and then printing the time value to the cell using '?time'.",
    "For requests that contain at least one or more argument, the request must be made using the Visual Basic DDEPoke Method Call.  The DDEPoke request method call will send Excel table values in binary format to the DdeSocketBridge. The VBA code below is an example of how DDE Poke requests are sent from Excel to the DDE Socket Bridge. Please be aware that this function call uses the sendPoke function of the TwsDde Sample's 'util.bas' file located at 'C:\\TWS API\\samples\\Excel\\TwsDde\\util.bas'.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter Sub sendPlaceOrder(server As String, cell As Range) ' get id Dim id As String Dim placeOrderStr As String Dim requestStr As String Dim i As Integer Dim columnsArray() As Variant Dim columnIndex As Integer With Worksheets(STR_SHEET_NAME) id = .Cells(cell.row, errorColumnIndex + 1).value If id = util.STR_EMPTY Then ' none exists yet -- is original placement as opposed to modify id = OrderFunctions.makeId(server) ' fill 'id' column with id .Cells(cell.row, errorColumnIndex + 1).value = id End If ' fill 'error' column with formula .Cells(cell.row, errorColumnIndex).Formula = util.composeLink(server, requestStr, id, util.STR_ERROR) ' send request util.sendPoke Worksheets(STR_SHEET_NAME), server, placeOrderStr, id, cell, startOfContractColumns, getContractColumns(), 0, idColumnIndex, orderBaseColumnsStart, orderBaseColumnsEnd, orderExtColumnsStart, orderExtColumnsEnd ' fill columns with formulas For i = 0 To UBound(columnsArray) - LBound(columnsArray) .Cells(cell.row, columnIndex + i).Formula = util.composeLink(server, requestStr, id, columnsArray(i)) Next i End With End Sub Sub sendPlaceOrder(server As String, cell As Range) ' get id Dim id As String Dim placeOrderStr As String Dim requestStr As String Dim i As Integer Dim columnsArray() As Variant Dim columnIndex As Integer With Worksheets(STR_SHEET_NAME) id = .Cells(cell.row, errorColumnIndex + 1).value If id = util.STR_EMPTY Then ' none exists yet -- is original placement as opposed to modify id = OrderFunctions.makeId(server) ' fill 'id' column with id .Cells(cell.row, errorColumnIndex + 1).value = id End If ' fill 'error' column with formula .Cells(cell.row, errorColumnIndex).Formula = util.composeLink(server, requestStr, id, util.STR_ERROR) ' send request util.sendPoke Worksheets(STR_SHEET_NAME), server, placeOrderStr, id, cell, startOfContractColumns, getContractColumns(), 0, idColumnIndex, orderBaseColumnsStart, orderBaseColumnsEnd, orderExtColumnsStart, orderExtColumnsEnd ' fill columns with formulas For i = 0 To UBound(columnsArray) - LBound(columnsArray) .Cells(cell.row, columnIndex + i).Formula = util.composeLink(server, requestStr, id, columnsArray(i)) Next i End With End Sub Sub sendPlaceOrder(server As String, cell As Range) ' get id Dim id As String Dim placeOrderStr As String Dim requestStr As String Dim i As Integer Dim columnsArray() As Variant Dim columnIndex As Integer With Worksheets(STR_SHEET_NAME) id = .Cells(cell.row, errorColumnIndex + 1).value If id = util.STR_EMPTY Then ' none exists yet -- is original placement as opposed to modify id = OrderFunctions.makeId(server) ' fill 'id' column with id .Cells(cell.row, errorColumnIndex + 1).value = id End If ' fill 'error' column with formula .Cells(cell.row, errorColumnIndex).Formula = util.composeLink(server, requestStr, id, util.STR_ERROR) ' send request util.sendPoke Worksheets(STR_SHEET_NAME), server, placeOrderStr, id, cell, startOfContractColumns, getContractColumns(), 0, idColumnIndex, orderBaseColumnsStart, orderBaseColumnsEnd, orderExtColumnsStart, orderExtColumnsEnd ' fill columns with formulas For i = 0 To UBound(columnsArray) - LBound(columnsArray) .Cells(cell.row, columnIndex + i).Formula = util.composeLink(server, requestStr, id, columnsArray(i)) Next i End With End Sub",
    "Requests made using our Excel DDE will respond in single variable structures such that a single value will be returned to a given cell. In other scenarios, requests will handle responses through an array passed to Visual Basic. These array value responses must be handled through Visual Basic to assign a range of cells in your sheet to assign the data.",
    "It is possible to view live quotes for multiple products updating real time within Excel. Requests via the TWS DDE API are nothing but Excel formulas (DDE data links) each of them serving a very specific purpose. Market Data retrieval requires at least two different DDE links: one to start the market data subscription and another one which will be receiving the specific tick type. In many instances, customers are able to designate a single cell and print out values as they are retrieved from the DDE Socket Bridge as they are produced. These are single variable responses, such as data ticks to retrieve specifically a 'LAST' or 'BID' value.",
    "In many cases, you will find that data may be returned to visual basic in an array of values rather than as a single value. In these instances, we must implement Visual Basic to receive and distribute this data throughout the sheet. This can not be done using a formula alone.",
    "For nearly all instrument-based requests, you will need to create a contract. The standard format of a contract is built for the request, and will utilize an underscore (_) delimited string of all of the contracts attributes. The contract is then concluded with a final '~/'' Below, we have included an array of different samples that can be used as samples.",
    "Formula [num_of_legs]_[Leg ConId]_[Leg Ratio]_[Leg Side]_[Leg Exchange]_[Open/Close]_[Short Sale Slot]_[Designated Location]_[Exempt Code] If a field is to be ignored, a tilde, ~, should be passed in the given position. Example 2_265598_1_BUY_SMART_~_~_~_~_8314_1_SELL_SMART_~_~_~_~ 2_265598_1_BUY_SMART_~_~_~_~_8314_1_SELL_SMART_~_~_~_~ The example above would be a combo that is Long AAPL and Short IBM.",
    "Formula [symbol]_[SecType]_[exchange]_[currency]_~/  Example EUR_CASH_IDEALPRO_USD_~/",
    "Formula [symbol]_[sec type]_[exchange]_[currency]_~/  Example ESZ6_FUT_CME_USD_~/",
    "Formula [underlying symbol]_[sec Type]_[expiry]_[multiplier]_[exchange]_[currency]_~_~/  Example ES_FUT_201612_50_CME_USD_~_~/",
    "Formula [symbol]_[SecType]_[exchange]_[currency]_~/  Example XTZ6 C1100_FOP_CME_USD_~/",
    "Formula [underlying symbol]_[sec type]_[expiry]_[strike]_[P/C]_[multiplier]_[exchange]_[currency]_~_[trading class]/  Example EUR_FOP_20161209_1.1_C_125000_CME_USD_~_XT/",
    "Formula [symbol]_[sec type]_[exchange]_[currency]_~/  Example ES_IND_CME_USD_~/",
    "Note: The format of the option local symbol conforms to the Option Symbology Initiative (OSI).  Formula [symbol]_[SecType]_[exchange]_[currency]_~/'  Example C DBK DEC 22 1300_OPT_EUREX_EUR_~/'",
    "Formula [underlying symbol]_[sec type]_[expiry]_[strike]_[P/C]_[multiplier]_[exchange]_[currency]_~_~/'  Example DBK_OPT_20221007_13_C_100_EUREX_EUR_~_~/'",
    "Formula [symbol]_[sec Type]_[exchange]_[currency]_~/'  Example IBKR_STK_SMART_USD_~/'",
    "This guide is intended to introduce new customers to the DDE Excel Sample Sheet and introduce the systems available of our underlying API. Sample spreadsheet applications are distributed with the API download for each of the API technologies (RTD Server, ActiveX, DDE). It is important to keep in mind that the sample applications are intended as simple demonstrations of API functionality for third party programmers. They do not have robust error handling functionality and are not intended to be used as production level trading tools.",
    "To build a connection between Excel and the TWS for DDE, users must first launch the DdeSocketBridge. This can be found in the C: drive by default, inside {TWS API}\\samples\\DdeSocketBridge{TWS API}\\samples\\DdeSocketBridge. Double clicking the file, runDdeSocketBridge.bat, will launch the socket bridge and allow communication between the Trader Workstation and Excel. If you have any issues connecting with the socket bridge, please see the section, DDE Socket Bridge After launching the socket bridge and all the necessary API settings are set on TWS, as show in Configure Trader Workstation for DDE and having TWS running, we can then locate our sample sheet. Navigate to C:/TWS API/samples/Excel and select 'TwsDde.xls'. ",
    "After launching the socket bridge and while having TWS open and all the necessary API settings are set on it, as show in Configure Trader Workstation for DDE, we can then locate and open our sample sheet. Navigate to C:\\TWS API\\samples\\Excel C:\\TWS API\\samples\\Excel and select 'TwsDde.xls'. ",
    "The Excel DDE Sample sheet should launch, initially displaying a yellow and grey sheet with several symbols listed. By looking in the bottom let, you should see a white banner labeled 'Tickers'. You will then see several additional tabs on the bottom such as Errors, BasicOrders, ExtendedOrderAttributes, and more. All of these tabs on the bottom correspond to different functionality of the API. You may need to click the arrow in the bottom left to scroll to the right, showing even more tabs. ",
    "Requesting data through the Excel DDE API is quite simple in our sample structure. All that must be done for most pages is to select the row or rows of data, and select the 'Request Mkt Data' button at the top. This will request data for whatever respective row is selected. ",
    "Endpoints can be received in two standard ways. The first most common method is to retrieve all of the data in-line within the same page. This is prevalent in the Tickers and BasicOrders and several others. This is common for situations where single cell values are released for a given value. Other times, you will see a new page created to house returned data. This is prevalent for Historical Market Data, Market Scanners, and more. This is where multiple values will be retrieved that correspond to the same identifier.",
    "For in-line data, you will see the value appear directly to the right. The code has been designed to reference the column headers. As such, if you find that certain data in in-line responses are not needed, you may simply remove the column form the sheet. ",
    "This will generate a brand new page at the end of the tab list as defined in the 'Page Name' column of the original request. In the case of Historical data and the IBKR Stock request, you will see column V list 'IBKR_STK_SMART_USD'. In Column W, we will see the Activate Page column. ",
    "As stated within the Architecture section, the Excel DDE API is built on the underlying Java API with standard Visual Basic Translations to allocate the data onto the Excel sheets. For additional insight into the underlying methods, see the TWS API Documentation.",
    "This guide is intended to introduce new customers to the DDE Excel example use cases.",
    "You can use 'SecDefOptParams' tab to request Option Chain live market data. Getting Option Chain live market data requires entering: Underlying Symbol Underlying SecType Underlying ConId Page Name Activate Page (TRUE / FALSE) The images shown in the right-side show how to request IBM STK Option data and its output. ",
    "In TWS API 10.28+, you can use Excel DDE to place conditional order again. In 'Basic Order Tab', placing conditional order requires entering: Conditions (Column DY) Ignore Rth (0 / 1) (Column DZ) Cancel Order (0 / 1) (Column EA) The images shown in the right-side show how to place a Price Conditional Order for IBM (ConId: 8314). Here are the example formulas for Conditions (Column DY): Price Default: default Price of 8314(SMART) is <= 55 and default Price of 8314(SMART) is <= 55 or Double Bid/Ask: double bid/ask Price of 8314(SMART) is <= 55 or Last: last Price of 8314(SMART) is <= 55 or Double Last: double last Price of 8314(SMART) is <= 55 or Bid/Ask: bid/ask Price of 8314(SMART) is <= 55 or Last or Bid/Ask: last of bid/ask Price of 8314(SMART) is >= 55 or Mid-point: mid-point Price of 8314(SMART) is <= 55 or Time time is <= 20240415 12:00:00 Europe/Tallinn and time is >= 20240415 12:00:00 Europe/Tallinn and Margin Cushion the margin cushion percent is <= 4 and the margin cushion percent is >= 5 and Daily P&L Volume Volume of 8314(SMART) is <= 1200 and Volume of 8314(SMART) is >= 1200 or Trade trade occurs for IBM symbol on ARCA exchange for STK security type and Percentage Change PercentChange of 8314(SMART) is <= 1 and PercentChange of 8314(SMART) is >= 2 and Shortable Shares Fee Rate in % Here is an example of placing an order with multiple conditions: OR bid/ask Price of 8314(SMART) is <= 55 or default Price of 8314(SMART) is <= 55 or AND bid/ask Price of 8314(SMART) is <= 55 and default Price of 8314(SMART) is <= 55 and ",
    "The Interactive Brokers Excel RTD offering is a .NET offering for IBKR Pro customers. This is a unique API implementation designed to efficiently retrieve live market data through Excel. This is optimized for ease of use and efficiency without overwhelming Excel. As such, this is the optimal choice for customers who wish to collect large quantities of data without prior coding experience, or interest in algorithmically-placed orders.  By design, Microsoft Excel gives precedence to the user interface over the data connection to other applications. For that reason, Excel only receives updates when it is in a 'ready' state, and may ignore data sent for instance when a modal dialogue box is displayed to the user, a cell is being edited, or Excel is busy doing other things. The Excel Real Time Data server (RTD) API has been introduced to help address some of these limitations, but they are inherent to Excel as a trading application and not specific to an API technology.",
    "Please keep in mind that the Excel RTD offering can only retrieve streaming market data. There is no other established utility for this offering. Sample spreadsheet applications are distributed with the API download for each of the API technologies (RTD Server, ActiveX, DDE). It is important to keep in mind that the sample applications are intended as simple demonstrations of API functionality for third party programmers. They do not have robust error handling functionality and are not intended to be used as production level trading tools. Since the TWS RTD Server API technology directly refers to the C# API client source functions, it is supported on Windows Environment only.",
    "The TWS API Excel RTD Implementation is built around the Component Object Model (COM) architecture. The COM object and it's derivatives like ActiveX and OLE (Compound Documents) are built exclusively into Microsoft Windows and are reliant on the Operating System's Registry structure. Given the underlying technology of RTD requires Windows-specific architecture regarding it's registry, the TWSAPI Excel RTD functionality is not available in the Mac and Unix distribution of the TWSAPI offering.",
    "In many cases, customers might see a response for a given market data column which displays 'N/A', '0', '-1' in some of their cells. This can be occur for a few different reasons. While you may have part of the required market data subscription on the instrument, you may not have all of it. This is particularly common for derivatives traders who may not have a market data subscription for the given underlying. You might also encounter this by requesting too many symbols simultaneously. This is discussed further in the Outgoing Message Rate Limitations section Similar to (2) above, every client has a maximum number of market data lines shared between TWS and their API. By default, all customer's have a maximum of 100 market data lines, allowing for 100 unique contracts to be requested at any one time. If you surpass this limit, you may find that some fields can not be returned. This may also happen in the event your machine, in tandem with Excel, simply can not handle the volume of data requested. While the machine limitations are unique to each user, you may explore and modify the refresh rate as described in our documentation",
    "Clients who may have installed the API into a unique location may receive an #NA message in each RTD cell. While this is often indicative of a reference error, the #NA reference may be failing to call an installed DLL essential for the connection with Trader Workstation. To resolve this error, please follow the steps listed below: Uninstall the API from the 'Add/Remove Tool' in the Windows Control Panel as usual Delete the C:\\TWS API\\ folder if any files are still remaining to prevent a version mismatch. Locate the file 'C:\\Windows\\SysWOW64\\TwsSocketClient.dll'. Delete this file.",
    "It is important to keep in mind the 50 message/second API limit applies to RTD Server in the same way as other socket-based API technologies. So the Excel spreadsheet can send no more than 50 messages/second to TWS. Each subscription or cancellation request counts as 1 message (messages in the opposite direction are not included). So a spreadsheet can have hundreds of streaming tickers, but the subscriptions must be spread out over time so that no more than 50 new subscriptions are made per second, or the spreadsheet can become disconnected.",
    "It is important to mention that our real time market data is not tick-by-tick, meaning you will not obtain every single price movement happening in the market. Instead, real time data is given as snapshots generated at a fixed given pace:  Product Frequency Stocks, Futures and others 250 ms US Options 100 ms FX pairs 5 ms",
    "In order to use the TWS API, all customers must install either Trader Workstation or IB Gateway to connect the API to. Both downloads maintain the same level of usage and support; however, they both have equal benefits. For example, IB Gateway will be less resource intensive as there is no UI; however, the Trader Workstation has access all of the same information as the API, if users would like an interface to confirm data. It is recommended for API users to use offline TWS because TWS online version has automatic update. Please use same TWS version to make sure the TWS version and TWS API version are synced. These will help preventing version conflict issue. Note: For IBHK API users, it is commended to use IB Gateway instead of TWS. it is because all IBHK users cannot choose 'Never Lock Trader Workstation' in TWS - Global Configuration - Lock and Exit. If there is inactivity, TWS will be locked and there will be API disconnection.  Download Trader Workstation Download IB Gateway",
    "It is recommended for API users to use same TWS API version to make sure the TWS version and TWS API version are synced in order to prevent version conflict issue. Running the Windows version of the API installer creates a directory 'C:\\\\TWS API\\' for the API source code in addition to automatically copying two files into the Windows directory for the DDE and C++ APIs. It is important that the API installs to the C: drive, as otherwise API applications may not be able to find the associated files. The Windows installer also copies compiled dynamic linked libraries (DLL) of the ActiveX control TWSLib.dll, C# API CSharpAPI.dll, and C++ API TwsSocketClient.dll. Starting in API version 973.07, running the API installer is designed to install an ActiveX control TWSLib.dll, and TwsRtdServer control TwsRTDServer.dll which are compatible with both 32 and 64 bit applications. It is important to know that the TWS API is only available through the interactivebrokers.github.io MSI or ZIP file. Any other resource, including pip, NuGet, or any other online repository is not hosted, endorsed, supported, or connected to Interactive Brokers. As such, updates to the installation should always be downloaded from the github directly.  TWS API Download Page",
    "Some TWS Settings affect API. You can open the Global Configuration by selecting the Cog Wheel icon in the top right corner.",
    "In TWS/ IB Gateway - 'Global Configuration' - 'General', you can adjust the Memory Allocation (in MB)*. This feature is to control how much memory your computer can assign to the TWS/ IB Gateway application. Usually, higher value allows users to have faster data returning speed. Normally, it is recommended for API users to set 4000. However, it depends on your computer memory size because setting too high may cause High Memory Usage and application not responding. For details, please visit: https://www.ibkrguides.com/traderworkstation/increase-tws-memory-size.htm",
    "In TWS Global Configuration - API - Settings, there are many API settings. Please enable/disable some API settings based on your use case. In this section, only the most important API settings for API connection and incident troubleshooting are covered. Please: Enable 'ActiveX and Socket Clients' Disable 'Read-Only API' Enable 'Create API message log file' Enable 'Include market data in API log file' Change 'Logging Level' to 'Detail' Note: In IB Gateway Global Configuration - API - settings, there is no 'Compatibility Mode: Send ISLAND for US stocks trading on NASDAQ'. Specifying NASDAQ exchange in contract details may cause error if connecting to IB Gateway. For this error, please specify ISLAND exchange.",
    "It is compulsory for TWS users to auto logoff/auto restart TWS daily and manually login TWS weekly. In TWS/ IB Gateway - 'Global Configuration' - 'Lock and Exit', you can choose the time that your TWS will be shut down. For API users, it is recommended to choose 'Never lock Trader Workstation' and 'Auto restart'. Note: IBHK users does not have 'Never lock Trader Workstation' and 'Auto restart' in TWS. Windows Sleeping Mode also causes API disconnection. It is strongly suggested to choose 'Never Sleep' in Windows.",
    "In TWS - 'Global Configuration' - 'API' - 'Precautions', you can enable the following items to stop receiving the order submission messages. Enable 'Bypass Order Precautions for API orders'. Enable 'Bypass Bond warning for API orders'. Enable 'Bypass negative yield to worst confirmation for API orders'. Enable 'Bypass Called Bond warning for API orders'. Enable 'Bypass 'same action pair trade' warning for API orders'. Enable 'Bypass price-based volatility risk warning for API orders'. Enable 'Bypass US Stocks market data in shares warning for API orders'. Enable 'Bypass Redirect Order warning for Stock API orders'. Enable 'Bypass No Overfill Protection precaution for destinations where implied natively'.",
    "Each IB account has a pre-decided IB server. You can visit this link to know our IB servers' locations: https://www.interactivebrokers.com/download/IB-Host-and-Ports.pdf Yet, all IB paper accounts are connected to US server by default and its location cannot be changed. As IB servers in different regions have different scheduled server maintenance time (https://www.interactivebrokers.com/en/software/systemStatus.php), you may need to change the IB server location in order to avoid service downtime. For checking your connected IB server location, you can go to TWS and click 'Data' to see your Primary server. In the below image, the pre-decided IB server location is: cdc1.ibllc.com If you want to change your live IB account server location in TWS, please submit a web ticket to 'Technical Assistance' - 'Connectivity' in order to request changing the IB server location. In the web ticket, you need to provide: Which account do you want to have IB server location change? Which IB server location would you like to connect to? TWS AMERICA - EAST (New York) TWS AMERICA - CENTRAL (Chicago) TWS Europe (Zurich) TWS Asia (Hong Kong) TWS Asia - CHINA (For mainland China users, if the account server is hosted in Hong Kong, they will automatically connect with the Shenzhen Gateway mcgw1.ibllc.com.cn) Which IB scheduled maintenance time do you choose? (Recommended to choose the default schedule maintenance time of its own IB server location) North America Europe Asia After you submit the ticket, you will receive a web ticket reply which require you to confirm and understand the migration request. Note: For Internet users, as the connection between IB server and Exchange goes through a dedicated line, it is commonly recommended to choose a IB server location which is closer to your TWS location. For IB connection types, please visit: https://www.interactivebrokers.co.uk/en/software/connectionInterface.php The pre-decided IB server location connected from TWS is different from the IB Server location connected from IB Client Portal and IBKR Mobile. IB server location connected from TWS is pre-decided. You can submit a web ticket to request the IB server relocation for the TWS connection. IB server location connected from Client Portal, IBKR Mobile is based on your nearest IB server location. You cannot request the IB server relocation for Client Portal and IBKR Mobile connections. However, OAuth CP API users can specify which server they want to connect to by themselves. For details, please visit: https://www.interactivebrokers.com/campus/ibkr-api-page/cpapi-v1/#oauth-base-url",
    "In TWS Global Configuration - Orders - Smart Routing, you can set your SMART order routing algorithm behavior.",
    "Microsoft RTD interface has a ThrottleInterval property that determines the interval between data refreshes. By default, the value is set to 2000 milliseconds, which means Excel waits at least 2000 milliseconds between checks for updates. You are able to manually change the Throttle Interval to a smaller value* so as to increase the refresh rate of real time data.  The easiest way to change the ThrottleInterval property is through VBA: In Excel, go to the Visual Basic Editor window by pressing Alt_F11. On the Visual Basic Editor window, click on View -> Immediate Window or hold Ctrl_G to open the Immediate Window. On the Immediate Window, type in the following code and then click Enter: Application.RTD.ThrottleInterval=250 Application.RTD.ThrottleInterval=250 To verify that it is set correctly, type this line of code on the Immediate Window and click Enter: ? Application.RTD.ThrottleInterval<br> ? Application.RTD.ThrottleInterval Verify the next line should display 250. If this value is changed, the new value will persist when Microsoft Excel is restarted.  *Warning: As the ThrottleInterval is lowered, updates can come in so frequently that Excel is continuously updating values and doing calculations, Excel might end up in a state where it never gives the user a chance to do anything, effectively getting in a hung state. If this happens, set the Excel throttle interval higher.  Source: Microsoft Real-Time Data: Frequently Asked Questions How Do I Configure the RTD Throttle Interval in Excel?.",
    "This error message is most likely triggered because your TWS has not been configured properly for API socket connection. Please make sure to Enable ActiveX and Socket Client settings in your TWS. Also bear in mind that TWS Rtd Server connects to socket port 7496 by default. You will see the above error message if the socket port configured in your TWS API settings does not match what RTD is trying to connect to. See more details in What You Will Need .  This can occur if the API message rate of 50 messages/second is exceeded. No more than 50 messages can be sent from an API application such as RTD Server to TWS per second (this does not include messages in the opposite direction). Each ticker subscription request and subscription cancellation request corresponds to 1 message. If the 50 messages/second rate is exceeded, TWS will eventually close the connection. So for constructing an RTD spreadsheet with more than 50 tickers, it must be built to only make at most 50 new subscriptions or cancellations per second.  This error message is triggered to indicate the contract definition provided in your RTD formula cannot be found by TWS. Usually it is caused by incorrect contract attribute definitions or typo. You are suggested to refer to some Syntax Samples and find out the issue in your RTD formula.  This error message indicates the contract definition provided by you does not uniquely define one single contract. It is mostly triggered for stock symbols, such as MSFT and CSCO, that are listed on multiple primary exchanges. Specifying the PrimaryExchange will resolve the issue.  The error message is displayed when you are trying to request for a live tick type, while only delayed data is available due to missing Market Data Subscription. You need to either subscribe to market data pacakegs via Account Management, or request for Delayed Tick Types instead.  This is most likely because you have exceeded the limit of Market Data Lines . You can verify if this is reason by going to TWS and hold Ctrl_Alt_= at the same time. This should show a small pop-up window and indicate the maximum allowed market data lines as well as the currently subscribed top market data count. If you are subscribed to more than the maximum allowed, some of the data point will show '0'. Explore further troubleshooting in our Unset Value Responses section.",
    "The default Excel RTD API library is made up of at least four primary components, with an optional fifth component for those not using a Live TWS session. The basic components of a the RTD formula are ProgID, Server, Ticker, Topic and Connection Parameters (optional). While there may be some variety for the other topics, ProgID should always be set to 'Tws.TwsRtdServerCtrl' or an equivalent cell, and Server should always be left as an empty string.  =RTD(ProgID, Server, Ticker, Topic, ConnectionParams...)=RTD(ProgID, Server, Ticker, Topic, ConnectionParams...)",
    "Since the TWS RTD Server API directly refers to the C# API Client, so it connects to TWS (or IB Gateway) the same as C# via the socket. The Host IP Address, Socket Port and Client ID are required parameters for initiating a socket connection. The Host IP Address is the IP address where your TWS is running on. For a local connection, local IP 127.0.0.1 can be used. The Socket Port is the port for socket connection. You can setup the host port in TWS API Settings, and you need to have your API connect to the same port as you setup in TWS. The Client ID is an identification for each API connection. TWS can maintain up to 32 API Clients connecting at the same time, and the Client ID is used to distinguish each connection. This was originally designed so that API users can have multiple API programs (i.e. clients) running at the same using different strategies to trade separately. Since the TWS RTD Server API is only provided for relaying real-time data, there is no need to use multiple client IDs. The above three parameters are defaulted to the following values if not directly specified by the user: Host = '127.0.0.1' (i.e. the 'localhost') Port = '7496' ClientID = Integer.MaxValue - 1 Simple Syntax supports several pre-defined Connection Parameters that can be specified as a separate string (i.e. String2, String3...) in the RTD formula: 'paper': use port=7497 for connection instead (7497 is the default port for paper TWS sessions) 'gw': use port=4001 for connection instead (4001 is the default port for live IB Gateway sessions) 'gwpaper': use port=4002 for connection instead (4002 is the default port for paper IB Gateway sessions) For example, to request High price for SPY@SMART while connecting to a TWS logged with a paper account via port 7497: =RTD('Tws.TwsRtdServerCtrl',,'SPY@ARCA', 'High', 'paper')=RTD('Tws.TwsRtdServerCtrl',,'SPY@ARCA', 'High', 'paper')",
    "The ticker is a means of defining a contract for a given market data request. This will incorporate the symbol, security type, exchange, currency, and potentially more in some shape. This can be achieved in a single string, known as Simple Syntax, or through multiple definitions, known as Complex Syntax. While both are of equal value, some security types benefit from one structure over another.",
    "Simple Syntax is built to supply all of the contract details in a single string. This can be a useful tool to compile all of the data in one cell for ease of access. This is most suited for contracts with less detail, such as Stocks or Indices. The ticker string is delimited with the use of a forward slash, '/'. Each attribute of a contract has a unique position in the series of forward slashes that determines what value should be sent.  Simple Syntax Structure: 'SYMBOL@EXCHANGE/PRIMEXCH/SECTYPE/EXPIRATION/RIGHT/STRIKE/CURRENCY' Example Structure: 'SPX@SMART/CBOE/OPT/20230810/P/4480/USD'  Notes: Not all contract attributes are required to be specified. You can leave the field to be blank to make that field un-specified. Sequentially, if you only need to specify several contract attributes at the begining part of the Ticker string, you can leave out the rest of the string entirely as well. For example, instead of specifying 'SPY@SMART//////', 'SPY@SMART' would be sufficient to define the contract properly. There are several default contract attributes in the Ticker string. If you leave them un-specified, they will take the default values as following: EXCHANGE = 'SMART' SECTYPE = 'STK' CURRENCY = 'USD' For example, Ticker = 'SPY' is the same as 'SPY@SMART//STK////USD'.",
    "Complex Syntax provides the most flexibility that it allows users to customize all formula strings individually, where each string only represent one single parameter. There is no rule for the sequence of the appearance of each parameter. Unlike the Simple Syntax, each field of a Complex Syntax contract is submitted separately within its own string. There is no limit to the number of fields included so long as it remains relevant to a given contract. It should be noted this may be interspersed with the Simple Syntax, in the event an additional parameter needs to be included.  The Complex Syntax below will request the Bid price for SPY: =RTD('Tws.TwsRtdServerCtrl',,'sym=ES', 'sec=FUT', 'exch=CME', 'cur=USD', 'exp=202212', 'qt=Bid') The mixed syntax below with request AskSize data for SPY using the simple syntax defaults along with a designated primary exchange, ARCA: =RTD('Tws.TwsRtdServerCtrl',,'SPY', 'prim=ARCA', 'qt=AskSize')  Complex Syntax Strings Name String Syntax Description Contract ID 'conid=' The unique contract ID generated by IB. Can be found at TWS Contract Description . Symbol 'sym=' The contract symbol. SecurityType 'sec=' The type of security, e.g. 'STK', 'FUT' and so on. LastTradeDateOrContractMonth 'exp=' Format 'YYYYMMDD' is used for defining the Last Trade Date, while format 'YYYYMM' is used for defining the Contract Month. Strike 'strike=' The strike price for an option contract. Right 'right=' 'C' or 'P' for an option contract. Multiplier 'mult=' The contract multiplier. Exchange 'exch=' The exchange where to get market data from. For equities, 'SMART' means top data from all possible exchanges. PrimaryExchange 'prim=' The primary exchange of the contract. It is mostly specified when an contract ambiguity occurs for equity symbols that are listed on multiple exchanges. Currency 'cur=' The currency the contract is traded in. LocalSymbol 'loc=' The local symbol of the contract. Note the Local Symbol is mostly used for futures and options, and is different from the Symbol. TradingClass 'tc=' The trading class of the contract. Combo 'cmb=' Combo contract has to be defined using Complex Syntax or Mixed Syntax. The syntax for defining the combo is: 'cmb=<conid1>#<ratio1>#<action1>#<exchange1>;<conid2>#<ratio2>#<action2>#<exchange2>;' ,where combo legs are separated by ';' and individual leg parameters are separated by '#'. See more Combo Samples . DeltaNeutralContract 'und=' Delta-Neutral Contract. The syntax for defining the delta-neutral contract is: 'und=<<conid>#<delta>#<price>' , where delta-neutral contract parameters are separated by '#'. MktDataOptions 'opt=' Currently not supported. GenericTickList 'genticks=' A comma separated Ids of available Generic Tick Types. Topic 'qt=' Topic of market data request. Host 'host=' Host IP address. Port 'port=' Socket port. ClientId 'clientid=' The client ID for socket connection. Note that the client ID is used for identify multiple simultaneous API connections to the same TWS. It was originally designed for API users who would like to manage their strategies separately from different API programs. Since the TWS RTD Server API is currently only supported for real-time market data, there is no need to use multiple client IDs.",
    "The Topic specifies the tick types returned values after requesting market data. Each cell in Excel will correspond to a given Topic string to represent the given dataset. If no Topic is specified, 'Last' value will be returned by default. Note: If you do not have the corresponding Market Data Subscription, '0' will be displayed if you request for live tick types above. Please refer to Delayed Tick Types if you are interested in receiving 15-minute delayed data.",
    "Standard tick types returned to the user upon requesting data by default. Tick Name Topic String Description Bid Size 'BidSize' Number of contracts (or lots) offered at the bid price. Bid Price 'Bid' Highest bid price for the contract. Ask Price 'Ask' Lowest offer price for the contract. Ask Size 'AskSize' Number of contracts (or lots) offered at the ask price. Last Price 'Last' Last price at which the contract traded. Last Size 'LastSize' Number of contracts or lots traded at the last price. High 'High' High price for the day. Low 'Low' Low price for the day. Volume 'Volume' Trading volume for the day for the selected contract (Volume for US Stocks are quoted in lots. The actual number of shares in volume can be calculated by multiplying 100). Close Price 'Close' The last available closing price for the previous day. For US Equities, we use corporate action processing to get the closing price, so the close price is adjusted to reflect forward and reverse splits and cash and stock dividends. Open Price 'Open' Today's opening price. The official opening price requires a market data subscription to the native exchange of a contract. Last Exchange 'LastExch' The exchange where the Last Price is provided from. Bid Exchange 'BidExch' The exchange where the Bid Price is provided from. Ask Exchange 'AskExch' The exchange where the Ask Price is provided from. Last Timestamp 'LastTime' Time of the last trade (in UNIX time). Halted 'Halted' Indicates if a contract is halted. Bid Implied Volatility 'BidImpliedVol' Implied volatility calculated from option bid prices. Bid Delta 'BidDelta' Delta calculated from the option bid prices. Bid Option Price 'BidOptPrice' Current bid price for the option contract. Bid PV Dividend 'BidPvDividend' The present value of dividends expected on the option's underlying. Bid Gamma 'BidGamma' The option gamma value calculated from the option bid prices. Bid Vega 'BidVega' The option vega value calculated from the option bid prices. Bid Theta 'BidTheta' The option theta value calculated from the option bid prices. Bid Price of Underlying 'BidUndPrice' The current bid price of the option underlying. Ask Implied Volatility 'AskImpliedVol' Implied volatility calculated from option ask prices. Ask Delta 'AskDelta' Delta calculated from the option ask prices. Ask Option Price 'AskOptPrice' Current ask price for the option contract. Ask PV Dividend 'AskPvDividend' The present value of dividends expected on the option's underlying. Ask Gamma 'AskGamma' The option gamma value calculated from the option ask prices. Ask Vega 'AskVega' The option vega value calculated from the option ask prices. Ask Theta 'AskTheta' The option theta value calculated from the option ask prices. Ask Price of Underlying 'AskUndPrice' The current ask price of the option underlying. Last Implied Volatility 'LastImpliedVol' Implied volatility calculated from option last prices. Last Delta 'LastDelta' Delta calculated from the option last prices. Last Option Price 'LastOptPrice' Current last price for the option contract. Last PV Dividend 'LastPvDividend' The present value of dividends expected on the option's underlying. Last Gamma 'LastGamma' The option gamma value calculated from the option last prices. Last Vega 'LastVega' The option vega value calculated from the option last prices. Last Theta 'LastTheta' The option theta value calculated from the option last prices. Last Price of Underlying 'LastUndPrice' The current last price of the option underlying. Model Implied Volatility 'ModelImpliedVol' Implied volatility calculated from option model prices. Model Delta 'ModelDelta' Delta calculated from the option model prices. Model Option Price 'ModelOptPrice' Current model price for the option contract. Model PV Dividend 'ModelPvDividend' The present value of dividends expected on the option's underlying. Model Gamma 'ModelGamma' The option gamma value calculated from the option model prices. Model Vega 'ModelVega' The option vega value calculated from the option model prices. Model Theta 'ModelTheta' The option theta value calculated from the option model prices. Model Price of Underlying 'ModelUndPrice' The current model price of the option underlying.",
    "A selection of Generic Tick Types are also supported in TWS RTD Server API. To request for any Generic Tick Type, you just need to specify the name of the generic tick type as the Topic string in the RTD formula.  By default, all Generic Tick Types are automatically requested. User just need to directly specify the Topic as the name of a generic tick type to populate the data to Excel. In order to consume less data resource and make your market data request more efficient, you can directly specify the Generic Tick Type to be requested by defining string 'genticks=id1,id2,...'.  For example, to request 52-Week High price, only Generic Tick Type = 165 is required. The below formula will only request Generic Tick Type = 165: =RTD('Tws.TwsRtdServerCtrl',,'SPY@SMART', 'Week52Hi', 'genticks=165')=RTD('Tws.TwsRtdServerCtrl',,'SPY@SMART', 'Week52Hi', 'genticks=165')  Generic Tick Type Name Topic String Description Generic Tick Required Auction Volume 'AuctionVolume' The number of shares that would trade if no new orders were received and the auction were held now. 225 Auction Imbalance 'AuctionImbalance' The number of unmatched shares for the next auction; returns how many more shares are on one side of the auction than the other. 225 Auction Price 'AuctionPrice' The price at which the auction would occur if no new orders were received and the auction were held now. The indicative price for the auction. 225 Regulatory Imbalance 'RegulatoryImbalance' The imbalance that is used to determine which at-the-open or at-the-close orders can be entered following the publishing of the regulatory imbalance. 225 PL Price 'PlPrice' The PL Price, also known as the Mark Price, is the current theoretical calculated value of an instrument. Since it is a calculated value, it will typically have many digits of precision. 232 Creditmanager Mark Price 'CreditmanMarkPrice' Not currently available. 221 Creditmanager Slow Mark Price 'CreditmanSlowMarkPrice' Slow Mark Price update used in system calculations (same as Mark Price update in TWS Account Window -> Portfolio). 619 Call Option Volume 'CallOptionVolume' Call option volume for the trading day. 100 Put Option Volume 'PutOptionVolume' Put option volume for the trading day. 100 Call Option Open Interest 'CallOptionOpenInterest' Call option open interest. 101 Put Option Open Interest 'PutOptionOpenInterest' Put option open interest. 101 Option Historical Volatility 'OptionHistoricalVol' The 30-day historical volatility (currently for stocks). 104 RT Historical Volatility 'RTHistoricalVol' 30-day real time historical volatility (Futures only). 411 Option Implied Volatility 'OptionImpliedVol' A prediction of how volatile an underlying will be in the future. The IB 30-day volatility is the at-market volatility estimated for a maturity thirty calendar days forward of the current trading day, and is based on option prices from two consecutive expiration months. 106 Index Future Premium 'IndexFuturePremium' The number of points that the index is over the cash index (Indeses only). 162 Shortable 'Shortable' Describes the level of difficulty with which the contract can be sold short. See Shortable . 236 Fundamental Ratios 'Fundamentals' Provides the available Reuter's Fundamental Ratios. See fundamental_ratios_tags . 258 Trade Count 'TradeCount' Trade count for the day. 293 Trade Rate 'TradeRate' Trade count per minute. 294 Volume Rate 'VolumeRate' Volume per minute. 295 Last RTH Trade 'LastRthTrade' Last Regular Trading Hours traded price. 318 IB Dividends 'IBDividends' Contract's dividends. See IB Dividends . 456 Bond Factor Multipler 'BondMultiplier' Not currenctly available. 460 Average Volume 'AvgVolume' The average daily trading volume over 90 days (multiply this value times 100). 165 High 13 Weeks 'Week13Hi' Highest price for the last 13 weeks. 165 Low 13 Weeks 'Week13Lo' Lowest price for the last 13 weeks. 165 High 26 Weeks 'Week26Hi' Highest price for the last 26 weeks. 165 Low 26 Weeks 'Week26Lo' Lowest price for the last 26 weeks. 165 High 52 Weeks 'Week52Hi' Highest price for the last 52 weeks. 165 Low 52 Weeks 'Week52Lo' Lowest price for the last 52 weeks. 165 Short-Term Volume 3 Minutes 'ShortTermVolume3Min' The past three minutes volume. Interpolation may be applied. 595 Short-Term Volume 5 Minutes 'ShortTermVolume5Min' The past five minutes volume. Interpolation may be applied. 595 Short-Term Volume 10 Minutes 'ShortTermVolume10Min' The past ten minutes volume. Interpolation may be applied. 595 Futures Open Interest 'FuturesOpenInterest' Total number of outstanding futures contracts (TWS Build 965+ is required) 588 Average Option Volume 'AvgOptVolume' Average volume of the corresponding option contracts (TWS Build 970+ is required) 105",
    "When live streaming market data is not available because of missing Market Data Subscription, delayed data will be automatically relayed back. To request delayed data via RTD, you need to specify delayed tick types for the Topic. The table below shows a full list of available delayed tick types: Note: Delayed tick types are 15-minute delayed. Requesting for live tick types without market data subscription will result in error message 'Requested market data is not subscribed. Displaying delayed market data...'  Tick Name Topic String Description Delayed Bid Size 'DelayedBidSize' Number of contracts (or lots) offered at the bid price. Delayed Bid Price 'DelayedBid' Highest bid price for the contract. Delayed Ask Price 'DelayedAsk' Lowest offer price for the contract. Delayed Ask Size 'DelayedAskSize' Number of contracts (or lots) offered at the ask price. Delayed Last Price 'DelayedLast' Last price at which the contract traded. Delayed Last Size 'DelayedLastSize' Number of contracts or lots traded at the last price. Delayed High 'DelayedHigh' High price for the day. Delayed Low 'DelayedLow' Low price for the day. Delayed Volume 'DelayedVolume' Trading volume for the day for the selected contract (Volume for US Stocks are quoted in lots. The actual number of shares in volume can be calculated by multiplying 100). Delayed Close Price 'DelayedClose' The last available closing price for the previous day. For US Equities, we use corporate action processing to get the closing price, so the close price is adjusted to reflect forward and reverse splits and cash and stock dividends. Delayed Open Price 'DelayedOpen' Today's opening price. The official opening price requires a market data subscription to the native exchange of a contract. Delayed Last Timestamp 'DelayedLastTimestamp' Delayed time of the last trade (in UNIX time) (TWS Build 970+ is required).",
    "This page is provided as a demonstration of RTD formulas categorized by security type as well as syntax type. This will help to provide context on how a unique contract type should be formatted for either Simple or Complex syntax structures. The generic structure of a Contract is as follows: Symbol@Exchange/PrimaryExchange/SecType/Expiration/Right/Strike/Currency Symbol@Exchange/PrimaryExchange/SecType/Expiration/Right/Strike/Currency Note: TradingClass, Multiplier, and LocalSymbol can only be specified through Complex Syntax.",
    "Simple Syntax Comment: Bonds can be specified by defining the Symbol as the CUSIP. Currency = 'USD' is used as default here.  =RTD('Tws.TwsRtdServerCtrl',,'912828C57@SMART//BOND', 'Bid')=RTD('Tws.TwsRtdServerCtrl',,'912828C57@SMART//BOND', 'Bid')  Complex Syntax Comment: Bonds can also be defined with the ConId and Exchange as with any security type.  =RTD('Tws.TwsRtdServerCtrl',,'sym=912828C57','cur=USD', 'exch=SMART', 'sec=BOND', 'qt=Bid')=RTD('Tws.TwsRtdServerCtrl',,'sym=912828C57','cur=USD', 'exch=SMART', 'sec=BOND', 'qt=Bid') =RTD('Tws.TwsRtdServerCtrl',,'conid=147554578', 'exch=SMART', 'qt=Ask')=RTD('Tws.TwsRtdServerCtrl',,'conid=147554578', 'exch=SMART', 'qt=Ask')",
    "Spread contracts, also known as combos or combinations, combine two or more instruments. To define a combination contract it is required to know the Contract ID of the combo legs. The ConId can be easily found in the Contract Description page in TWS. The spread contract's symbol can be either the symbol of one of the contract legs or, for two-legged combinations the symbols of both legs separated by a comma as shown in the examples below. Simple Syntax is not sufficient to define spread contracts. You need to use either Complex Syntax . As a reminder, here is the string formula for defining the Combo Legs: 'cmb=<conid1>#<ratio1>#<action1>#<exchange1>;<conid2>#<ratio2>#<action2>#<exchange2>;'",
    "Complex Syntax Buy 1 DBK May19'17 15 CALL @EUREX+ Sell 1 DBK May19'17 16 CALL @EUREX:  =RTD('tws.twsrtdserverctrl',,'sym=DBK', 'exch=EUREX', 'cur=EUR', 'sec=BAG', 'cmb=270579950#1#BUY#EUREX;270579957#1#SELL#EUREX;', 'Bid')=RTD('tws.twsrtdserverctrl',,'sym=DBK', 'exch=EUREX', 'cur=EUR', 'sec=BAG', 'cmb=270579950#1#BUY#EUREX;270579957#1#SELL#EUREX;', 'Bid')",
    "Complex Syntax Buy 1 IBKR@SMART + Sell 1 MCD@SMART:  =RTD('Tws.TwsRtdServerCtrl',,'sym=IBKR,MCD', 'exch=SMART', 'cur=USD', 'sec=BAG', 'cmb=43645865#1#BUY#SMART;9408#1#SELL#SMART;', 'Bid')=RTD('Tws.TwsRtdServerCtrl',,'sym=IBKR,MCD', 'exch=SMART', 'cur=USD', 'sec=BAG', 'cmb=43645865#1#BUY#SMART;9408#1#SELL#SMART;', 'Bid')",
    "Complex Syntax Buy 1 VXJ7@CFE + Sell 1 VXK7@CFE:  =RTD('tws.twsrtdserverctrl',,'sym=VIX', 'exch=CFE', 'cur=USD', 'sec=BAG', 'cmb=249139906#1#BUY#CFE;252623425#1#SELL#CFE;', 'Bid')=RTD('tws.twsrtdserverctrl',,'sym=VIX', 'exch=CFE', 'cur=USD', 'sec=BAG', 'cmb=249139906#1#BUY#CFE;252623425#1#SELL#CFE;', 'Bid')",
    "Complex Syntax Buy 1 CL May'17 @COMEX+ Sell 1 BZ Jun'17 @COMEX:  =RTD('tws.twsrtdserverctrl',,'sym=CL.BZ', 'exch=COMEX', 'cur=USD', 'sec=BAG', 'cmb=55977404#1#BUY#COMEX;55807026#1#SELL#COMEX;', 'Bid')=RTD('tws.twsrtdserverctrl',,'sym=CL.BZ', 'exch=COMEX', 'cur=USD', 'sec=BAG', 'cmb=55977404#1#BUY#COMEX;55807026#1#SELL#COMEX;', 'Bid')",
    "Simple Syntax  =RTD('Tws.TwsRtdServerCtrl',,'XAUUSD@SMART//CMDTY', 'Bid')=RTD('Tws.TwsRtdServerCtrl',,'XAUUSD@SMART//CMDTY', 'Bid')  Complex Syntax  =RTD('Tws.TwsRtdServerCtrl',,'sym=XAUUSD','cur=USD', 'exch=SMART', 'sec=CMDTY', 'qt=Ask')=RTD('Tws.TwsRtdServerCtrl',,'sym=XAUUSD','cur=USD', 'exch=SMART', 'sec=CMDTY', 'qt=Ask')",
    "Note: Only Index CFD data can be directly queried via the API, but not equity CFD. Please directly request data for the underlying equity if you need data for an equity CFD contract.  Simple Syntax  =RTD('Tws.TwsRtdServerCtrl',,'IBDE30@SMART//CFD////EUR', 'Bid')=RTD('Tws.TwsRtdServerCtrl',,'IBDE30@SMART//CFD////EUR', 'Bid')  Complex Syntax  =RTD('Tws.TwsRtdServerCtrl',,'sym=IBDE30','cur=EUR', 'exch=SMART', 'sec=CFD', 'qt=ASK')=RTD('Tws.TwsRtdServerCtrl',,'sym=IBDE30','cur=EUR', 'exch=SMART', 'sec=CFD', 'qt=ASK')",
    "Simple Syntax Forex Ticker is defined in format 'CURRENCY1.CURRENCY2/CASH'.  =RTD('Tws.TwsRtdServerCtrl',,'EUR.USD/CASH', 'Bid')=RTD('Tws.TwsRtdServerCtrl',,'EUR.USD/CASH', 'Bid')  Complex Syntax For Complex Syntax, Forex Symbol is defined as the foreign currency, and the Currency is defined as the base currency.  =RTD('Tws.TwsRtdServerCtrl',,'sym=EUR','cur=USD', 'exch=IDEALPRO', 'sec=CASH', 'qt=Bid')=RTD('Tws.TwsRtdServerCtrl',,'sym=EUR','cur=USD', 'exch=IDEALPRO', 'sec=CASH', 'qt=Bid')",
    "Simple Syntax For futures that have multipler Multipliers (e.g. DAX has 5 and 25), Simple Syntax is not adequate to define the contract uniquely. Mixed Syntax can help to add addition specification for the Multiplier.  =RTD('Tws.TwsRtdServerCtrl',,'ES@CME//FUT/201712///USD', 'Bid')=RTD('Tws.TwsRtdServerCtrl',,'ES@CME//FUT/201712///USD', 'Bid')  Complex Syntax The LastTradeDateOrContractMonth and underlying Symbol can be replaced with the contract's own symbol, also known as LocalSymbol (named as Symbol within the TWS' Contract Description dialog). Local Symbol is not available in Simple Syntax.  =RTD('Tws.TwsRtdServerCtrl',,'loc=ESZ7','cur=USD', 'exch=CME', 'sec=FUT', 'qt=Ask')=RTD('Tws.TwsRtdServerCtrl',,'loc=ESZ7','cur=USD', 'exch=CME', 'sec=FUT', 'qt=Ask')",
    "Simple Syntax Comment: Futures Options follow the same rule as conventional option contracts.  =RTD('Tws.TwsRtdServerCtrl',,'ES@CME//FOP/20180316/C/1000/USD', 'Close')=RTD('Tws.TwsRtdServerCtrl',,'ES@CME//FOP/20180316/C/1000/USD', 'Close')  Complex Syntax  =RTD('Tws.TwsRtdServerCtrl',,'loc=ESH8 C1000', 'cur=USD', 'exch=CME', 'sec=FOP', 'qt=Close')=RTD('Tws.TwsRtdServerCtrl',,'loc=ESH8 C1000', 'cur=USD', 'exch=CME', 'sec=FOP', 'qt=Close')",
    "Simple Syntax Comment: Default Currency = 'USD' is used.  =RTD('Tws.TwsRtdServerCtrl',,'SPX@CBOE//IND', 'Last')=RTD('Tws.TwsRtdServerCtrl',,'SPX@CBOE//IND', 'Last')  Complex Syntax  =RTD('Tws.TwsRtdServerCtrl',,'sym=INDU','cur=USD', 'exch=NYSE', 'sec=IND', 'qt=Close')=RTD('Tws.TwsRtdServerCtrl',,'sym=INDU','cur=USD', 'exch=NYSE', 'sec=IND', 'qt=Close')",
    "Simple Syntax  =RTD('Tws.TwsRtdServerCtrl',,'VINIX@FUNDSERV//FUND', 'Close')=RTD('Tws.TwsRtdServerCtrl',,'VINIX@FUNDSERV//FUND', 'Close')  Complex Syntax  =RTD('Tws.TwsRtdServerCtrl',,'sym=VINIX','cur=USD', 'exch=FUNDSERV', 'sec=FUND', 'qt=Close')=RTD('Tws.TwsRtdServerCtrl',,'sym=VINIX','cur=USD', 'exch=FUNDSERV', 'sec=FUND', 'qt=Close')",
    "Simple Syntax Comment: Options follow the same rule as Futures Options contracts.  =RTD('Tws.TwsRtdServerCtrl',,'SPX/SMART/OPT/20240322/C/5110/USD', 'Close')=RTD('Tws.TwsRtdServerCtrl',,'SPX/SMART/OPT/20240322/C/5110/USD', 'Close')  Complex Syntax  =RTD('Tws.TwsRtdServerCtrl',,'loc=SPX 240315C05110000', 'cur=USD', 'exch=SMART', 'sec=OPT', 'qt=Close')=RTD('Tws.TwsRtdServerCtrl',,'loc=SPX 240315C05110000', 'cur=USD', 'exch=SMART', 'sec=OPT', 'qt=Close')",
    "Simple Syntax Comment: Use Symbol, LastTradeDateOrContractMonth, Right and Strike to define warrants contract.  =RTD('tws.twsrtdserverctrl',,'MSFT@FWB//WAR/202401/C/200/EUR', 'Bid')=RTD('tws.twsrtdserverctrl',,'MSFT@FWB//WAR/202401/C/200/EUR', 'Bid')  Complex Syntax LocalSymbol can be used to define warrants contract.  =RTD('tws.twsrtdserverctrl',,'loc=TT45K3','cur=EUR', 'exch=FWB', 'sec=WAR', 'qt=Bid')=RTD('tws.twsrtdserverctrl',,'loc=TT45K3','cur=EUR', 'exch=FWB', 'sec=WAR', 'qt=Bid')",
    "Important notes for Stocks and SMART routing Specifying the Exchange as opposed to using PrimaryExchange means requesting data from that exchange specifically. Stock symbols that contain a '.' are supported in both Simple Syntax Complex Syntax. For certain smart-routed stock contracts that have the same Symbol, Currency and Exchange, you would also need to specify the PrimaryExchange attribute to uniquely define the contract. This should be defined as the native exchange of a contract, and is good practice for all stocks.  Simple Syntax  =RTD('Tws.TwsRtdServerCtrl',,'SPY@SMART/ARCA/STK///USD', 'qt=Open')=RTD('Tws.TwsRtdServerCtrl',,'SPY@SMART/ARCA/STK///USD', 'qt=Open')  Complex Syntax  =RTD('Tws.TwsRtdServerCtrl',,'sym=SPY', 'sec=STK', 'exch=SMART', 'cur=USD', 'prim=ARCA', 'qt=Open')=RTD('Tws.TwsRtdServerCtrl',,'sym=SPY', 'sec=STK', 'exch=SMART', 'cur=USD', 'prim=ARCA', 'qt=Open')",
    "Some customers may find that as opposed to generic ticks or live streaming data, they may want to remove or reduce the number of ticks. It is even possible to change RTD to report snapshot data instead. This section will document the process to change these underlying values requested. Keep in mind, RTD is based on underlying C# code. As such, a working knowledge of C# is required. These modifications will also require a C# compiler and interpreter are installed on your windows machine.",
    "Navigate to the TwsRtdServer source directory and launch the solution file. This can be found at {TWS API}\\source\\CSharpClient\\TwsRtdServer\\TwsRtdServer.sln{TWS API}\\source\\CSharpClient\\TwsRtdServer\\TwsRtdServer.sln ",
    "Within the solution file, you will need to navigate to the TwsRtdServerMktDataRequest.cs file. This file contains the request for EClient.reqMktData, which effects the underlying behavior. The request is on line 73. ",
    "By default, all generic ticks are requested in the RTD sample. For those who only need minimum values, such as Bid, Ask, Last, and their respective sizes, may want to change the genericTicks variable from monitoring the sample-provided values, and instead return an empty list. ",
    "In your platform of choice, you will need to compile your code to be built moving forward. Compiling in debug is recommended for testing, though compiling for Release will provide the best performance once in production. ",
    "It is then recommended to test any changes made. Depending on the software used to compile changes, users may be automatically launched into a new file to test with. It is encouraged to test any changes made to see that expected changes are changed correctly, while no other actions are effected. ",
    "This guide is intended to introduce new customers to the RTD Excel Sample Sheet and introduce the systems available of our underlying API. Sample spreadsheet applications are distributed with the API download for each of the API technologies (RTD Server, ActiveX, DDE). It is important to keep in mind that the sample applications are intended as simple demonstrations of API functionality for third party programmers. They do not have robust error handling functionality and are not intended to be used as production level trading tools.",
    "While having TWS up and running and all the necessary API settings are set on TWS, as show Configure Trader Workstation for RTD, we can then locate our sample sheet. Navigate to C:\\TWS API\\samples\\Excel C:\\TWS API\\samples\\Excel and select 'TwsRtdServer.xls'. ",
    "The sample sheet primarily uses the START and END macro buttons to automatically add or remove an equal sign at the beginning of the pre-populated formulas in order to complete each request. In the sample, the names of the columns in the spreadsheet such as 'Volume', are used as the 'topic string' and are referenced directly in the RTD formulas to create the formulas for each cell. You may do the same in your custom spreadsheet or you may write your formulas explicitly. This spreadsheet consists of 3 pages: Samples: includes examples for different security types (stocks, options, futures, forex, etc.) Tickers(EUR): includes a variety of European stokcs Tickers(USD): includes a variety of US stocks NOTE: If if Exchange, Currency and SecType are not specified, those values default to SMART, USD and STK accordingly. ",
    "Requesting data through the Excel RTD sample is a simple process and can be done in 2 ways: Locate and click the start button on one of the 3 pages. This will trigger the data to start streaming. Implicitly, you may change the values in the columns to define your own security/contract. Create and enter a formula into any empty cell. Once you hit enter, the data will start streaming in that cell with the requested quote. ",
    "To request a specific Tick type, you can utilize the 'qt' parameter in the complex syntax by specifying it (for example, 'qt=Bid') or simply enter its name at the end of a simple syntax formula (for example, 'AAPL@SMART BidSize'). Explore the various available tick types in our Generic Tick Types section. *It is important to note that each cell can only return one tick type (one quote).",
    "As stated within the Architecture section, the Excel RTD API is built on the underlying Java API with standard Visual Basic Translations to allocate the data onto the Excel sheets. For additional insight into the underlying methods, see the TWS API Documentation.",
    "FIX (Financial Information eXchange) is an open, industry-standard protocol for the electronic transmission of orders and related data. The protocol is defined and maintained by an industry association, the FIX Trading Community. Use of FIX requires an integration process lead by our FIX Engineering team, who can be reached at fixengineering@ibkr.com. For a basic understanding of the FIX protocol, its history, and its capabilities, please review this link: https://www.fixtrading.org/what-is-fix/",
    "Interactive Brokers supports routing of orders via the FIX protocol for clients who meet the following criteria: Minimum equity under management: 10,000 USD Minimum commissions per month: 1,500 USD",
    "Interactive Brokers requires Institutional and Enterprise clients to arrange for dedicated connectivity to IBKR infrastructure in order to route orders using FIX. Examples include connection via VPN, extranet, leased line, and cross-connect. Please contact FIX Engineering for detail on available methods and service providers.  Non-Institutional/Enterprise clients may use FIX over the Internet by way of our IB Gateway platform. Download links are available to the right.  IB Gateway Stable IB Gateway Latest",
    "Once a client is vetted by the FIX Engineering team, they will require that the FIX Integration Form be completed and returned.  Download The FIX Integration Form The FIX onboarding process begins with contacting our FIX Engineering team at fixengineering@ibkr.com. In general, FIX onboarding proceeds as follows: The FIX Engineering team will review your account to validate you meet the Account Minimums FIX Engineering creates a test FIX session for you in our QA system. You begin testing to determine any necessary messaging configuration changes. When ready, you may schedule a supervised FIX certification test with a member of the FIX Engineering team. The certification test will replicate all order types, instructions, etc., that you plan to send in production. The test will also include unsolicited cancels, simulated trade busts, and recovery testing (simulated line failure). Upon successful completion of the certification test, FIX Engineering will convert an existing production TWS user in your account into a dedicated FIX session user. With the new FIX user in place, we test connectivity to the session, heartbeats, and a few small test orders. Once ready, production order flow can continue at the pace you choose.",
    "If you are a vendor of an OMS platform and would like to support routing of orders to Interactive Brokers, please contact our FIX Engineering team at fixengineering@ibkr.com.",
    "Please find a link to IBKR's FIX Implementation Manual to the right. While Interactive Brokers does implement the FIX protocol standard, it is important to remember that all FIX tags from 5000-9999 are reserved for custom implementations. As such, it is recommended to review our use of custom tags as outlined in our FIX Implementation Manual.  IBKR FIX Manual",
    "While working with Interactive Brokers' APIs, most* securities require a Level 1, top of book, market data subscription to receive market data. This is required for all users at Interactive Brokers retrieving market data through the API. *Forex and Cryptocurrencies do not require any additional market data subscriptions to receive market data.",
    "In order to receive market data through the API, there are a few minimum requirements before data can be received. Opened IB Account (Demo accounts cannot subscribe to data). Must use an IBKR PRO account type Clients should have $500 USD in their account in addition to the cost of all market data subscriptions. Please be sure to subscribe to the market data through the Client Portal Market Data Subscriptions Page before requesting market data through the API. Please be sure to enable Market Data API access through the Client Portal Market Data Subscriptions Page.",
    "Category The following minimums are required to subscribe and maintain market data and research subscriptions. This does not include the cost of the service. Individual Accounts (unless listed below) USD 500.00 (or non-USD equivalent) Financial Advisor Client Accounts USD 500.00 (or non-USD equivalent) Institutional and/or Organizational Accounts USD 500.00 (or non-USD equivalent) Financial Advisor USD 500.00 (or non-USD equivalent) Non-Professional Advisor USD 200.00 (or non-USD equivalent) Introducing Broker Clients USD 200.00 (or non-USD equivalent) Indian residents 1 trading with an IB India account USD 100.00 (or non-USD equivalent) *Please be aware the funded status for a given account will not take effect until the next business day. As a result, any market data subscriptions added on the day the account is funded will not be available until the following day.  Notes: The minimum requirements plus the cost of the subscription are required to have the data activated. Indian resident is an individual who resides in India for more than 182 days per year. Market Data services will be terminated once clients receive Market Data Violator notice provided the equity falls below USD 500.00 (or non-USD equivalent)",
    "Please be aware that the Interactive Brokers API Support team is not permitted to provide advice with regards to Market Data Subscriptions. For traders seeking support with market data subscriptions, please create a ticket with our Market Data team. The Market Data Subscription section is listed under the 'Account Services' topic.  How to create a ticket",
    "To maintain Interactive Brokers compliance with regulatory and exchange mandates, there are a handful of market data questionnaires that must be completed in order to retrieve market data through the API. The details listed below showcase two of these that must be completed, otherwise your user will automatically be set to deny API market data access.",
    "The Market Data API Acknowledgement is required for all users who intend to request market data through any API platform. Proceeding without this form being acknowledged, users will receive errors from their market data requests stating that market data is not subscribed. This will effect users who trade programmatically with either the TWS API or the Web API. This will also effect those that use Third Party software.  If you are not prompted through the notification bell after logging in to Client Portal, you can find the Market Data API Acknowledgement by: Log in to the Client Portal Click 'Welcome {Your Name}' in the top right corner, and select 'Settings' Select the 'Market Data Subscriptions' button in the Settings page. On the right side of your settings page, you should see a box for 'Market Data API Acknowledgement'. Please select the blue Cog Wheel icon to modify the settings. On the next page, under 'Would you like to enable this functionality', you will need to select 'Yes' and then continue. The next page will display a form that must be reviewed and digitally signed. Logging out of all active platforms and then logging will allow market data access for your net API session. ",
    "Users that have interacted with Futures trading or market data through our API offerings will be prompted on login to complete the 'API User Activity Certification'. As opposed to blocking general API market data, this will specifically effect those that trade Futures through CME to remain in compliance with CME Rule 576. ",
    "If you proceed and agree with the form, you will be prompted with three separate choices: The user does not submit API messages. Please disable this functionality. If you do not interact with the API at all, this choice will disable the API functionality moving forward. All or some of the API messages submitted are manually approved (e.g by clicking a button) (You do not need to check this box if you only use TWS for manual orders. Check this box if you use a third party front end). This option is for users who are using a Third Party Software provider to manually submit your order. All or Some of the API messages submitted are generated & submitted by an automated system. Any trader using the API to programmatically submit trades without manually approving their submission should select this option for their user. After selecting this option, users will need to provide any software used to place these orders and then denote who manages order submission, whether it is an individual, a rotating team of individuals, or on a per-order basis to denote the External Operator. ",
    "Most exchanges and data vendors classify clients as either non-professional or professional. By default, organizations such as corporations, limited liability companies, partnerships and any account where the data is used for more than personal investment purposes is deemed to be professional. In addition, private persons may be considered professional if they are registered as a security or investment advisor, or act in a similar capacity. A trader who is employed by a financial services business may also be considered a professional. Click here for more information about non-professional qualifications.",
    "Market data is provisioned on a per-user basis. This means that even though you may have a market data subscription on one user in an account, a second user on the same account does not gain those permissions.",
    "Some individuals may choose to have multiple users under a single account. This is quite common particularly for traders who may wish to use the API and the Trader Workstation or Client Portal at the same time. Alternatively, institutions may have a dedicated machine for an automated trading algorithm that a developer would supervise while other individuals are manually trading on the account. It is important to note that in the last case, individuals can create a limited-permission user which has restricted access from the standard. This would allow somebody like a developer to build out an implementation with the live account without having withdrawal access, or direct trading access. Users interested in creating reduced-permission users can contact the Interactive Brokers Account Configuration team, as listed on our Customer Service Contacts page.",
    "Market data may also be shared between a live and paper username so that both can retrieve data using the same market data subscription. Each Live user can share data with one (1) Paper account, with one Paper account allowed per live account. Please see our Market Data Considerations page for additional insight into the behavior of shared market data.",
    "Each Live account structure has access to a Paper account with unique credentials. While the Live username can typically be used for Trader Workstation, accessing Third Party Platforms or the Client Portal API require the direct Paper credentials. The steps to find your Paper account credentials are as follows:",
    "Log in to the Client Portal using your Live Account's username and password. ",
    "Click the Head and Shoulders icon next to 'Welcome {Your Name}'. ",
    "From the Head & Shoulders dropdown, click the 'Settings' button. ",
    "Once on the Settings page, navigate to the Paper Trading Account link, under the Account Configuration section. ",
    "After selectin the Paper Trading Account, you will be able to review your paper username and account ID. You will also see which Live user your paper account is linked to, and a link to reset the password of your paper user separate from your Live account. ",
    "IBKR allows for free on-platform data; however, data on the API is considered off-platform. Exchanges maintain different licensing requirements and agreements for off-platform market data viewing. While you may receive live pricing through the Trader Workstation for some securities like US Stocks in your Trader Workstation, this may not be the same through your API. This is because this data is often provided for free to our customers under our existing market data agreements. In some IB accounts, clients may see there are 2 different data bundles with same names, but one is free while another one is not free. For example, Hong Kong Securities Exchange (Stocks, Warrants & Bonds) (L1) HKD 0/month is free while Hong Kong Securities Exchange (Stocks, Warrants & Bonds) (L1) HKD 130/month is not free. The free one only provides data in Trader Workstation, and it does not provide data via API or 3rd Party platform.",
    "Market data subscriptions are paid once, every calendar month. Market data subscriptions are not pro-rated. After subscribing to market data, no additional usage fees or other costs will be incurred.",
    "All users at Interactive Brokers are given a set amount of market data lines. Market data lines dictate how much market data can be retrieved simultaneously from a given user. This Includes all data pulled through Trader Workstation watchlist and the API. After going over the market data line cap, any future requests would return an error message that additional market data lines are required. In TWS, if you want to know how many data lines are being used, you can click the following buttons to show current used market data lines. Windows/ Unix/ Linux: Click 'Ctrl' + 'Alt' + '=' MacOS: Click 'CMD' + 'OPT' + '+'  For example: The username is provisioned for 100 market data lines. If the TWS Watchlist is displaying 50 symbols in their watchlist, and one API connection is retrieving 25 market data lines, that means a second API connection could retrieve a maximum of 25 additional market data lines before reaching the 100 market data line limit.",
    "Given the potentially high amount of data being sent, market depth and tick data requests are more limited. Just as with historical data requests, the amount of active depth or tick requests are related to the amount of market data lines: Number of market data lines Tick By Tick Data Max Market Depth (Level II) Number of subscribed Quote Booster packs 100 5 3 0 101 - 200 10 3 1 201 - 300 15 3 2 301 - 400 20 3 3 401 - 500 25 4 4 501 - 600 30 5 5 601 - 700 35 6 6 701 - 800 40 7 7 801 - 900 45 8 8 901 - 1000 50 9 9 1001 - 1100 55 10 10 1100+ 60-500 11 - 60 special offer Note: Tick By Tick market data lines scale at 5% of total market data lines. The values shown in the table above are for approximations. End users from IB IBroker clients which use CP API + DAM SSO still have this limitation: each IBroker end-user can get up to max >= 100 data lines. However, the limit is on a per session basis per IP Address. For details, please contact IB DAM team.",
    "In order to receive real-time market data, customers must be a subscriber to market data. All clients initially receive 100 concurrent lines of real-time market data (which can be displayed in TWS or via the API) and always have a minimum of 100 lines of data. After the first month of trading, the quantity of market data is allocated using the greater value of: USD monthly commissions divided by 8 USD equity multiplied by 100 divided by $1,000,000 (rounded down to the nearest integer) 100  Example 1: In month two, your account shows the following values: USD Monthly Commissions: $16, USD Equity: $950,000 Using the calculations above, you would still receive the minimum 100 lines of data, since: $16/8 = 2 $950,000 x 100 / $1,000,000 = 95  Example 2: In month three, your account shows the following values: USD Monthly Commissions: $500, USD Equity: $1,245,000 Using the calculations above, you would receive 124 lines of data, since: $500/8 = 62.5 $1,245,000 x 100 / $1,000,000 = 124.5, rounded down to 124.",
    "While market data might seem overwhelming at first, it can be broken down and made more digestible from covering a few important points. Level 1 market data subscriptions provide: live watchlist data, tick-by-tick data, historical bar data, historical tick data. Level 2 market data subscriptions only are needed for market depth. The OPRA market data subscription will provide options data for all options in the United States. Options Greeks data is based on the underlying symbols. As such, a market data subscription for both the underlying and derivative are necessary for options greeks data. Indices sometimes require a separate market data subscriptions from the derivatives, and may require a direct market data subscription.",
    "For stocks, there are individual exchange-specific market data subscriptions necessary to receive streaming quotes. For instance, for NYSE stocks this subscription is known as 'Network A', for ARCA/AMEX stocks it is called 'Network B' and for NASDAQ stocks it is 'Network C'. Each subscription is added a la carte and has a separate market data fee. Alternatively, there is also a 'US Securities Snapshot Bundle' subscription which does not provide streaming data but which allows for real time calculated snapshots of US market NBBO prices. Making a request with this endpoint, the returned value is a calculation of the current market state based on data from all available exchanges. The following table lists the cost and maximum allocation for regulatory snapshot quotes: Listed Network Feed Price per reqSnapshot request Pro or non-Pro Max reqSnapshot request NYSE (Network A/CTA) 0.01 USD Pro 4500 NYSE (Network A/CTA) 0.01 USD Non-Pro 150 AMEX (Network B/CTA) 0.01 USD Pro 2300 AMEX (Network B/CTA) 0.01 USD Non-Pro 150 NASDAQ (Network C/UTP) 0.01 USD Pro 2300 NASDAQ (Network C/UTP) 0.01 USD Non-Pro 150",
    "Interactive Brokers support is often asked about which subscription is best for each individual. While there is no perfect subscription for everyone, the table below describes some of the more common subscriptions along with what they cover. If you have direct questions for an exact symbol, please try our Market Data Assistant for assistance.  Market Data Assistant While this list contains some of the more common market data subscriptions, this does not indicate trading advice, nor the best subscription for every individual. If you have any questions about specific market data subscriptions, please create a ticket with our market data team. NAME EXCHANGES COVERED Examples CBOE Streaming Market Indexes Provides L1 data for CBOE indices. SPX* NYSE (Network A/CTA) Provides L1 data for NYSE listed securities. CYS, F, LLY NYSE American, BATS, ARCA, IEX, and Regional Exchanges (Network B) Provides L1 data for ARCA, BATS, IEX, and other major US Regional Exchanges listed securities. IBKR, SPY, VXX NASDAQ (Network C/UTP) Provides L1 data for NASDAQ listed securities. AAPL, IBKR, MSFT, TSLA OPRA (US Options Exchanges) Provides L1 data for US Options.* SPX** US Securities Snapshot and Futures Value Bundle Provides L1 data for US Futures. ES ** US Equity and Options Add-On Streaming Bundle Bundle containing all three market data requests and OPRA. Requires the US Securities Snapshot and Futures Value Bundle. AAPL, F, IBKR, SPX** *Please note values such as greeks that are based on the underlying require the Network subscription as well. ** For options and futures market data subscriptions, the underlying Index will not be included.",
    "API users can subscribe to the following 'Alternative Display' market data packs for getting Chinese Market Data via API and TWS. NAME EXCHANGES COVERED Examples Shanghai Stock Exchange 5 Second Snapshot via HKEx Alternative Display Shanghai Stock Exchange, Shanghai-Hong Kong Stock Connect (SEHKNTL) 600000, 601728 SEHKNTL Shanghai Stock Exchange Alternative Display Top of Book (L1) Shanghai Stock Exchange 600000 Shenzhen Stock Exchange 3 Second Snapshot via HKEx Alternative Display Shenzhen Stock Exchange, Shanghai-Hong Kong Stock Connect (SEHKSZSE) 000001, 000001 SEHKSZSE Shenzhen Stock Exchange Alternative Display Top of Book (L1) Shenzhen Stock Exchange 000001 *Please note that Non-Professional and Professional clients may have different available market data packs. *Do not subscribe 'Alternative Display' market data pack(s) and Non-'Alternative Display' market data pack(s) at the same time. This may cause data pack conflict. For example, having 'Shanghai Stock Exchange 5 Second Snapshot (via HKEx)' and 'Shanghai Stock Exchange 5 Second Snapshot via HKEx Alternative Display' at the same time may cause data pack conflict. *For API clients, please unsubscribe Non-'Alternative Display' Chinese market data pack(s) before subscribing 'Alternative Display' Chinese market data pack(s). If data pack conflict happens, please wait until next month or please contact Interactive Brokers Customer Services for unsubscribing the Non-'Alternative Display' Chinese market data pack(s) from IB back-end side. *'Shanghai Stock Exchange 5 Second Snapshot via HKEx Alternative Display' only provides 5 seconds snapshot bid, ask and last data. *'Shenzhen Stock Exchange 3 Second Snapshot via HKEx Alternative Display' provides real time data, but its bid/ ask data will be 3 seconds snapshot.",
    "To get data via API, client needs to first to go TWS/ IB Gateway - Global Configuration - API - News Configuration to enable News Providers. IB only supports client to get News data from the following 4 News providers: Briefing.com Analyst Actions (BRFUPDN) (Free) Briefing.com General Market Columns (BRFG) (Free) Dow Jones Newsletters (DJNL) (Free) Benzinga (BZ) ('Benzinga Breaking News via API' (USD 35/month) research subscription is required) To subscribe 'Benzinga Breaking News via API', please Live Account IB Client Portal - Setting - Research Subscriptions.",
    "Typically for market depth, Interactive Brokers will only require a Level 1 market data subscription followed by a Level 2 market depth subscription. However, NASDAQ/ISLAND requires an additional market data subscription in order for clients to retrieve market depth off-platform in the form of the API or third party platforms. Clients must subscribe to the following: All US level 1 US Equity market data subscriptions. This includes either: 'NYSE (Network A/CTA)', 'NYSE American, BATS, ARCA, IEX, and Regional Exchanges (Network B)', AND 'NASDAQ (Network C/UTP)' (All three subscriptions) 'US Equity and Options Add-On Streaming Bundle' The 'NASDAQ TotalView-OpenView' is required to receive level 2 data is required for all platforms. While this is necessary for market depth, this alone will not provide market depth for off-platform subscriptions The 'NASDAQ TotalView-OpenView EDS' market data subscription is required for off-platform market data subscriptions.",
    "This page is used to document all available order types available through the Interactive Brokers API interfaces. The values documented showcase the minimum values needed to create the order. Additional parameters can be used or combined in some cases. You can find the available fields or parameters for orders in their respective interfaces: TWS API's Order Object CPAPI's /iserver/account/{{accountId}}/orders endpoint",
    "While the Interactive Brokers support team can help assist with required parameters for the API, they can not comment on best orders to use, financial or trading advice, or any further information aside from API logic. It is important to test the order type idea manually in TWS before writing the API execution tactic because some execution ideas (e.g. applying STP LMT on Iceberg / applying Bracket Order with IBALGO) may not supported by TWS. As a result, they will not be supported by API too. Paper Trading Accounts are based on a simulated environment, and as a result, order execution behavior is not indicative of real world trading conditions. The paper accounts should be used exclusively for understanding how tools function. It is important to test the order type idea manually in TWS before writing the API execution tactic because some execution ideas (e.g. applying STP LMT on Iceberg / applying Bracket Order with IBALGO) may not supported by TWS. As a result, they will not be supported by API too. Interacive Brokers APIs do not support fractional or cash quantity trading with exception to Cryptocurrencies and Forex trading.",
    "Because Cryptocurrencies at Interactive Brokers are managed through external groups like ZEROHASH and PAXOS, the available order types and behaviors are slightly different from average. The lists below indicate what is available for BUY and SELL orders when using Cryptocurrencies. Please be aware that no other order types are available for Crypto orders.  BUY Order Types LMT Order Using 'quantity' or 'totalQuantity' values. MKT Orders using 'cashQty' value. Time in Force LMT Orders support 'DAY', 'GTC', 'IOC' The TWS API Also Supports the 'Minutes' time in force. MKT Orders only support 'IOC'.  SELL Order Types LMT Order Using 'quantity' or 'totalQuantity values. MKT orders using 'quantity' or 'totalQuantity' values. Time in Force LMT Orders support 'DAY', 'GTC', 'IOC' The TWS API Also Supports the 'Minutes' time in force. MKT Orders only support 'IOC'.",
    "While Interactive Brokers' API offerings do maintain their own pacing limitations, Interactive Brokers as a whole maintains an order pacing limitation. This is known as the Order Efficiency Ratio. While this does not typically effect regular traders, automated trading systems may be impacted. This is because OER does not necessarily impact a lower volume of trades, but will effect those who submit thousands of orders without regular execution. More information about measuring and understanding the order efficiency ratio can be found in our Order Management Overview article.",
    "It is important to note that while this page does document both our TWS API and CPAPI, not all order types are available in both platforms. As such, please keep in mind: Orders labeled in Python, Java, C++, C#, and Visual Basic are for use in the TWS API Orders labeled in CURL are for use in the Client Portal API",
    "This section will explore all available orders through Interactive Brokers that can be accomplished in a single standard request structure. This includes typical behaviors such as Market, Limit, and Stop orders.",
    "",
    "An Auction order is entered into the electronic trading system during the pre-market opening period for execution at the Calculated Opening Price (COP). If your order is not filled on the open, the order is re-submitted as a limit order with the limit price set to the COP or the best bid/ask after the market opens. Products: FUT, STK More on Auction Orders More on Supported exchanges",
    "For option orders routed to the Boston Options Exchange (BOX) you may elect to participate in the BOX's price improvement auction in pennies. All BOX-directed price improvement orders are immediately sent from Interactive Brokers to the BOX order book, and when the terms allow, IB will evaluate it for inclusion in a price improvement auction based on price and volume priority. In the auction, your order will have priority over broker-dealer price improvement orders at the same price. An Auction Limit order at a specified price. Use of a limit order ensures that you will not receive an execution at a price less favorable than the limit price. Enter limit orders in penny increments with your auction improvement amount computed as the difference between your limit order price and the nearest listed increment. Products: OPT (BOX only) More on price improvement orders",
    "For option orders routed to the Boston Options Exchange (BOX) you may elect to participate in the BOX's price improvement auction in pennies. All BOX-directed price improvement orders are immediately sent from Interactive Brokers to the BOX order book, and when the terms allow, IB will evaluate it for inclusion in a price improvement auction based on price and volume priority. In the auction, your order will have priority over broker-dealer price improvement orders at the same price. An Auction Pegged to Stock order adjusts the order price by the product of a signed delta (which is entered as an absolute and assumed to be positive for calls, negative for puts) and the change of the option's underlying stock price. A buy or sell call order price is determined by adding the delta times a change in an underlying stock price change to a specified starting price for the call. To determine the change in price, a stock reference price (NBBO midpoint at the time of the order is assumed if no reference price is entered) is subtracted from the current NBBO midpoint. A stock range may also be entered that cancels an order when reached. The delta times the change in stock price will be rounded to the nearest penny in favor of the order and will be used as your auction improvement amount. Products: OPT (BOX only) More on price improvement orders",
    "Stock-Option contracts directly routed to BOX will support a Price Improvement Auction Orders compared to standard SMART routing. This order will necessitate a standard Relative / Pegged-To-Primary order with the contract being directly routed to 'BOX' rather than 'SMART' or another exchange. Products: OPT (BOX only) More on price improvement orders",
    "The Block attribute is used for large volume option orders on ISE that consist of at least 50 contracts. To execute large-volume orders over time without moving the market, use the Accumulate/Distribute algorithm. Products: OPT More on Block Orders More on Supported exchanges",
    "A Box Top order executes as a market order at the current best price. If the order is only partially filled, the remainder is submitted as a limit order with the limit price equal to the price at which the filled portion of the order executed. Products: OPT (BOX only) More on Box Top Orders",
    "Create combination orders that include options, stock and futures legs (stock legs can be included if the order is routed through SmartRouting). Although a combination/spread order is constructed of separate legs, it is executed as a single transaction if it is routed directly to an exchange. For combination orders that are SmartRouted, each leg may be executed separately to ensure best execution. Products: OPT, STK, FUT",
    "Create combination orders that include options, stock and futures legs (stock legs can be included if the order is routed through SmartRouting). Although a combination/spread order is constructed of separate legs, it is executed as a single transaction if it is routed directly to an exchange. For combination orders that are SmartRouted, each leg may be executed separately to ensure best execution. Products: OPT, STK, FUT",
    "Create combination orders that include options, stock and futures legs (stock legs can be included if the order is routed through SmartRouting). Although a combination/spread order is constructed of separate legs, it is executed as a single transaction if it is routed directly to an exchange. For combination orders that are SmartRouted, each leg may be executed separately to ensure best execution. Products: OPT, STK, FUT",
    "An Discretionary order is a limit order submitted with a hidden, specified 'discretionary' amount off the limit price which may be used to increase the price range over which the limit order is eligible to execute. The market sees only the limit price. Products: STK More on Discretionary Orders More on Supported exchanges",
    "Forex orders can be placed in denomination of second currency in pair using cashQty field. Products: CASH More on Forex Cash Quantity Orders",
    "",
    "A Limit order is an order to buy or sell at a specified price or better. The Limit order ensures that if the order fills, it will not fill at a price less favorable than your limit price, but it does not guarantee a fill. Products: BOND, CASH, CFD, CMDTY, FUT, FOP, OPT, STK, WAR More on Limit Orders More on Supported exchanges",
    "A Limit if Touched is an order to buy (or sell) a contract at a specified price or better, below (or above) the market. This order is held in the system until the trigger price is touched. An LIT order is similar to a stop limit order, except that an LIT sell order is placed above the current market price, and a stop limit sell order is placed below. Products: BOND, CASH, CFD, CMDTY, FUT, FOP, OPT, STK, WAR More on Limit If Touched Orders More on Supported exchanges",
    "A Limit-on-close (LOC) order will be submitted at the close and will execute if the closing price is at or better than the submitted limit price. Products: CFD, FUT, STK, WAR More on Limit On Close Orders More on Supported exchanges",
    "A Limit-on-Open (LOO) order combines a limit order with the OPG time in force to create an order that is submitted at the market's open, and that will only execute at the specified limit price or better. Orders are filled in accordance with specific exchange rules. Products: CFD, STK, OPT, WAR More on Limit on Open Orders More on Supported exchanges",
    "The Limit Order With Manual Order Time is a Limit Order with ManualOrderTime property. Placing a Limit Order With Manual Order Time The Manual Order Time field is required for, and becomes editable for, 'manual' orders, which are orders that originate from a client (whether by phone, email, chat, verbally from the floor, from another desk, etc.) and are then entered into the system. The Manual Order Time field is not used for client orders received electronically, nor for orders that originate from the account manager (with discretion) in the client's accounts, or when an order is allocated to ALL accounts or among multiple accounts using an account group or model portfolio. Canceling a Limit Order With Manual Order Time The Manual Order Cancel Time field is required for, and becomes editable for, 'manual' order cancelations, which are order cancelations that originate from a client (whether by phone, email, chat, verbally from the floor, from another desk, etc.) and are then entered into the system. The Manual Order Cancel Time field is not used for client orders cancelations received electronically, nor for orders that originate from the account manager (with discretion) in the client's accounts, or when an order is allocated to ALL accounts or among multiple accounts using an account group or model portfolio. More on Limit Orders",
    "",
    "A Market order is an order to buy or sell at the market bid or offer price. A market order may increase the likelihood of a fill and the speed of execution, but unlike the Limit order a Market order provides no price protection and may fill at a price far lower/higher than the current displayed bid/ask. Products: BOND, CFD, EFP, CASH, FUND, FUT, FOP, OPT, STK, WAR More on Market Orders More on Supported exchanges",
    "A Market If Touched (MIT) is an order to buy (or sell) a contract below (or above) the market. Its purpose is to take advantage of sudden or unexpected changes in share or other prices and provides investors with a trigger price to set an order in motion. Investors may be waiting for excessive strength (or weakness) to cease, which might be represented by a specific price point. MIT orders can be used to determine whether or not to enter the market once a specific price level has been achieved. This order is held in the system until the trigger price is touched, and is then submitted as a market order. An MIT order is similar to a stop order, except that an MIT sell order is placed above the current market price, and a stop sell order is placed below Products: BOND, CFD, CASH, FUT, FOP, OPT, STK, WAR More on Market If Touched Orders More on Supported exchanges",
    "A Market On Close (MOC) order is a market order that is submitted to execute as close to the closing price as possible. Products: CFD, FUT, STK, WAR More on Market On Close Orders More on Supported exchanges",
    "A Market On Open (MOO) combines a market order with the OPG time in force to create an order that is automatically submitted at the market's open and fills at the market price. Products: CFD, FUT, STK, WAR More on Market On Open Orders More on Supported exchanges",
    "A Market-to-Limit (MTL) order is submitted as a market order to execute at the current best market price. If the order is only partially filled, the remainder of the order is canceled and re-submitted as a limit order with the limit price equal to the price at which the filled portion of the order executed. Products: CFD, FUT, FOP, OPT, STK, WAR More on Market to Limit Orders More on Supported exchanges",
    "This order type is useful for futures traders using Globex. A Market with Protection order is a market order that will be cancelled and resubmitted as a limit order if the entire order does not immediately execute at the market price. The limit price is set by Globex to be close to the current market price, slightly higher for a sell order and lower for a buy order. Products: FUT, FOP More on Market with Protection Orders More on Supported exchanges",
    "Passive Relative orders provide a means for traders to seek a less aggressive price than the National Best Bid and Offer (NBBO) while keeping the order pegged to the best bid (for a buy) or ask (for a sell). The order price is automatically adjusted as the markets move to keep the order less aggressive. For a buy order, your order price is pegged to the NBB by a less aggressive offset, and if the NBB moves up, your bid will also move up. If the NBB moves down, there will be no adjustment because your bid will become aggressive and execute. For a sell order, your price is pegged to the NBO by a less aggressive offset, and if the NBO moves down, your offer will also move down. If the NBO moves up, there will be no adjustment because your offer will become aggressive and execute. In addition to the offset, you can define an absolute cap, which works like a limit price, and will prevent your order from being executed above or below a specified level. The Passive Relative order is similar to the Relative/Pegged-to-Primary order, except that the Passive relative subtracts the offset from the bid and the Relative adds the offset to the bid. Products: STK, WAR More on Passive Relative Orders More on Supported exchanges",
    "",
    "The Pegged to Benchmark order is similar to the Pegged to Stock order for options, except that the Pegged to Benchmark allows you to specify any asset type as the reference (benchmark) contract for a stock or option order. Both the primary and reference contracts must use the same currency. Products: STK, OPT More on Pegged to Benchmark Orders More on Supported exchanges",
    "A pegged-to-market order is designed to maintain a purchase price relative to the national best offer (NBO) or a sale price relative to the national best bid (NBB). Depending on the width of the quote, this order may be passive or aggressive. The trader creates the order by entering a limit price which defines the worst limit price that they are willing to accept. Next, the trader enters an offset amount which computes the active limit price as follows: Sell order price = Bid price + offset amount Buy order price = Ask price - offset amount Products: STK More on Pegged To Market Orders More on Supported exchanges",
    "Relative (a.k.a. Pegged-to-Primary) orders provide a means for traders to seek a more aggressive price than the National Best Bid and Offer (NBBO). By acting as liquidity providers, and placing more aggressive bids and offers than the current best bids and offers, traders increase their odds of filling their order. Quotes are automatically adjusted as the markets move, to remain aggressive. Stocks, Options and Futures - not available on paper trading. Products: CFD, STK, OPT, FUT More on Pegged To Primary Orders More on Supported exchanges",
    "A Pegged to Stock order continually adjusts the option order price by the product of a signed user-define delta and the change of the option's underlying stock price. The delta is entered as an absolute and assumed to be positive for calls and negative for puts. A buy or sell call order price is determined by adding the delta times a change in an underlying stock price to a specified starting price for the call. To determine the change in price, the stock reference price is subtracted from the current NBBO midpoint. The Stock Reference Price can be defined by the user, or defaults to the NBBO midpoint at the time of the order if no reference price is entered. You may also enter a high/low stock price range which cancels the order when reached. The delta times the change in stock price will be rounded to the nearest penny in favor of the order. Products: OPT More on Pegged To Stock Orders More on Supported exchanges",
    "Create combination orders that include options, stock and futures legs (stock legs can be included if the order is routed through SmartRouting). Although a combination/spread order is constructed of separate legs, it is executed as a single transaction if it is routed directly to an exchange. For combination orders that are SmartRouted, each leg may be executed separately to ensure best execution. Products: OPT, STK, FUT",
    "Create combination orders that include options, stock and futures legs (stock legs can be included if the order is routed through SmartRouting). Although a combination/spread order is constructed of separate legs, it is executed as a single transaction if it is routed directly to an exchange. For combination orders that are SmartRouted, each leg may be executed separately to ensure best execution. Products: OPT, STK, FUT",
    "A Stop order is an instruction to submit a buy or sell market order if and when the user-specified stop trigger price is attained or penetrated. A Stop order is not guaranteed a specific execution price and may execute significantly away from its stop price. A Sell Stop order is always placed below the current market price and is typically used to limit a loss or protect a profit on a long stock position. A Buy Stop order is always placed above the current market price. It is typically used to limit a loss or help protect a profit on a short sale. Products: CFD, BAG, CASH, FUT, FOP, OPT, STK, WAR More on Stop Orders More on Supported exchanges",
    "A Stop-Limit order is an instruction to submit a buy or sell limit order when the user-specified stop trigger price is attained or penetrated. The order has two basic components: the stop price and the limit price. When a trade has occurred at or through the stop price, the order becomes executable and enters the market as a limit order, which is an order to buy or sell at a specified price or better. Products: CFD, CASH, FUT, FOP, OPT, STK, WAR More on Stop Limit Orders More on Supported exchanges",
    "A Stop with Protection order combines the functionality of a stop limit order with a market with protection order. The order is set to trigger at a specified stop price. When the stop price is penetrated, the order is triggered as a market with protection order, which means that it will fill within a specified protected price range equal to the trigger price +/- the exchange-defined protection point range. Any portion of the order that does not fill within this protected range is submitted as a limit order at the exchange-defined trigger price +/- the protection points. Products: FUT More on Stop with Protection Orders More on Supported exchanges",
    "Sweep-to-fill orders are useful when a trader values speed of execution over price. A sweep-to-fill order identifies the best price and the exact quantity offered/available at that price, and transmits the corresponding portion of your order for immediate execution. Simultaneously it identifies the next best price and quantity offered/available, and submits the matching quantity of your order for immediate execution. Products: CFD, STK, WAR (SMART only) More on Sweep to Fill Orders",
    "For a discussion of the handling and behavior of Trailing Stop orders, please see our brokerage-wide documentation on this order type at: Trailing Stop Orders Supported exchanges for Trailing Stop orders: Supported Exchanges Order Type Identifier: 'TRAIL' Parameters: Trail Offset. Required. Specifies the distance that your order's stop price will maintain away from the market. A Trailing Stop order ticket must include exactly one of the following two forms of Trail Offset: Absolute Offset: An explicit numerical value (in the instrument's currency) which will be added to or subtracted from the market price of the instrument. Relative Offset: A percentage of the market price of the instrument, from which absolute price offsets will be computed (which in turn may vary in size as the market price moves). Note: The Trail Offset value, whether absolute or relative, must conform to the instrument's price increment rules. Stop Price. This value is not required. If supplied, this is the trigger price beyond which the Trailing Stop order will begin its trailing behavior. If no Stop Price value is supplied, the market price for the instrument at the time of submission will assigned to this value automatically.",
    "Trail Offset. Required. One of the following class attributes must be supplied with the order ticket. Absolute Offset: Order.auxPrice Relative Offset: Order.trailingPercent Note that the value assigned to trailingPercent will be interpreted as a true percent, e.g., trailingPercent = 0.50 becomes 0.50% = 0.0050. Stop Price: Order.trailStopPrice In the example to the right, we have outlined two Trailing Stop orders with explicit Stop Prices via order.trailStopPrice. In the first order, we supply a relative offset of 2% using order.TrailStopPercent. In the second order, we supply an absolute offset of 3 units of currency using order.auxPrice.",
    "Trail Offset. Required. One of the following approaches to Trail Offset specification must be used with the order ticket. Absolute Offset: 'trailingType': 'amt', 'trailingAmt': {{currency}} Relative Offset: 'trailingType': '%', 'trailingAmt': {{number 0 to 100}} Note that you must pass a literal % character as the value of the trailingType field in order to use a percentage trailingAmt value. Stop Price: 'price' In the example to the right, we have outlined two Trailing Stop orders with explicit Stop Prices via the price field. In the first order, we supply a relative offset of 2% using 'trailingType': '%' and 'trailingAmt': 2. In the second order, we supply an absolute offset of 3 units of currency using 'trailingType': 'amt' and 'trailingAmt': 3.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter { 'orderType': 'TRAIL', 'price': 100, 'trailingAmt': 2, 'trailingType': '%' } { 'orderType': 'TRAIL', 'price': 100, 'trailingAmt': 2, 'trailingType': '%' } { 'orderType': 'TRAIL', 'price': 100, 'trailingAmt': 2, 'trailingType': '%' } Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter { 'orderType': 'TRAIL', 'price': 100, 'trailingAmt': 3, 'trailingType': 'amt' } { 'orderType': 'TRAIL', 'price': 100, 'trailingAmt': 3, 'trailingType': 'amt' } { 'orderType': 'TRAIL', 'price': 100, 'trailingAmt': 3, 'trailingType': 'amt' }",
    "A trailing stop limit order is designed to allow an investor to specify a limit on the maximum possible loss, without setting a limit on the maximum possible gain. A SELL trailing stop limit moves with the market price, and continually recalculates the stop trigger price at a fixed amount below the market price, based on the user-defined 'trailing' amount. The limit order price is also continually recalculated based on the limit offset. As the market price rises, both the stop price and the limit price rise by the trail amount and limit offset respectively, but if the stock price falls, the stop price remains unchanged, and when the stop price is hit a limit order is submitted at the last calculated limit price. A 'Buy' trailing stop limit order is the mirror image of a sell trailing stop limit, and is generally used in falling markets. Trailing Stop Limit orders can be sent with the trailing amount specified as an absolute amount, as in the example below, or as a percentage, specified in the trailingPercent field. Important: the 'limit offset' field is set by default in the TWS/IBG settings. This setting either needs to be changed in the Order Presets, the default value accepted, or the limit price offset sent from the API as in the example below. Not both the 'limit price' and 'limit price offset' fields can be set in TRAIL LIMIT orders. Products: BOND, CFD, CASH, FUT, FOP, OPT, STK, WAR More on Trailing Stop Limit Orders",
    "Specific to US options, investors are able to create and enter Volatility-type orders for options and combinations rather than price orders. Option traders may wish to trade and position for movements in the price of the option determined by its implied volatility. Because implied volatility is a key determinant of the premium on an option, traders position in specific contract months in an effort to take advantage of perceived changes in implied volatility arising before, during or after earnings or when company specific or broad market volatility is predicted to change. In order to create a Volatility order, clients must first create a Volatility Trader page from the Trading Tools menu and as they enter option contracts, premiums will display in percentage terms rather than premium. The buy/sell process is the same as for regular orders priced in premium terms except that the client can limit the volatility level they are willing to pay or receive. Products: FOP, OPT More on Volatility Type Orders More on Supported exchanges",
    "",
    "You can attach one-time adjustments to stop, stop limit, trailing stop and trailing stop limit orders. When you attach an adjusted order, you set a trigger price that triggers a modification of the original (or parent) order, instead of triggering order transmission. You can adjust any of the parent stop order types to any other stop order type; for example if you set up a Stop Limit, you can attach the one-time adjustment to change the order to a Trailing Stop, or if you start with a Stop order the adjustment can change it to a Trailing Stop Limit order.",
    "TriggerPrice: Price threshold for when the order type should just to the AdjustedOrderType value. AdjustedOrderType: Resulting order type in the event an order passes the triggerPrice threshold. This can be 'STP', 'STP LMT', 'TRAIL', 'TRAILING LIMIT' AdjustedStopPrice: The stop order's trigger price after being adjusted.",
    "TriggerPrice: Price threshold for when the order type should just to the AdjustedOrderType value. AdjustedOrderType: Resulting order type in the event an order passes the triggerPrice threshold. This can be 'STP', 'STP LMT', 'TRAIL', 'TRAILING LIMIT' AdjustedStopPrice: The stop order's trigger price after being adjusted. AdjustedStopLimitPrice: The stop order's limit price for execution after being adjusted.",
    "TriggerPrice: Price threshold for when the order type should just to the AdjustedOrderType value. AdjustedOrderType: Resulting order type in the event an order passes the triggerPrice threshold. This can be 'STP', 'STP LMT', 'TRAIL', 'TRAILING LIMIT'. AdjustedStopPrice: The trail order's trigger price after being adjusted. AdjustableTrailingUnit: Dictate how trail should be adjusted. This can be 'amt' or '%'. AdjustedTrailingAmount: The value to trail by. This will be a set amount or percentage based on the AdjustedTrailingUnit.",
    "TriggerPrice: Price threshold for when the order type should just to the AdjustedOrderType value. AdjustedOrderType: Resulting order type in the event an order passes the triggerPrice threshold. This can be 'STP', 'STP LMT', 'TRAIL', 'TRAILING LIMIT'. AdjustedStopPrice: The trail order's trigger price after being adjusted. AdjustedStopLimitPrice: The trailing order's limit price for execution after being adjusted. AdjustableTrailingUnit: Dictate how trail should be adjusted. This can be 'amt' or '%'. AdjustedTrailingAmount: The value to trail by. This will be a set amount or percentage based on the AdjustedTrailingUnit.",
    "Hedging orders are similar to Bracket Orders. With hedging order, a child order is submitted only on execution of the parent. Orders can be hedged by an attached forex trade, Beta hedge, or Pair Trade, just as in TWS. For an example of a forex hedge, when buying a contract on a currency other than your base, you can attach an FX order to convert base currency to the currency of the contract to cover the cost of the trade thanks to the TWS API's Attaching Orders mechanism. More on Hedging Orders in TWS More on Attaching Orders Note that in some cases it will be necessary to include a small delay of 50 ms or less after placing the parent order for processing, before placing the child order. Otherwise the error '10006: Missing parent order' will be triggered.",
    "Bracket Orders are designed to help limit your loss and lock in a profit by 'bracketing' an order with two opposite-side orders. A BUY order is bracketed by a high-side sell limit order and a low-side sell stop order. A SELL order is bracketed by a high-side buy stop order and a low side buy limit order. Note how bracket orders make use of the TWS API's Attaching Orders mechanism. One key thing to keep in mind is to handle the order transmission accurately. Since a Bracket consists of three orders, there is always a risk that at least one of the orders gets filled before the entire bracket is sent. To avoid it, make use of the IBApi.Order.Transmit flag. When this flag is set to 'false', the TWS will receive the order but it will not send (transmit) it to the servers. In the example below, the first (parent) and second (takeProfit) orders will be send to the TWS but not transmitted to the servers. When the last child order (stopLoss) is sent however and given that its IBApi.Order.Transmit flag is set to true, the TWS will interpret this as a signal to transmit not only its parent order but also the rest of siblings, removing the risks of an accidental execution. More on Bracket Orders More on Attaching Orders More on the IBApi.Order.Transmit flag",
    "The One-Cancels All (OCA) order type allows an investor to place multiple and possibly unrelated orders assigned to a group. The aim is to complete just one of the orders, which in turn will cause TWS to cancel the remaining orders. The investor may submit several orders aimed at taking advantage of the most desirable price within the group. Completion of one piece of the group order causes cancellation of the remaining group orders while partial completion causes the group to re-balance. An investor might desire to sell 1000 shares of only ONE of three positions held above prevailing market prices. The OCA order group allows the investor to enter prices at specified target levels and if one is completed, the other two will automatically cancel. Alternatively, an investor may wish to take a LONG position in eMini S&P stock index futures in a falling market or else SELL US treasury futures at a more favorable price. Grouping the two orders using an OCA order type offers the investor two chances to enter a similar position, while only running the risk of taking on a single position. Multiple OCA types cannot be used in a single OCA Group. More on One-Cancels All orders",
    "Via the IBApi.Order.OcaType attribute, the way in which remaining orders should be handled after an execution can be configured as indicated in the table. Value Description 1 Cancel all remaining orders with block.* 2 Remaining orders are proportionately reduced in size with block.* 3 Remaining orders are proportionately reduced in size with no block. Note*: if you use a value 'with block' it gives the order overfill protection. This means that only one order in the group will be routed at a time to remove the possibility of an overfill. Click here for further discussion of OCA orders. Multiple OCA types cannot be used in a single OCA Group. More on OCA Orders More on the IBApi.Order.OcaType attribute",
    "Order Conditions are a set of parameters attached to an order that allow the order to either be placed or cancel upon achieving the condition criteria. There are 6 unique Order Conditions that can be applied to a given order: Price, Time, Margin, Execution, Volume, and PercentChange. Order Conditions can be applied to nearly any order and more than one condition can be attached to an individual order using to be Inclusive, 'AND', or Exclusive, 'OR'. More information on Order Conditions can be found here.  For the sake of simplicity, all Condition Orders below will be based on an example order, shown here. The additional content will be included in each order's content.",
    "The Execution Condition triggers an order whenever another order on your account has executed. The parameters allow the developer to specify how narrow a scope will trigger a condition. See ExecutionCondition for more details on the ExecutionCondition class.",
    "Margin Conditions permit users to ready an order in case their order starts falling to a given threshold that may lead to liquidation or to submit an order after ample margin cushion has been established. See MarginCondition for more details on the MarginCondition class.",
    "A Price Condition will trigger if an order should transmit or cancel when a given contract's price goes above or beyond a given threshold. See PriceCondition for more details on the PriceCondition class.",
    "The Percent Change Condition will trigger if there is a price percent change measured against last close price. See PercentChangeCondition for more details on the PercentChangeCondition class.",
    "The Time Condition will trigger an order for submission or cancellation after a time has been reached. See TimeCondition for more details on the TimeCondition class.",
    "Volume Condition will trigger in the event the contract's volume remains above or below a given threshold. Note: VolumeCondition orders must be SMART routed. See VolumeCondition for more details on the VolumeCondition class.",
    "Customers can direct non-marketable U.S. stock orders to the IBKRATS destination to add liquidity. Orders directed to IBKRATS are tagged as 'not held' orders, and are posted in IBKR's order book where incoming SmartRouted orders from other IBKR customers are eligible to take liquidity by trading against them. To route an order to IBKRATS via the API, you need to set the IBApi::Contract::Exchange field to 'IBKRATS' and IBApi::Order::NotHeld to True. More on IBKRATS Orders Note: The order must have the NotHeld field set to True, or you may receive a rejection with the reason; 'IBKRAts order must be a not-held'. When submitting via the TWS UI, this is set automatically.",
    "",
    "",
    "",
    "Order types and algos may help limit risk, speed execution, provide price improvement, allow privacy, time the market and simplify the trading process through advanced trading functions. Important: IB ALGO orders are only supported during regular trading hours. Orders submitted with the outsideRth field set to 'true' will be rejected. This page is intended to provide assistance with creating algo orders in the API. For more information on what IB Algorithms can do, please visit our IBKR Order Types and Algos page.  In nearly all cases, Algo orders are additional parameters that can be used in addition to a standing order. Because of this structure, we will be using our Limit Order sample as a baseline. The algos documented here will be attached to the same 'order' variable as used here.",
    "",
    "The Accumulate/Distribute algo can help you to achieve the best price for a large volume order without being noticed in the market, and can be set up for high frequency trading. By slicing your order into smaller randomly-sized order increments that are released at random time intervals within a user-defined time period, the algo allows the trading of large blocks of stock and other instruments without being detected in the market. The algo allows limit, market, and relative order types. It is important to keep in mind the API A/D algo will not have all available parameters of the A/D algos that can be created in TWS.  Algo Strategy Value: AD componentSize: int. Quantity of increment. Valid Value/Format: Cannot exceed initial size timeBetweenOrders: int. Time interval in seconds between each order. Valid Value/Format: 30 randomizeTime20: bool. Randomize time period by +/- 20%. Valid Value/Format: 1 (true) or 0 (false) randomizeSize55: bool. Randomize size by +/- 55%. Valid Value/Format: 1 (true) or 0 (false) giveUp: int. Stop attempting to catch up to the size value if the conditions are not achieved. catchUp: bool. Catch up in time. Valid Value/Format: 1 (true) or 0 (false) waitForFill: bool. Wait for current order to fill before submitting next order. Valid Value/Format: 1 (true) or 0 (false) activeTimeStart: String. Algorithm starting time. Valid Value/Format: YYYYMMDD-hh:mm:ss TMZ activeTimeEnd: String. Algorithm ending time. Valid Value/Format: YYYYMMDD-hh:mm:ss TMZ",
    "The 'AccuDistr' variant of the Accumulate/Distribute Algo is conceptually the same as the pre-existing 'AD'. However, 'AccuDistr' introduces the ability to close existing Trader Workstation sessions while still allowing the algo to continue working. In addition to the underlying behavior change, 'AccuDistr' appears visually different while viewed from Trader Workstation, offering a new menu under the 'IB ALGO' tab. It is important to note that 'AccuDistr' has removed the ability to use the 'giveUp' field. As such, users who require 'giveUp' for their strategy MUST continue utilizing the 'AD' variant for the Accumulate/Distribute algo.  Algo Strategy Value: AccuDistr componentSize: int. Quantity of increment. Valid Value/Format: Cannot exceed initial size timeBetweenOrders: int. Time interval in seconds between each order. Valid Value/Format: 30 randomizeTime20: bool. Randomize time period by +/- 20%. Valid Value/Format: 1 (true) or 0 (false) randomizeSize55: bool. Randomize size by +/- 55%. Valid Value/Format: 1 (true) or 0 (false) catchUp: bool. Catch up in time. Valid Value/Format: 1 (true) or 0 (false) waitForFill: bool. Wait for current order to fill before submitting next order. Valid Value/Format: 1 (true) or 0 (false) activeTimeStart: String. Algorithm starting time. Valid Value/Format: YYYYMMDD-hh:mm:ss TMZ activeTimeEnd: String. Algorithm ending time. Valid Value/Format: YYYYMMDD-hh:mm:ss TMZ",
    "The Adaptive Algo combines IB's Smart routing capabilities with user-defined priority settings in an effort to achieve further cost efficiency at the point of execution. Using the Adaptive algo leads to better execution prices on average than for regular limit or market orders.  Algo Strategy Value: Adaptive adaptivePriority: String. The 'Priority' selector determines the time taken to scan for better execution prices. The 'Urgent' setting scans only briefly, while the 'Patient' scan works more slowly and has a higher chance of achieving a better overall fill for your order. Valid Value/Format: Urgent > Normal > Patient",
    "The Arrival Price algorithmic order type will attempt to achieve, over the course of the order, the bid/ask midpoint at the time the order is submitted. The Arrival Price algo is designed to keep hidden orders that will impact a high percentage of the average daily volume (ADV). The pace of execution is determined by the user-assigned level of risk aversion and the user-defined target percent of average daily volume. How quickly the order is submitted during the day is determined by the level of urgency: the higher the urgency the faster it will execute but will expose it to a greater market impact. Market impact can be lessened by assigning lesser urgency, which is likely to lengthen the duration of the order. The user can set the max percent of ADV from 1 to 50%. The order entry screen allows the user to determine when the order will start and end regardless of whether or not the full amount of the order has been filled. By checking the box marked Allow trading past end time the algo will continue to work past the specified end time in an effort to fill the remaining portion of the order.  Algo Strategy Value: ArrivalPx maxPctVol: double. Maximum percentage of ADV Valid Value/Format: 0.1 (10%) - 0.5 (50%) riskAversion: String. Urgency/risk aversion Valid Value/Format: Get Done, Aggressive, Neutral, Passive startTime: String. Algorithm starting time Valid Value/Format: hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ endTime: String. Algorithm ending time Valid Value/Format: hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ allowPastEndTime: bool. Allow trading past end time Valid Value/Format: 1 (true) or 0 (false) forceCompletion: bool. Attempt completion by the end of the day Valid Value/Format: 1 (true) or 0 (false)",
    "The Balance Impact Risk balances the market impact of trading the option with the risk of price change over the time horizon of the order. This strategy considers the user-assigned level of risk aversion to define the pace of the execution, along with the user-defined target percent of volume.  Algo Strategy Value: BalanceImpactRisk maxPctVol: double. Maximum percentage of ADV Valid Value/Format: 0.1 (10%) - 0.5 (50%) riskAversion: String. Urgency/risk aversion Valid Value/Format: Get Done, Aggressive, Neutral, Passive forceCompletion: bool. Attempt completion by the end of the day Valid Value/Format: 1 (true) or 0 (false)",
    "Investors submitting market or limit orders into the closing auction may adversely affect the closing price, especially when the size of the order is large relative to the average close auction volume. In order to help investors attempting to execute towards the end of the trading session we have developed the Close Price algo Strategy. This algo breaks down large order amounts and determines the timing of order entry so that it will continuously execute in order to minimize slippage. The start and pace of execution are determined by the user who assigns a level of market risk and specifies the target percentage of volume, while the algo considers the prior volatility of the stock.  Algo Strategy Value: ClosePx maxPctVol: double. Maximum percentage of ADV Valid Value/Format: 0.1 (10%) - 0.5 (50%) riskAversion: String. Urgency/risk aversion Valid Value/Format: Get Done, Aggressive, Neutral, Passive startTime: String. Algorithm starting time Valid Value/Format: hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ forceCompletion: bool. Attempt completion by the end of the day Valid Value/Format: 1 (true) or 0 (false)",
    "The Dark Ice order type develops the concept of privacy adopted by orders such as Iceberg or Reserve, using a proprietary algorithm to further hide the volume displayed to the market by the order. Clients can determine the timeframe an order remains live and have the option to allow trading past end time in the event it is unfilled by the stated end time. In order to minimize market impact in the event of large orders, users can specify a display size to be shown to the market different from the actual order size. Additionally, the Dark Ice algo randomizes the display size +/- 50% based upon the probability of the price moving favorably. Further, using calculated probabilities, the algo decides whether to place the order at the limit price or one tick lower than the current offer for buy orders and one tick higher than the current bid for sell orders.  Algo Strategy Value: DarkIce displaySize: double. Order size to be displayed Valid Value/Format: 100 startTime: String. Algorithm starting time Valid Value/Format: hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ endTime: String. Algorithm ending time Valid Value/Format: hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ allowPastEndTime: bool. Allow trading past end time Valid Value/Format: 1 (true) or 0 (false)",
    "A Midprice order is designed to split the difference between the bid and ask prices, and fill at the current midpoint of the NBBO or better. Set an optional price cap to define the highest price (for a buy order) or the lowest price (for a sell order) you are willing to accept. Smart-routing to US stocks only. Products: US STK Exchanges: Smart-routing only  Set OrderType to 'MIDPRICE'. No algo params or strategy required.",
    "The Minimise Impact algo minimises market impact by slicing the order over time to achieve a market average without going over the given maximum percentage value.  Algo Strategy Value: MinImpact maxPctVol: double. Maximum percentage of ADV Valid Value/Format: 0.1 (10%) - 0.5 (50%)",
    "The Percent of Volume algo can limit the contribution of orders to overall average daily volume in order to minimize impact. Clients can set a value between 1-50% to control their participation between stated start and end times. Order quantity and volume distribution over the day is determined using the target percent of volume you entered along with continuously updated volume forecasts calculated from TWS market data. In addition, the algo can be set to avoid taking liquidity, which may help avoid liquidity-taker fees and could result in liquidity-adding rebates. By checking the Attempt to never take liquidity box, the algo is discouraged from hitting the bid or lifting the offer if possible. However, this may also result in greater deviations from the benchmark, and in partial fills, since the posted bid/offer may not always get hit as the price moves up/down. IB will use best efforts not to take liquidity when this box is checked, however, there will be times that it cannot be avoided.  Algo Strategy Value: PctVol pctVol: double. Total percentage Valid Value/Format: 0.1 (10%) - 0.5 (50%) startTime: String. Algorithm starting time Valid Value/Format: hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ endTime: String. Algorithm ending time Valid Value/Format: hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ noTakeLiq: bool. Attempt to never take liquidity Valid Value/Format: 1 (true) or 0 (false)",
    "Price Variant Percentage of Volume Strategy - This algo allows you to participate in volume at a user-defined rate that varies over time depending on the market price of the security. This algo allows you to buy more aggressively when the price is low and be more passive as the price increases, and just the opposite for sell orders. The order quantity and volume distribution over the time during which the order is active is determined using the target percent of volume you entered along with continuously updated volume forecasts calculated from TWS market data.  Algo Strategy Value: PctVolPx pctVol: double. Total percentage Valid Value/Format: 0.1 (10%) - 0.5 (50%) deltaPctVol: double. Target Percentage Change Rate Valid Value/Format: 0.1 (10%) - 0.5 (50%) minPctVol4Px: double. Minimum Target Percentage Valid Value/Format: 0.1 (10%) - 0.5 (50%) maxPctVol4Px: double. Maximum Target Percentage Valid Value/Format: 0.1 (10%) - 0.5 (50%) startTime: String. Algorithm starting time Valid Value/Format: hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ endTime: String. Algorithm ending time Valid Value/Format: hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ noTakeLiq: bool. Attempt to never take liquidity Valid Value/Format: 1 (true) or 0 (false)",
    "Size Variant Percentage of Volume Strategy - This algo allows you to participate in volume at a user-defined rate that varies over time depending on the remaining size of the order. Define the target percent rate at the start time (Initial Participation Rate) and at the end time (Terminal Participation Rate), and the algo calculates the participation rate over time between the two based on the remaining order size. This allows the order to be more aggressive initially and less aggressive toward the end, or vice versa.  Algo Strategy Value: PctVolSz startPctVol: double. Initial Target Percentage Valid Value/Format: 0.1 (10%) - 0.5 (50%) endPctVol: double. Terminal Target Percentage Valid Value/Format: 0.1 (10%) - 0.5 (50%) startTime: String. Algorithm starting time Valid Value/Format: hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ endTime: String. Algorithm ending time Valid Value/Format: hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ noTakeLiq: bool. Attempt to never take liquidity Valid Value/Format: 1 (true) or 0 (false)",
    "Time Variant Percentage of Volume Strategy - This algo allows you to participate in volume at a user-defined rate that varies with time. Define the target percent rate at the start time and at the end time, and the algo calculates the participation rate over time between the two. This allows the order to be more aggressive initially and less aggressive toward the end, or vice versa.  Algo Strategy Value: PctVolTm startPctVol: double. Initial Target Percentage Valid Value/Format: 0.1 (10%) - 0.5 (50%) endPctVol: double. Terminal Target Percentage Valid Value/Format: 0.1 (10%) - 0.5 (50%) startTime: String. Algorithm starting time Valid Value/Format: hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ endTime: String. Algorithm ending time Valid Value/Format: hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ noTakeLiq: bool. Attempt to never take liquidity Valid Value/Format: 1 (true) or 0 (false)",
    "The TWAP algo aims to achieve the time-weighted average price calculated from the time you submit the order to the time it completes. Incomplete orders at the end of the stated completion time will continue to fill if the box 'allow trading past end time' is checked. Users can set the order to trade only when specified conditions are met. Those user-defined inputs include when the order is marketable, when the midpoint matches the required price, when the same side (buy or sell) matches to make the order marketable or when the last traded price would make the order marketable. For the TWAP algo, the average price calculation is calculated from the order entry time through the close of the market and will only attempt to execute when the criterion is met. The order may not fill throughout its stated duration and so the order is not guaranteed. TWAP is available for all US equities.  Algo Strategy Value: Twap catchUp: bool. Catch up in time. Valid Value/Format: 1 (true) or 0 (false) startTime: String. Algorithm starting time Valid Value/Format: hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ endTime: String. Algorithm ending time Valid Value/Format: hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ allowPastEndTime: bool. Allow trading past end time Valid Value/Format: 1 (true) or 0 (false) conditionalPrice: double. Enter the trade when a price is more aggressive than the listed value. Valid Value/Format: 120.0",
    "IB's best-efforts VWAP algo seeks to achieve the Volume-Weighted Average price (VWAP), calculated from the time you submit the order to the close of the market. Best-efforts VWAP algo is a lower-cost alternative to the Guaranteed VWAP (no longer supported) that enables the user to attempt never to take liquidity while also trading past the end time. Because the order may not be filled on the bid or at the ask prices, there is a trade-off with this algo. The order may not fully fill if the user is attempting to avoid liquidity-taking fees and/or maximize liquidity-adding rebates, and may miss the benchmark by asking to stay on the bid or ask. The user can determine the maximum percentage of average daily volume (up to 50%) his order will comprise. The system will generate the VWAP from the time the order is entered through the close of trading, and the order can be limited to trading over a pre-determined period. The user can request the order to continue beyond its stated end time if unfilled at the end of the stated period. The best-efforts VWAP algo is available for all US equities.  Algo Strategy Value: Vwap maxPctVol: double. Maximum percentage of ADV Valid Value/Format: 0.1 (10%) - 0.5 (50%) startTime: String. Algorithm starting time Valid Value/Format: hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ endTime: String. Algorithm ending time Valid Value/Format: hh:mm:ss TMZ or YYYYMMDD-hh:mm:ss TMZ allowPastEndTime: bool. Allow trading past end time Valid Value/Format: 1 (true) or 0 (false) noTakeLiq: bool. Attempt to never take liquidity Valid Value/Format: 1 (true) or 0 (false) speedUp: bool. Compensate for the decreased fill rate due to presence of limit price. Valid Value/Format: 1 (true) or 0 (false)",
    "It is recommended to first try to create the QBAlgo in TWS to see the most current available field values. QBAlgos are only available in live accounts. Some fields have default values and are optional in TWS but must be explicitly specified in the API.",
    "Algo Strategy Value: Bolt StartTime: String. Start Time. Valid Value/Format: hh:mm:ss tmz EndTime: String.Must be on the same date as Start Time. Takes precedence over Duration. Valid Value/Format: hh:mm:ss tmz Duration: double. Alternative order end time specifier. This value is a number of minutes that the order should be worked. Valid Value/Format: 10. A value of -99 will specify that the end time should be the exchange close time. Mode: String. Mode Valid Value/Format: Passive, Normal, Aggressive PercentVolume: double. Volume % Valid Value/Format: 0 <= PercentVolume <= 1 EventPause: String. Event Pause Valid Value/Format: Attempt_To_Complete, Pause_Trading, Trade_Through NoCleanup: bool. No Cleanup Valid Value/Format: '0' (false) or '1' (true) LiquidityAggressThreshold: double. Liquidity Aggressiveness Threshold Valid Value/Format: 0 <= LiquidityAggressThreshold <= 1",
    "Algo Strategy Value: Closer No parameters should be attached. Only the strategy needs to be specified as Closer.",
    "Algo Strategy Value: Octane StartTime: String. Start Time. Valid Value/Format: hh:mm:ss tmz EndTime: String.Must be on the same date as Start Time. Takes precedence over Duration. Valid Value/Format: hh:mm:ss tmz Duration: double. Alternative order end time specifier. This value is a number of minutes that the order should be worked. Valid Value/Format: 10. A value of -99 will specify that the end time should be the exchange close time. Urgency: String. Fill urgency Valid Value/Format: High, Ultra_High",
    "Algo Strategy Value: Strobe StartTime: String. Start Time. Valid Value/Format: hh:mm:ss tmz EndTime: String.Must be on the same date as Start Time. Takes precedence over Duration. Valid Value/Format: hh:mm:ss tmz Duration: double. Alternative order end time specifier. This value is a number of minutes that the order should be worked. Valid Value/Format: 10. A value of -99 will specify that the end time should be the exchange close time. Benchmark: String. Benchmark Valid Value/Format: TWAP, VWAP PercentVolume: double. Volume % Valid Value/Format: 0 <= PercentVolume <= 1 NoCleanup: bool. No Cleanup Valid Value/Format: '0' (false) or '1' (true)",
    "While exploring this page, please keep the following in mind: This list may not be fully completed, and new third parties are being built every day. This list is built for the sole purpose of technical assistance. The companies on this list are not listed as an endorsement or condemnation of their product. Only a source of information. Many popular third parties connect through our Reporting Integration team. Additional resources can be found in the official IBKR Investors' Marketplace. This list only shows the Third-Party Software Service Providers for Trading. Third-Party Brokers and Third-Party Service Providers for Account Reporting are not in this list. If there is any Third-Party Account Reporting issue, please contact the Third-Party Service Provider.  Company Name Connection Type Connection Guide AbleTrend TWS API How to connect to AbleTrend AgenaTrader TWS API How to connect to AgenaTrader AgendaTrader for Financial Advisors AmiBroker TWS API How to connect to AmiBroker ATAS TWS API How to connect to ATAS Atreyu TWS API How to connect to Atreyu BackTrader TWS API How to connect to BackTrader Bloomberg EMSX TWS API How to connect to Bloomberg EMSX Bookmap TWS API How to connect to Bookmap Capitalise.ai FIX Aggregate Session How to connect to Capitalise.ai Collective2 FIX Aggregate Session How to connect to Collective2 DAS Trader Fix Aggregate Session How to connect to DAS Trader Ensign TWS API How to connect to Ensign eSignal TWS API How to connect eSignal to Trader Workstation. <a href=''>How to connect Trader Workstation to eSignal. Hoadley TWS API How to connect to Hoadley IQFeed TWS API How to connect to IQFeed Jigsaw Trading TWS API How to connect to Jigsaw Trading LINNSOFT TWS API How to connect to LINNSOFT MedVed Trader TWS API How to connect to MedVed Trader MetaTrader 5 TWS API How to connect to MetaTrader MotiveWave TWS API How to connect to MotiveWave Multicharts TWS API How to connect to Multicharts NeuroShell TWS API How to connect to NeuroShell NinjaTrader 8 TWS API How to connect to NinjaTrader 8 OptionNetExplorer TWS API How to connect to OptionNetExplorer OptionVue TWS API How to connect to OptionVue Orion TWS API How to connect to Orion Pair Trade Finder TWS API How to connect to Pair Trade Finder Pair Trading Lab TWS API How to connect to Pair Trading Lab ProRealTime TWS API How to connect to ProRealTime QMatix XLQ TWS API How to connect to QMatix XLQ QuantConnect TWS API How to connect to QuantConnect QuantRocket TWS API How to connect to QuantRocket QuantTower TWS API How to connect to QuantTower RoboRay TWS API How to connect to RoboRay SeekingAlpha ? How to connect to SeekingAlpha SierraCharts TWS API How to connect to SierraCharts SignalStack TWS API How to connect to SignalStack Sterling Trader Pro FIX Aggregate Session How to connect to Sterling Trader Pro StockSharp TWS API How to connect to StockSharp StocksRover File Transfer How to connect to StocksRover StocksToTrade CPAPI How to connect to StocksToTrade Trade-Ideas TWS API How to connect to Trade-Ideas Trade Navigator TWS API Please contact support@tradenavigator.com TradersPost Web API How to connect to TradersPost TradeZella TWS API How to connect to TradeZella Trading Blox TWS API How to connect to Trading Blox TradingBlox Video Setup TradingView CPAPI w/ OAuth How to connect to TradingView Updata TWS API How to connect to Updata Volfix TWS API How to connect to Volfix Zorro TWS API How to connect to Zorro",
    "Interactive Brokers strives to regularly update our platforms for extended feature-sets and mitigate bugs. As a result, regular updates of Trader Workstation, IB Gateway, and the API will release as the newest 'Stable' or 'Latest' version. Third Party Platforms may initially integrate with Interactive Brokers using an API version that may lose support over time to accommodate new features or behavior that will need to be updated along with the updated TWS and API release schedules. Interactive Brokers will not be able to provide the unsupported releases of TWS after support has been sunset. The responsibility to maintain regular updates then falls to the user and third party software developer to maintain regular updates on their local platform and software respectively.",
    "For most 3rd Party Platforms that require TWS/ IB Gateway to be on, users should read the following Best Practice. Some TWS Settings affect API.",
    "In TWS Global Configuration - API - Settings, there are many API settings. Please enable/disable some API settings based on your use case. In this section, only the most important API settings for API connection and incident troubleshooting are covered. Please: Enable 'ActiveX and Socket Clients' Disable 'Read-Only API' Enable 'Create API message log file' Enable 'Include market data in API log file' Change 'Logging Level' to 'Detail' As most 3rd Party Platforms that require TWS/ IB Gateway to be on are used to establish local connection, please enable 'Allow connection from localhost only'.",
    "The information listed below are not required or necessary in order to operate the TWS API. However, these steps include many references which can help improve the day to day usage of the TWS API that is not explicitly offered as a callable method within the API itself.",
    "In TWS/ IB Gateway - 'Global Configuration' - 'General', you can adjust the Memory Allocation (in MB)*. This feature is to control how much memory your computer can assign to the TWS/ IB Gateway application. Usually, higher value allows users to have faster data returning speed. Normally, it is recommended for API users to set 4000. However, it depends on your computer memory size because setting too high may cause High Memory Usage and application not responding. For details, please visit: https://www.ibkrguides.com/traderworkstation/increase-tws-memory-size.htm Note: In IB Gateway Global Configuration - API - settings, there is no 'Compatibility Mode: Send ISLAND for US stocks trading on NASDAQ'. Specifying NASDAQ exchange in contract details may cause error if connecting to IB Gateway. For this error, please specify ISLAND exchange.",
    "It is compulsory for TWS users to auto logoff/auto restart TWS daily and manually login TWS weekly. In TWS/ IB Gateway - 'Global Configuration' - 'Lock and Exit', you can choose the time that your TWS will be shut down. For API users, it is recommended to choose 'Never lock Trader Workstation' and 'Auto restart'. Note: IBHK users do not have 'Never lock Trader Workstation' and 'Auto restart' in TWS. Windows Sleeping Mode also causes API disconnection. It is strongly suggested to choose 'Never Sleep' in Windows.",
    "In TWS - 'Global Configuration' - 'API' - 'Precautions', you can enable the following items to stop receiving the order submission messages. Enable 'Bypass Order Precautions for API orders'. Enable 'Bypass Bond warning for API orders'. Enable 'Bypass negative yield to worst confirmation for API orders'. Enable 'Bypass Called Bond warning for API orders'. Enable 'Bypass 'same action pair trade' warning for API orders'. Enable 'Bypass price-based volatility risk warning for API orders'. Enable 'Bypass US Stocks market data in shares warning for API orders'. Enable 'Bypass Redirect Order warning for Stock API orders'. Enable 'Bypass No Overfill Protection precaution for destinations where implied natively'.",
    "Each IB account has a pre-decided IB server. You can visit this link to know our IB servers' locations: https://www.interactivebrokers.com/download/IB-Host-and-Ports.pdf Yet, all IB paper accounts are connected to US server by default and its location cannot be changed. As IB servers in different regions have different scheduled server maintenance time (https://www.interactivebrokers.com/en/software/systemStatus.php), you may need to change the IB server location in order to avoid service downtime. For checking your connected IB server location, you can go to TWS and click 'Data' to see your Primary server. In the below image, the pre-decided IB server location is: cdc1.ibllc.com If you want to change your live IB account server location in TWS, please submit a web ticket to 'Technical Assistance' - 'Connectivity' in order to request changing the IB server location. In the web ticket, you need to provide: Which account do you want to have IB server location change? Which IB server location would you like to connect to? TWS AMERICA - EAST (New York) TWS AMERICA - CENTRAL (Chicago) TWS Europe (Zurich) TWS Asia (Hong Kong) TWS Asia - CHINA (For mainland China users, if the account server is hosted in Hong Kong, they will automatically connect with the Shenzhen Gateway mcgw1.ibllc.com.cn) Which IB scheduled maintenance time do you choose? (Recommended to choose the default schedule maintenance time of its own IB server location) North America Europe Asia After you submit the ticket, you will receive a web ticket reply which require you to confirm and understand the migration request. Note: For Internet users, as the connection between IB server and Exchange goes through a dedicated line, it is commonly recommended to choose a IB server location which is closer to your TWS location. For IB connection types, please visit: https://www.interactivebrokers.co.uk/en/software/connectionInterface.php The pre-decided IB server location connected from TWS is different from the IB Server location connected from IB Client Portal and IBKR Mobile. IB server location connected from TWS is pre-decided. You can submit a web ticket to request the IB server relocation for the TWS connection. IB server location connected from Client Portal, IBKR Mobile is based on your nearest IB server location. You cannot request the IB server relocation for Client Portal and IBKR Mobile connections. However, OAuth CP API users can specify which server they want to connect to by themselves. For details, please visit: https://www.interactivebrokers.com/campus/ibkr-api-page/cpapi-v1/#oauth-base-url",
    "In TWS Global Configuration - Orders - Smart Routing, you can set your SMART order routing algorithm. For available SMART Routing via TWS API, please visit: https://www.interactivebrokers.com/campus/ibkr-api-page/contracts/#smart-routing",
    "Some 3rd Party Platforms may support Financial Advisors to allocate shares to different sub-accounts after the order is executed. In TWS Global Configuration - Advisor Setup - Presets, you can need to choose Allocation Preference in order to avoid wrong allocation result. ",
    "The TWS Setting listed in the Global Configuration under API -> Setting for Maintain and resubmit orders when connection is restored, is enabled by default in TWS 10.28 and above. When this setting is checked, all orders received while connectivity is lost will be saved and automatically resubmitted when connectivity is restored. Please note, if the Trader Workstation is closed during this time, the orders are deleted regardless of the setting.",
    "The TWS Setting listed in the Global Configuration under API -> Setting for Maintain connection upon receiving incorrectly formatted fields, is enabled by default in TWS 10.28 and above. For clients operating on Client Version 100 and above, users will not disconnect from fields with invalid value submissions when the setting is enabled.",
    "In order to use third-party platforms, you will need to have a funded IBKR PRO account. If you are getting the message that API support is not available, you either have an IBKR Lite account or need to wait until after the daily server reset for your pricing plan to be updated to Pro in Interactive Brokers' backend servers.  It is important to keep in mind that not all third party API platforms are compatible with all IBKR account structures. Always check first with the software vendor before opening a specific account type or converting an IB account type. For instance, many third party API platforms such as NinjaTrader and TradeNavigator are not compatible with IB linked account structures, so it is highly recommended to first check with the third party vendor before linking your IB accounts.  All platforms that connect to Trader Workstation must have the initial connection available within TWS first. This process is documented in Configure TWS / IBG for API Connectivity. However, Interactive Brokers support cannot provide connection instruction for all third party platforms. The third party must provide their own instructions for connecting to Interactive Brokers.  Interactive Brokers cannot provide any kind of support or advice for software not developed by IBKR itself. Depending on the nature of your inquiry, our support staff may be able to review logs in order to confirm if data is being properly sent to the third party platform. However, Interactive Brokers is not able to modify the behavior of a third party platform, and must be corrected by the third party developer.  There will be occasions when a given operation will not be fulfilled as expected not because of a malfunction in either platform but because of the business logic involved. The typical behaviour of the TWS is to either perform the requested operation or to return an explanatory message which will point you in the right direction. It is the duty of the third party program to clearly show these TWS' messages within its own user interface. Without a relevant error message our support team will not be able to give any advice. In case of a malfunction on Interactive Broker's side, clear and concise technical information needs to be provided including evidence of the malfunction in the form of TWS or API message log files as detailed in our Troubleshooting & Support Log Guide  There are precautionary settings in TWS that are designed to be a order safety check. TWS would usually generate a pop-up warning dialogue, or sent back an error message via the API, when there is any violation to the pre-define precautionary settings in Understanding Order Precautions For users who uses a third party software to place orders but also receives data feed from a different vendor other than IB, TWS would also generate a default warning 'You are trying to submit an order without having market data for this instrument' on receiving orders from third party. The checked order will not be transmitted automatically unless user click 'Transmit' button of the order in TWS. Some TWS precautions can be bypassed by navigating to File/Edit -> Global Configuration -> API -> Precautions, and check the box 'Bypass Order Precautions for API Orders'. Once this is done, API orders placed from a third party software will not be checked by TWS precautions.  In order to retrieve market data off-platform through an API, exchanges require users to subscribe to market data. Specific requirements for these subscriptions can be found on the API Market Data Subscription page.  Market data is attached to each username. As such, users must be subscribed on each username, or be sharing market data to the paper account from their live username. You can read more about linking market data in our Market Data Provisioning section.  It is likely that the third party is requesting more historical market data than is allowed by our Historical Data Limitations.  This message is returned when the requested End of Day (EOD) market data is not available in our systems. You can verify this by loading the same chart using the Trader Workstation. Please contact our General Support team's Market Data department for further information.  Sometimes the data prior to the specified requested date is also not available for several reasons. Suppose a product started quoting (generating data) on 1st January 2016 but your third party program requests data prior to this date. To prevent this error message adjust your third party program's charting parameters accordingly.  Except for Index CFDs, CFDs do not have any market data of their own. What the TWS displays is the CFD's underlying contract's data. Whenever you try to fetch non-Index CFD data from the TWS, you will obtain an error message asking you to pull it's underlying contract's data instead. Some third party programs' user interface only allow placing orders via their charts. Given that no data can be loaded for these products and the impossibility of the third party program to apply a similar conversion as the TWS, you might find your third party software not able to place orders as a consequence!  Connections via the TWS API are not aware of the user name with which you are logged in with in your TWS. From this point of view the API makes no difference between live or paper trading. Since third party programs only connect any running TWS on the specified host and port it only takes you to launch the TWS and log into it with your paper trading credentials, make sure you Enable API connections and connect to it from your third party application using the same procedure.  From our side, yes. You can launch as many instances of the TWS as you need using different user name/password combinations. It is crucial though to make sure each TWS is listening on a different port as described in the Enable API connections section. Note that your might as well need to launch multiple instances of your third party program and/or have a way of telling when is your program using the paper or the live accounts.  Given that the historical data sent down the TWS API comes from the same source as the one displayed by the TWS itself it is almost impossible for it to differ. Some charting platforms circumvent our Historical Data Limitations by combining real time and historical data. Since our real time market data is not tick-by-tick, bars built from it will hardly match those retrieved from our historical market data service. Alternatively, you might as well be comparing different charts without noticing. A chart displaying data from NYSE will never be the same as another built from the ARCA exchange or from our SMART routing strategy. inadvertently you might as well be looking at TRADES on one side while having MIDPOINT or BID_ASK on another. Another common mistake involves having different timezones between the TWS and your client application.  Streaming real time data or receiving historical bars from the API requires streaming level 1 market data subscriptions. Subscriptions for instruments other than forex, bonds, and index CFDs incur a monthly fee.  Yes it is possible to connect an API application to a trial account. However it is not possible to receive real time market data or historical candlesticks for most instruments from the TWS API with a trial account login.  The TWS API is an interface to TWS or IB Gateway. It provides many functionalities, such as the ability to receive market data, place orders, and receive account information. The TWS API requires that the user first login to either TWS or IB Gateway, both standalone desktop applications. The TWS API has an order rate limitation of 50 orders per second. FIX/CTCI connectivity can be configured to connect either with IB Gateway or directly to IB. Unlike the TWS API, FIX/CTCI is only for order placement and can not be used to receive market data. Also, FIX/CTCI has monthly minimum commissions involved.  To connect to the same IBKR account simultaneously with multiple trading applications it is necessary to have multiple usernames. Additional usernames can be created through Account Management free of charge. Market data subscriptions however only apply to individual usernames so the fees would be charged separately.  Most third party API applications do not support all IBKR account structures, so it is highly recommended to consult with the third party software vendor before opening or converting to a specific IB account type to use with a third party application.  If an order appears in TWS as untransmitted and is not sent to IB, there are generally three causes: There is an error in the order preventing transmission There is a TWS precautionary setting preventing transmission to IB. Precautionary settings can be globally overridden in TWS as described by our Understanding Order Precautions section. The order was sent with the 'transmit' boolean flag in the API Order class set to False. By default, its value is True.  TWS and IB Gateway have the ability to automatically restart daily without user authentication at a chosen time from Monday-Saturday. On Sunday, following the Saturday night server reset, it is necessary for the user to re-authenticate any running session of TWS or IB Gateway. With the auto-restart option chosen in the settings, the session is designed to be able to continue until the following Sunday as long as there are no other logins with the same username to Client Portal, TWS, or IBKR mobile.  Interactive Brokers can not offer recommendations or suggestions for third party platforms.  From the point of view of an API application, TWS and IB Gateway are essentially identical. TWS additionally offers the user the ability to directly view positions, trades, and market data, and provides a number of tools for trading, research, and analysis. IB Gateway has a simple graphical user interface that is only used for modifying settings. The advantages of IB Gateway is that it consumes 40% fewer resources and can run for longer periods without automatically closing down.  Both TWS and IB Gateway are designed to have a user interface for the client to enter their account credentials. For that reason, headless or GUI-less operation is not supported.",
    "",
    "Description You can connect your Interactive Brokers account to Bloomberg EMSX. How To Connect Please go to IB Client Portal - Help - Secure Message Center - Click 'Compose' - Click 'New Ticket' and submit a web ticket to IBKR Professional Services Team or IBKR Brokerage Operation team to handle the initial setup for IBKR/Bloomberg EMSX. In the web ticket, you need to provide the answers on the following questions: Your Bloomberg UUID Which securities/contracts you would like to trade via Bloomberg EMSX? Will you send any IBKR Algo orders via Bloomberg EMSX? Market Coverage (e.g. exchanges that you would like to access via Bloomberg EMSX)",
    "Description You can connect your Interactive Brokers account to Bookmap. How To Connect https://bookmap.com/learning-center/connectivity/stocks-and-futures-data/interactive-brokers-tws https://bookmap.com/knowledgebase/docs/KB-IntroductionToBookmap-Connectivity#dxfeed-interactive-brokers-for-us-stocks",
    "Description You can connect your Interactive Brokers account to your Capitalise.AI account. How it works https://investors.interactivebrokers.com/en/index.php?f=35735  Important: Please be aware that Interactive Brokers support cannot comment on the status of third party applications such as Capitalise.ai. For issues concerning any delays with your Capitalise.ai linkage application, please contact Capitalise.ai.  How To Connect Step 1: Subscribe to capitalise.ai through IB portal. Complete all the steps shown in https://capitalise.ai/interactivebrokers-how-to-start/. After that, capitalise.ai account should be created, and you will receive an email notification of account activation. Step 2: Click 'Connect Trading Account' on the left-hand menu bar of the capitalise.ai interface. Step 3: You will see Instructions are given. Step 4: Once the document (which must be signed with an ink pen according to IBKR's rules) and copy of ID are sent to support@capitalise.ai , Capitalise.AI will forward the documents to IBKR and IBKR will setup the connection. It may take time.  IMPORTANT:",
    "Please contact Capitalise.AI  This requires IB Brokerage Operations department to stop the connection. Please submit a web ticket to 'API' - 'Third Party Platform Connection' to request stopping the linkage.  Please contact Capitalise.AI and ask them to check whether the documents are successfully sent to IBKR. If yes, please ask them to check with IBKR about the connection setup progress.  In order to trade 2 individual accounts at the same time using Capitalise.AI, you will need each Individual account to have its own username and unique email address. Please contact Capitalise.AI for more information regarding the setup.",
    "Description You can connect your Interactive Brokers account to your Collective 2 account. How it works https://www.collective2.com/static/info/interactive-brokers.htm  Important: Please be aware that Interactive Brokers support cannot comment on the status of third party applications such as Collective 2. For issues concerning any delays with your Collective 2 linkage application, please contact Collective 2.  How To Connect https://support.collective2.com/hc/en-us/articles/4414534270875-How-to-start-Autotrading https://support.collective2.com/hc/en-us/articles/360005139693-IB-Agreement",
    "This is frequently caused by not completing the Collective 2 agreement. In addition to completing the agreement, please be sure that the the agreement and a copy of the photo ID are sent to docs@collective2.com. IB Agreement - Collective 2 https://support.collective2.com/hc/en-us/articles/360005139693-IB-Agreement  Please submit a web ticket to 'API' - 'Third Party Platform Connection' to request stopping the linkage. To create a ticket: https://www.ibkrguides.com/complianceportal/creatingaticket.htm.  Once the backend team at Interactive Brokers has received the application from Collective2, it will generally take 1-2 business days for the backend team to address the linkage request. As the linkage will require a manual review from both Collective2 and Interactive Brokers, the entire process may take more time depending on how long it takes for the backend team to receive the application.  Please contact Collective2 to check for updates regarding your account linkage progress.  Please contact Collective2 to check for updates regarding your account linkage progress.",
    "Description DAS Trader is an independent 3rd Party trading platform that connects directly to the DAS server and provides real-time market data for live trading and simulation. DAS Trader connects to Interactive Brokers through an aggregate FIX connection for order placement. As such, they can be used to route orders to an IBKR PRO account with the same execution rate as client would expect directly. There is no IBKR software that must be installed and no IBKR account configuration required by a client to link DAS to an IBKR account.  Important: Please be aware that Interactive Brokers support cannot comment on the status of third party applications such as DAS Trader. For issues concerning any delays with your DAS Trader linkage application, please contact DAS Trader.  How To Connect For setting up the connection of the DAS Trader platform, please contact DAS (https://dastrader.com) directly and subscribe to an IB Live package in step 1 from the Subscribe for IB option on our website. Thereafter the client will need to complete step 2 process of authorizing the linkage the IBRK PRO account to the FIX Gateway. Notes: In case you have already completed the linking, then you only need to login the DAS Trader platform intended for IBKR clients and trade your account. Subscription to DAS Trader comes with access to the real-time Level 2 Android and iPhone mobile apps, you will be required to enter IBKR's 'Firm ID' on the DAS Trader mobile app, please enter: 'IBCO'. Market data for the DAS Trader platform is also supplied directly from DAS and not from IBKR. DAS Trader can be used with either the paper trading account or the real account. IBKR provides its own data as well. Once you open an IBKR PRO account, if you intend to use any of IBKR's trading platforms, you can subscribe to market data to enable real time quotes.",
    "Once the backend team at Interactive Brokers has received the application from DAS Trader, it will generally take 1-2 business days for the backend team to address the linkage request. As the linkage will require a manual review from both DAS Trader and Interactive Brokers, the entire process may take more time depending on how long it takes for the backend team to receive the application.  Please contact DAS Trader to check for updates regarding your account linkage progress.  Please contact DAS Trader to check for updates regarding your account linkage status.",
    "Description You can connect your Interactive Brokers account to MetaTrader 5. How To Connect https://ibkr.info/node/1982 https://investingintheweb.com/brokers/interactive-brokers-mt5/ Note: MetaTrader 4 may be no longer supported.",
    "Description You can connect your Interactive Brokers account to MotiveWave. How To Connect https://docs.motivewave.com/knowledge-base/connection/interactive-brokers-connection Note: For adding symbol, please visit: https://docs.motivewave.com/knowledge-base/getting-started/symbol",
    "Description Interactive Brokers can integrate our Trader Workstation or IB Gateway with the Multicharts desktop platform How To Connect https://www.multicharts.com/trading-software/index.php/Interactive_Brokers",
    "Yes, according to the Multicharts-Interactive Brokers connection guide, Financial Advisors can connect with Multicharts. Please be aware that Multicharts maintains an additional configuration process clients must complete in order to integrate.  There may be an issue with your Multicharts connection status. It may not be in Online mode. You can read more in this article: https://www.multicharts.com/trading-software/index.php/Problems_with_Data_in_MultiCharts  Different companies may choose to reference data differently. Some companies will use different symbols for different trading classes or multiplier values. This is popular comparing in cases such as ES and MES where the only unique variant is the multiplier. In these cases, you may need to create the symbol mapping yourself. This guide can walk through those steps directly: https://www.multicharts.com/trading-software/index.php/Symbol_Mapping",
    "Description Interactive Brokers can integrate our Trader Workstation or IB Gateway with the NinjaTrader 8. How To Connect https://support.ninjatrader.com/s/article/Connecting-to-Your-Interactive-Brokers-Account?language=en_USHelp Note: NinjaTrader recommends a specific version of TWS or IB Gateway. Please contact NinjaTrader to know which NinjaTrader 8 version suits your TWS or IB Gateway version.",
    "As of NinjaTrader 8.1.4, the NinjaTrader platform does not function with most modern releases of the Trader Workstation due to the use of a legacy implementation of the TWS API software. As a result, the minimum support TWS release and the newest NinjaTrader 8 release are incompatible. Clients intended to use the NinjaTrader platform should continue to use their supported IB Gateway 10.23.2a version until an update is released. NinjaTrader's release notes are listed in their support guide.  NinjaTrader requires customers to pay for their platform license fee in addition to the 3rd party license fee. You can read more about this here: https://forum.ninjatrader.com/forum/ninjatrader-8/platform-technical-support-aa/1099959-ib-account-does-not-show  NinjaTrader may map symbols uniquely from Interactive Brokers. As such, you will need to implement Symbol Mapping. You can read more about this here: https://forum.ninjatrader.com/forum/ninjatrader-8/strategy-development/98027-symbol-mapping-to-interactive-brokers#post828876",
    "Description You can connect your Interactive Brokers account to your QuantConnect account. How To Connect https://www.quantconnect.com/docs/v2/cloud-platform/live-trading/brokerages/interactive-brokers QuantConnect connects using the TWS API in a locally hosted environment by the QuantConnect team. Because of this, Interactive Brokers, nor our clients, will have access to client logs and as a result will have very limited support for the platform. Note: As IB Key is the only 2FA method supported by QuantConnect, clients without IB KEY 2FA verification method cannot connect to QuantConnect. Please activate IB KEY for connecting IB to QuantConnect. For details, please visit: https://ibkr.info/node/2895",
    "Yes. You need to have IB market data subscription for getting IB live data during your live trading.",
    "Description Interactive Brokers can integrate our Trader Workstation or IB Gateway with the SierraChart How To Connect https://www.sierrachart.com/index.php?page=doc/InteractiveBrokers.php#SetupInstructions",
    "Sierra Chart changes the symbol settings for all Interactive Brokers users. For example, the IBM Stock (SMART) in TWS has another symbol format in Sierra Chart: IBM-STK-SMART-USD . For details, please visit Sierra Chart websites: https://www.sierrachart.com/SupportBoard.php?ThreadID=90131 https://www.sierrachart.com/index.php?page=doc/IBSymbols.html#StockFormat",
    "Description Interactive Brokers can integrate our Trader Workstation or IB Gateway with the TradeStation How To Connect https://www.tradestation-international.com/global/open-an-account/returning-client/  Note: TradeStation users may be prompted to upgrade their Trader Workstation version due to an upcoming Interactive Brokers minimum version release. To maintain functionality, please maintain your current version of Trader Workstation until TradeStation has updated their software to accommodate compatibility with the newer version.",
    "Description You can connect your Interactive Brokers account to TradeZella. How To Connect https://www.tradezella.com/brokersupport Note: You could execute trades on IBKR and then transfer the data into TradeZella to track and anaylze your trading performance. You can go to IB Client Portal to enable Flex Web Service to generate Token & Query ID and then integrate with TradeZella.",
    "",
    "Description Interactive Brokers' partner, TradingView, is a popular web-based platform that requires no other software for connectivity besides a web browser. How To Connect You can connect IBKR LITE or IBKR PRO account to TradingView. https://www.interactivebrokers.com/en/trading/tradingview-landing.php",
    "The current integration between Interactive Brokers and TradingView only supports Stocks, Futures, and Leveraged Forex trading.  Users are welcome to subscribe to any resource for their market data needs. Interactive Brokers does not require users to use IBKR-provided data. That being said, Interactive Brokers is required to warn customers about potentially trading with delayed. As such, if customers are trading without IBKR resources, we will warn users on each trade about the dangers of trading without data given we do not have a guarantee that the customer is making an informed decision. See Understanding TradingView and Delayed Data for more information.  Non-tradable symbols are contracts offered by TradingView that may not be supported by Interactive Brokers. This is most commonly seen from trading security types not supported in our integration, such as Options or Cryptocurrencies. See Non-tradable Symbols In TradingView  Interactive Brokers only allows orders to be bracketed so long as the order is still open and has not been executed. Once an order has executed, no modifications or brackets can be added to an order. Child orders can be added to open orders on the TradingView 'Trade' window, or by selecting the 'TP' or 'SL' icons beside your order in the chart.  You may forget your IBKR Paper Account Username/ Password. Or, you haven't reset your IBKR Paper Account Password. Please login IB Client Portal with your live account. Then, go to 'Settings' - 'Paper Trading Account' to find your Paper Trading Username and reset Password. Note: Despite you may successfully login to IBKR platforms (e.g. IBKR Mobile/TWS/IB Client Portal) with paper account, it is necessary to reset IBKR Paper Account Password in order to connect Paper Account to Trading View.  Logging into the IB Live account requires Two Factor Authentication. You may forget to activate IBKEY Authentication. For how to setup the IBKEY, please visit: https://ibkrguides.com/securelogin/sls/faq.htm Note: TradingView only supports IBKEY authentication.  Pine Script is not supported during the connection between IB and TradingView. For details, please visit: https://www.tradingview.com/support/solutions/43000481026-how-to-autotrade-using-pine-script-strategies/",
    "Currently, the integration between Interactive Brokers and TradingView supports Stocks, Futures, and Leveraged Forex trading.",
    "Non-tradable symbols are contracts offered by TradingView that may not be supported by Interactive Brokers. This is most commonly seen from trading security types not supported in our integration, such as Options or Cryptocurrencies. ",
    "In order to confirm you are looking at a symbol supported by Interactive Brokers, make sure to select the Interactive Brokers checkbox while searching for symbols.  If the Interactive Brokers check box is grey or clear, that means Interactive Brokers is not selected, and you may find non-tradable symbols.   If the Interactive Brokers check box is blue, that means Interactive Brokers is selected and the symbol is tradable with Interactive Brokers. ",
    "There are many reasons a user may find themselves receiving delayed data in TradingView when connecting to Interactive Brokers. In this section, we are looking to highlight a few of the common behaviors experienced, and how to resolve them.",
    "If a user is attempting to trade a contract while they do not have market data through Interactive Brokers, users are expected to receive a warning message that must be confirmed before the order is placed. This does not prevent users from trading with TradingView, and is only intended as a warning message. At this time, the only method to prevent this warning message is by purchasing market data directly through Interactive Brokers. ",
    "In some instances, customers who have purchased market data through TradingView or another resource may see that they are receiving live data in their charts. However, users may see that their Order window within TradingView is showing an orange 'D' for Delayed Data. That is because the data within the trading window itself is produced by Interactive Brokers, which would not be paid for in this instance. At this time, the only method to display live data in the Order window is by purchasing market data directly through Interactive Brokers. ",
    "The TWS API is a TCP Socket Protocol API based on connectivity to the Trader Workstation or IB Gateway. The API acts as an interface to retrieve and send data autonomously to Interactive Brokers. Interactive Brokers provides code systems in Python, Java, C++, C#, and VisualBasic. The TWS API is a message protocol as its core, and any library that implements the TWS API, whether created by IB or someone else, is a tool to send and receive these messages over a TCP socket connection with the IB host platform (TWS or IB Gateway). As such the system can be tweaked and modified into any language of interest given the intention to translate the underlying decoder. In short, a library written in any other languages must be sending and receiving the same data in the same format as any other conformant TWS API library, so users can look at the documentation for our libraries to see what a given request or response consists of (what it must include, in what form, etc.) and implement them in their own structure.  Our TWS API components are aimed at experienced professional developers willing to enhance the current TWS functionality. Before you use TWS API, please make sure you fully understand the concepts of OOP (https://www.geeksforgeeks.org/introduction-of-object-oriented-programming/) and other Computer Science Concepts. Regrettably, Interactive Brokers cannot offer any programming consulting. Before contacting our API support, please always refer to our available documentation, sample applications and Recorded Webinars This guide references the Java, VB, C#, C++ and Python Testbed sample projects to demonstrate the TWS API functionality. Code snippets are extracted from these projects and we suggest all those users new to the TWS API to get familiar with them in order to quickly understand the fundamentals of our programming interface. The Testbed sample projects can be found within the samples folder of the TWS API's installation directory.",
    "While Interactive Brokers does maintain a Python, Java, C#, and C++ offering for the TWS API, C# and our Excel offerings are exclusively available for Windows PC. As a result, these features are not available on Linux or Mac OS.",
    "A funded and opened IBKR Pro account The current Stable or Latest release of the TWS or IB Gateway The current Stable or Latest release of the TWS API A working knowledge of the programming language our Testbed sample projects are developed in.  The minimum supported language version is documented on the right for each of our supported languages. Please be sure to toggle the indicated language to the language of your choosing.",
    "Our programming interface is designed to automate some of the operations a user normally performs manually within the TWS Software such as placing orders, monitoring your account balance and positions, viewing an instrument's live data... etc. There is no logic within the API other than to ensure the integrity of the exchanged messages. Most validations and checks occur in the backend of TWS and our servers. Because of this it is highly convenient to familiarize with the TWS itself, in order to gain a better understanding on how our platform works. Before spending precious development time troubleshooting on the API side, it is recommended to first experiment with the TWS directly. Remember: If a certain feature or operation is not available in the TWS, it will not be available on the API side either!",
    "The TWS API C# source files are not available through the Mac and Unix distribution download as the language is built around Dynamic Link Library (DLL) files for execution. This is because DLL files are exclusively supported through Windows platforms.",
    "If your regular trading account has been approved and funded, you can use your Account Management page to open a Paper Trading Account which lets you use the full range of trading facilities in a simulated environment using real market conditions. Using a Paper Trading Account will allow you not only to get familiar with the TWS API but also to test your trading strategies without risking your capital. Note the paper trading environment has inherent limitations.",
    "In order to use the TWS API, all customers must install either Trader Workstation or IB Gateway to connect the API to. Both downloads maintain the same level of usage and support; however, they both have equal benefits. For example, IB Gateway will be less resource intensive as there is no UI; however, the Trader Workstation has access all of the same information as the API, if users would like an interface to confirm data.  Download Trader Workstation Download IB Gateway",
    "It is recommended for API users to use offline TWS because TWS online version has automatic update. Please use same TWS version to make sure the TWS version and TWS API version are synced. These will help preventing version conflict issue.",
    "Some TWS Settings affect API.",
    "The settings required to use the TWS API with the Trader Workstation are managed in the Global Configuration under 'API' -> 'Settings' In this section, only the most important API settings for API connection are covered. Please: Enable 'ActiveX and Socket Clients' Disable 'Read-Only API' Verify the 'Socket Port' value",
    "The information listed below are not required or necessary in order to operate the TWS API. However, these steps include many references which can help improve the day to day usage of the TWS API that is not explicitly offered as a callable method within the API itself.",
    "Note: For IBHK API users, it is commended to use IB Gateway instead of TWS. It is because all IBHK users cannot choose 'Never Lock Trader Workstation' in TWS - Global Configuration - Lock and Exit. If there is inactivity, TWS will be locked and there will be API disconnection.",
    "In TWS/ IB Gateway - 'Global Configuration' - 'General', you can adjust the Memory Allocation (in MB)*. This feature is to control how much memory your computer can assign to the TWS/ IB Gateway application. Usually, higher value allows users to have faster data returning speed. Normally, it is recommended for API users to set 4000. However, it depends on your computer memory size because setting too high may cause High Memory Usage and application not responding. For details, please visit: https://www.ibkrguides.com/traderworkstation/increase-tws-memory-size.htm Note: In IB Gateway Global Configuration - API - settings, there is no 'Compatibility Mode: Send ISLAND for US stocks trading on NASDAQ'. Specifying NASDAQ exchange in contract details may cause error if connecting to IB Gateway. For this error, please specify ISLAND exchange.",
    "Daily Reauthentication In TWS/ IB Gateway - 'Global Configuration' - 'Lock and Exit', you can choose the time of your TWS being shut down. For API users, it is recommended to choose 'Never lock Trader Workstation' and 'Auto restart'. Note: IBHK users do not have 'Never lock Trader Workstation' and 'Auto restart' in TWS. It is suggested for IBHK users to use IB Gateway in order to have stable API connection because IB Gateway won't be locked due to inactivity. Also, IBHK users can choose 'Auto restart' in IB Gateway. Weekly Reauthentication The weekly authentication cycle starts on every Monday. If you receive Login failed = Soft token=0 received instead of expected permanent for zdc1.ibllc.com:4001 (SSL), this means you need to manually login again to complete the weekly reauthentication task.",
    "In TWS - 'Global Configuration' - 'API' - 'Precautions', you can enable the following items to stop receiving the order submission messages. Enable 'Bypass Order Precautions for API orders'. Enable 'Bypass Bond warning for API orders'. Enable 'Bypass negative yield to worst confirmation for API orders'. Enable 'Bypass Called Bond warning for API orders'. Enable 'Bypass 'same action pair trade' warning for API orders'. Enable 'Bypass price-based volatility risk warning for API orders'. Enable 'Bypass US Stocks market data in shares warning for API orders'. Enable 'Bypass Redirect Order warning for Stock API orders'. Enable 'Bypass No Overfill Protection precaution for destinations where implied natively'.",
    "Each IB account has a pre-decided IB server. You can visit this link to know our IB servers' locations: https://www.interactivebrokers.com/download/IB-Host-and-Ports.pdf Yet, all IB paper accounts are connected to US server by default and its location cannot be changed. As IB servers in different regions have different scheduled server maintenance time (https://www.interactivebrokers.com/en/software/systemStatus.php), you may need to change the IB server location in order to avoid service downtime. For checking your connected IB server location, you can go to TWS and click 'Data' to see your Primary server. In the below image, the pre-decided IB server location is: cdc1.ibllc.com If you want to change your live IB account server location in TWS, please submit a web ticket to 'Technical Assistance' - 'Connectivity' in order to request changing the IB server location. In the web ticket, you need to provide: Which account do you want to have IB server location change? Which IB server location would you like to connect to? TWS AMERICA - EAST (New York) TWS AMERICA - CENTRAL (Chicago) TWS Europe (Zurich) TWS Asia (Hong Kong) TWS Asia - CHINA (For mainland China users, if the account server is hosted in Hong Kong, they will automatically connect with the Shenzhen Gateway mcgw1.ibllc.com.cn) Which IB scheduled maintenance time do you choose? (Recommended to choose the default schedule maintenance time of its own IB server location) North America Europe Asia After you submit the ticket, you will receive a web ticket reply which require you to confirm and understand the migration request. Note: For Internet users, as the connection between IB server and Exchange goes through a dedicated line, it is commonly recommended to choose a IB server location which is closer to your TWS location. For IB connection types, please visit: https://www.interactivebrokers.co.uk/en/software/connectionInterface.php The pre-decided IB server location connected from TWS is different from the IB Server location connected from IB Client Portal and IBKR Mobile. IB server location connected from TWS is pre-decided. You can submit a web ticket to request the IB server relocation for the TWS connection. IB server location connected from Client Portal or IBKR Mobile is based on your nearest IB server location. You cannot request the IB server relocation for Client Portal and IBKR Mobile connections. OAuth CP API users now cannot specify which server they want to connect to by themselves.",
    "In TWS Global Configuration - Orders - Smart Routing, you can set your SMART order routing algorithm. For available SMART Routing via TWS API, please visit: https://www.interactivebrokers.com/campus/ibkr-api-page/contracts/#smart-routing",
    "In TWS Global Configuration - Advisor Setup - Presets, you can need to choose Allocation Preference in order to avoid wrong allocation result.",
    "The TWS Setting listed in the Global Configuration under API -> Setting for Maintain and resubmit orders when connection is restored, is enabled by default in TWS 10.28 and above. When this setting is checked, all orders received while connectivity is lost will be saved and automatically resubmitted when connectivity is restored. Please note, if the Trader Workstation is closed during this time, the orders are deleted regardless of the setting.",
    "The TWS Setting listed in the Global Configuration under API -> Setting for Maintain connection upon receiving incorrectly formatted fields, is enabled by default in TWS 10.28 and above. For clients operating on Client Version 100 and above, users will not disconnect from fields with invalid value submissions when the setting is enabled.",
    "It is recommended for API users to use same TWS API version to make sure the TWS version and TWS API version are synced in order to prevent version conflict issue. Running the Windows version of the API installer creates a directory 'C:\\\\TWS API\\' for the API source code in addition to automatically copying two files into the Windows directory for the DDE and C++ APIs. It is important that the API installs to the C: drive, as otherwise API applications may not be able to find the associated files. The Windows installer also copies compiled dynamic linked libraries (DLL) of the ActiveX control TWSLib.dll, C# API CSharpAPI.dll, and C++ API TwsSocketClient.dll. Starting in API version 973.07, running the API installer is designed to install an ActiveX control TWSLib.dll, and TwsRtdServer control TwsRTDServer.dll which are compatible with both 32 and 64 bit applications. It is important to know that the TWS API is only available through the interactivebrokers.github.io MSI or ZIP file. Any other resource, including pip, NuGet, or any other online repository is not hosted, endorsed, supported, or connected to Interactive Brokers. As such, updates to the installation should always be downloaded from the github directly.  TWS API Download Page",
    "Windows: Download the IB API for Windows to your local machine This will direct you to Interactive Brokers API License Agreement, please review it Once you have clicked 'I Agree', refer to the Windows section to download the API Software version of your preference This will download TWS API folder to your computer Go to your IDE and Open Terminal Navigate to the directory where the installer has been downloaded (normally it should be your C: drive or D: drive) and confirm the file is present. Now, let's take an example: install TWS API Python $ cd ~/TWS API/source/pythonclient $ python3 setup.py install",
    "Unix/ Linux: Download the IB API for Mac/Unix zip file to your local machine This will direct you to Interactive Brokers API License Agreement, please review it Once you have clicked 'I Agree', refer to the Mac / Unix section to download the API Software version of your preference This will download twsapi_macunix.<Major Version>.<Minor Version>.zip to your computer (where <Major Version> and <Minor Version> are the major and minor version numbers respectively) Open Terminal (Ctrl+Alt+T on most distributions) Navigate to the directory where the installer has been downloaded (normally it should be the Download folder within your home folder) and confirm the file is present $ cd ~/Downloads $ ls Unzip the contents the installer into your home folder with the following command (if prompted, enter your password): NOTE: replace the values 'n.m' with the name of your installed file. $ sudo unzip twsapi_macunix.n.m.zip -d $HOME/ To access the sample and source files, navigate to the IBJts directory and confirm the subfolders samples and source are present $ cd ~/IBJts $ ls Note: When running 'python3 setup.py install', you may get 'ModuleNotFoundError: No Module named 'setuptools''. As 'setuptools' is deprecated, please grant the write permission on the target folder (e.g. source/pythonclient) using 'sudo chmod -R 777' in order to avoid 'error: could not create 'ibapi.egg-info': Permission denied'. After that, run 'python3 -m pip install .' MacOS: Download the IB API for Mac/Unix zip file to your local machine This will direct you to Interactive Brokers API License Agreement, please review it Once you have clicked 'I Agree', refer to the Mac / Unix section to download the API Software version of your preference This will download twsapi_macunix.<Major Version>.<Minor Version>.zip to your computer (where <Major Version> and <Minor Version> are the major and minor version numbers respectively) Open MacOS Terminal (Command+Space to launch Spotlight, then type terminal and press Return) Go to find the zipped TWS API file and Copy the zipped TWS API file path. Run the following command in MacOS Terminal. $ unzip twsapi_macunix.<Major Version>.<Minor Version>.zip Note: On MacOS, if you directly open the twsapi_macunix.<Major Version>.<Minor Version>.zip file, you will get an error: 'Unable to expand...... It is an unsupported format'. It is required for users to unzip the zipped TWS API file using the above MacOS Terminal command.",
    "TWS API Folder Files Explanation: 'API_VersionNum.txt' File Path: ~\\TWS API\\API_VersionNum.txt You can check your API version in this file. 'IBSampleApp.exe' File Path: ~\\TWS API\\samples\\CSharp\\IBSampleApp\\bin\\Release\\IBSampleApp.exe You can manually use the IBSampleApp to test the API functions. 'ApiDemo.jar' File Path: ~\\TWS API\\samples\\Java\\ApiDemo.jar This is built with Java. Java users can use it to quickly test the IB TWS API functions.",
    "Many of our most common features, as well as instructions for installing and running the Trader Workstation API, are available in our TWS API Tutorial Series. The series uses Python to implement the TWS API functionality; however, the function calls are identical across languages, and will follow a similar patter regardless of language. This tutorial covers: Downloading and running the Trader Workstation and IB Gateway How to install the TWS API and update the Python Interpreter Requesting Live and Historical Market Data Placing and Monitoring Orders Reviewing Individual Account Information Handling Market Scanners  Python TWS API Tutorial",
    "Third party software vendors make use of the TWS' programming interface (API) to integrate their platforms with Interactive Broker's. Thanks to the TWS API, well known platforms such as Ninja Trader or Multicharts can interact with the TWS to fetch market data, place orders and/or manage account and portfolio information. It is important to keep in mind that most third party API platforms are not compatible with all IBKR account structures. Always check first with the software vendor before opening a specific account type or converting an IBKR account type. For instance, many third party API platforms such as NinjaTrader and TradeNavigator are not compatible with IBKR linked account structures, so it is highly recommended to first check with the third party vendor before linking your IBKR accounts.  An ongoing list of common Third Party Connections are available within our documentation. This resource will also link out to connection guides detailing how a user can connect with a given platform. A non-exhaustive list of third party platforms implementing our interface can be found in our Investor's Marketplace. As stated in the marketplace, the vendors' list is in no way a recommendation from Interactive Brokers. If you are interested in a given platform that is not listed, please contact the platform's vendor directly for further information.",
    "Noted in further depth through our Architecture section, the TWS API is built using standardized socket protocol. As a result, users may develop or access alternative third party modules and classes in place of Interactive Brokers default modules through the TWS API Download. While the API is adaptable for client implementations, please understand that Interactive Brokers API Support cannot provide support for non-standard implementations. While we can review your API logs to affirm what content is being submitted, any further assistance will need to take place with the module's original developer. This is neither an endorsement or admonishment of third party implementations. Interactive Brokers will always advise clients use our direct TWS API implementation whenever possible.",
    "While Interactive Brokers' API Support is aware of the ib_insync package, we cannot provide coding assistance for the package. With that in mind, users should be aware that the original ib_insync package is built using a legacy release of the TWS API and is no longer updated. Users who wish to implement the ib_insync structure using supported releases of the Trader Workstation should migrate to the ib_async package, which is a modernized implementation of the package by one of its original developers. This is neither an endorsement or admonishment of either the ib_insync or ib_async library. Interactive Brokers will always advise clients use our direct TWS API implementation whenever possible.",
    "While all of the available Trader Workstation API default samples provide equivalent functionality, some languages have unique configurations that must be implemented in order to use our samples or program code with the underlying API.",
    "Due to the malleability of the many Linux distributions including MacOS, Interactive Brokers is unable to provide a pre-built binary for the library. As such, users programming in C++ on a Linux machine must manually build the Intel Decimal Floating-Point Math Library manually. As described in the README file from the linked page, you can find the library's build steps within the ~/IntelRDFPMathLib20U2/LIBRARY/README file.  Download the Intel Decimal Floating-Point Math Library",
    "Python has a unique system for importing libraries into it's IDEs. This extends even further when it comes to virtual environments. In order to utilize Python code with the TWS API, you must run our setup file in order to import the code.",
    "In order to update the Python IDE, these steps MUST be performed through Command Prompt or Terminal. This can not be done through an explorer interface. As such, users should begin by launching their respective command line interface. These samples will display Windows commands, though the procedure is identical on Windows, MacOS, and Linux. ",
    "Customers should then change their directory to {TWS API}\\source\\pythonclient{TWS API}\\source\\pythonclient . It is then recommend to display the contents of the directory with 'ls' for Unix, or 'dir' for Windows users. ",
    "Customers will now need to run the setup.py steps with the installation parameter. This can be done with the command: python setup.py installpython setup.py install ",
    "After running the prior command, users should see a large block of text describing various values being updated and added to their system. It is important to confirm that the version installed on your system mirrors the build version displayed. This example represents 10.25; however, you may have a different version. ",
    "Finally, users should look to confirm their installation. The simplest way to do this is to confirm their version with pip. Typing this command should show the latest installed version on your system: python -m pip show ibapipython -m pip show ibapi ",
    "After resolving the reference errors, using the TWSAPI may print a UserWarning upon connection. These warnings are predominantly cosmetic and can be ignored. These issues are caused by the Pypi release of protobuf running version 6.30.1 and above, while the TWS API is built with 5.29.3. The warning is simply notifying users that their version is 1 major version different. However, given protobuf is currently backgwards compatible, this should not present any issues with the implementation. Developers uncomfortable with the warning messages have a few options: Recompile Protobuf against their Github 5.29.3 version to maintain parity with the TWS API implementations. Users can also modify the code source, linked by the protobuf warning, and simply remove lines 94 and on from the runtime_version.py file.",
    "Our VB.NET code is provided for demonstration purposes only; there is no pure, standalone VB.NET-based TWS API library. Both our 'VB_API_Sample' and the VB.NET 'Testbed' projects included with our TWS API releases call the C# TWS API source. The provided VB.NET code only interfaces with the C# source. Please keep in mind that these samples are in VB.NET, not Visual Basic for Applications.",
    "If there are remaining questions about available API functionality after reviewing the content of this documentation, the API Support group is available to help. -> It is important to keep in mind that IB cannot provide programming assistance or give suggestions on how to code custom applications. The API group can review log files which contain a record of communications between API applications and TWS, and give details about what the API can provide. General suggestions on starting out with the IB system: Become familiar with the analogous functionality in TWS before using the API: the TWS API is nothing but a communication channel between your client application and TWS. Each API function has a corresponding tool in TWS. For instance, the market data tick types in the API correspond to watchlist columns in TWS. Any order which can be created in the API can first be created in TWS, and it is recommended to do so. Additionally, if information is not available in TWS, it will not be available in the API. Before using IB Gateway with the API, it is recommended to first become familiar with TWS. Make use of the sample API applications: the sample applications distributed with the API download have examples of essentially every API function in each of the available programming languages. If an issue does not occur in the corresponding sample application, that implies there is a problem with the custom implementation. Upgrade TWS or IB Gateway periodically: TWS and IB Gateway often have new software releases that have enhancements, and that can sometimes have bug fixes. Because of this, we strongly recommend our users to keep their software as up to date as possible. If you are experiencing a specific problem that is occurring in TWS or IB Gateway and not in the API program, it is likely resolved in the more recent software build.",
    "Log files are used by developers and support to unambiguously understand the behavior of a request. These files are stored on the clients machine and are only sent to Interactive Brokers by client request. These logs will recycle every 7 days. This would include the current day and the prior 6 days.",
    "TWS and IB Gateway can be configured to create a separate log file which has a record of just communications with API applications. This log is not enabled by default; but needs to be enabled by the Global Configuration setting 'Create API Message Log File'(picture below). API logs contain a record of exchanged messages between API applications and TWS/IB Gateway. Since only API messages are recorded, the API logs are more compact and easier to handle. However they do not contain general diagnostic information about TWS/IBG as the TWS/IBG logs. The TWS/IBG settings folder is by default C:\\Jts (or IBJts on Mac/Linux). The API logs are named api.[clientId].[day].log, where [clientId] corresponds to the Id the client application used to connect to the TWS and [day] to the week day (i.e. api.123.Thu.log). There is also a setting 'Include Market Data in API Log' that will include streaming market data values in the API log file. Historical candlestick data is always recorded in the API log. Note: Both the API and TWS logs are encrypted locally. The API logs can be decrypted for review from the associated TWS or IB Gateway session, just like the TWS logs, as shown in the section describing the Local location of logs. Note: The TWS/IB Gateway log file setting has to be set to 'Detail' level before an issue occurs so that information recorded correctly when it manifests. However due to the high amount of information that will be generated under this level, the resulting logs can grow considerably in size.  Enabling creation of API logs TWS: Navigate to File/Edit -> Global Configuration -> API -> Settings Check the box Create API message log file Set Logging Level to Detail Click Apply and Ok   IB Gateway: Navigate to Configure -> Settings -> API -> Settings Check the box Create API message log file Set Logging Level to Detail Click Apply and Ok ",
    "Enabling DEBUG-level logging for the host platform (TWS or IBG, this does not affect API logs): Navigate to the root TWS/IBG installation directory Find jts.ini and open in text editor Put debug=1 under the [Communication] section Reboot TWS/IBG  Setting debug=1 has added benefits in TWS. Debug=1 also allows you to enter conIds into a watchlist to resolve them into symbols. Type/paste the conId in an empty watchlist row, add |C (vertical bar, capital C) at the end, and press Enter. Example: 265598|C will resolve immediately to AAPL (exchange will be SMART where available, primary otherwise). If the instrument is already present in the watchlist, nothing will happen. Additional detail in the 'Description' window for an instrument, normally available by right-clicking on an instrument in a watchlist and selecting Financial Instrument Info >> Description from the context menu. Debug=1 will add the conId, min order sizes, market rules (i.e., min price increments and thresholds), all available order types, and all available exchanges to this interface. Changing the behavior of TWS to bring up that Description window on double-click can make it easier to find. In TWS, go to Global Configuration >> Display >> Ticker Row Change 'Double-click on Financial Instrument will' dropdown menu to 'Open Contract Details'",
    "Logs are stored in the TWS settings directory, C:\\Jts\\ and then your user subdirectory by default on a Windows computer (the default can be configured differently on the login screen). The path to the log file directory can be found from a TWS or IB Gateway session by using the combination Ctrl-Alt-U. This will reveal path such as C:\\Jts\\detcfsvirl\\ (on Windows). Due to privacy regulations, logs are encrypted before they are saved to disk. To review them on your machine, you may need to Export Your Logs from the associated TWS or IB Gateway session.",
    "In some instances, your logs may be too large to export or upload for Client Services to review. In scenarios such as this, the Support team may request that you delete your existing API logs, and then replicate the error before attempting to upload them again. To delete your logs: Locate your Logs. Exit TWS or IB Gateway session by clicking 'File' and 'Exit'. In your terminal or window explorer, navigate to your user subdirectory. Once in the directory, select the files labeled like 'api.0.20250110.105733.ibgzenc', 'tws.20250110.105733.ibgzenc' or 'ibgateway.20250110.105733.ibgzenc' and press the 'Delete' key on your keyboard, or type 'del {filename}' into your terminal.",
    "If API logging has been enabled with the setting 'Create API Message Log' during the time when an issue occurs, it can be uploaded to the API group. Important: Please be aware that the process of uploading logs does not notify support, nor is a ticket logged. You will need to contact our representatives through a direct call, chat, or secure message center message for our representatives to be aware of the upload.  To upload logs as a Windows user: In TWS or IB Gateway, press CTRL+ALT+H to bring up the Upload Diagnostics window. In the 'reason' text field, please type the reason for your upload. Alternatively, type 'ATTENTION: ' and then the ticket number you are working with, or the name of your customer service representative. Find the small arrow in the upper right corner, click it and select 'Advanced View' Make sure 'Full internal state of the application' is checked Make sure 'Include previous days logs and settings' is unchecked, unless the error happened on a prior day. Click Submit  To upload logs as a Mac and Linux user: In TWS or IB Gateway, press CMD+OPT+H to bring up the Upload Diagnostics window. In the 'reason' text field, please type the reason for your upload. Alternatively, type 'ATTENTION: ' and then the ticket number you are working with, or the name of your customer service representative. Find the small arrow in the upper right corner, click it and select 'Advanced View' Make sure 'Full internal state of the application' is checked Make sure 'Include previous days logs and settings' is unchecked, unless the error happened on a prior day. Click Submit  If logs have been uploaded, please let the API Support group know by creating a webticket in the Message Center in Account Management (under Support) indicating the username of the associated TWS session. In some cases a TWS log may also be requested at the Detailed logging level. The TWS log can grow quite large and may not be uploadable by the automatic method; in this case an alternative means of upload can be found.",
    "In TWS, navigate to Help menu >> Troubleshooting >> Diagnostics >> 'API Logs' or 'TWS Logs'. In IBG, both 'API Logs' and 'Gateway Logs' are accessible directly from the File menu. Click 'Export Today Logs...' to decrypt the logs and save them in plaintext (logs are stored encrypted on your local machine)",
    "Each supported API language of the API contains a message file that translates a given number identifier into their corresponding request. The message identifier numbers used in the underlying wire protocol is the core of the TWS API. The information on the right documents where each message reader file is located. The {TWS API} listed is the path to the primary TWS API or JTS folder created from the API installation. By default, this will be saved directly on the C: drive.  In our API logs, the direction of the message is indicated by the arrow at the beginning: -> for incoming messages (TWS to client) <- for outgoing messages (client to TWS) Thus <- 3 (outgoing request of type 3) is a placeOrder request, and the subsequent incoming requests are: -> 5 = openOrder response -> 11 = executionData response -> 59 = commissionReport response Also note that the first openOrder response carries with it an orderStatus response in the same message. If that status were to change later, it would be delivered as a standalone message: -> 3 = orderStatus response",
    "Developers may often find a super-massive value returned from requests like market data, P&L information, and elsewhere. These are known as Unset values. Unset values are used throughout programming systems to indicate that a value is not available. Unset values are used in place of NULL characters to prevent any unexpected error be thrown in your code. Unset values are also used in place of values like 0 to avoid confusing viewers to believe they have an account balance of 0, or that an equity is worth $0. An unset value is the maximum value of a given data type. So the Unset Double value will appear like 1.7976931348623157E308, which contains approximately 308 digits to intentionally appear extraneous.",
    "The TWS API is a BSD implementation that communicates request and response values across TCP socket using a end-line-delimited message protocol. While the underlying structure of the message will vary by request, requests typically follow a patter of indicating a message identifier, request identifier, and then directly relevant content for the request such as contract details or market data parameters. The provided TWS API package use two distinct classes to accommodate the request / response functionality of the socket protocol, EClient and EWrapper respectively.  The EWrapper class is used to receive all messages from the host and distribute them amongst the affiliated response functions. The EReader class will retrieve the messages from the socket connection and decode them for distribution by the EWrapper class.  EClient or EClientSocket is used to send requests to the Trader Workstation. This client class contains all the available methods to communicate with the host. Up to 32 clients can be connected to a single instance of the host Trader Workstation or IB Gateway simultaneously. The primary distinction in EClient and EClientSocket is the involvement of the EReader Class to trigger when requests should be processed. EClient is unique to the Python implementation and utilizes the Python Queue module in place of the EReaderSignal directly. Both the EReaderSignal and Python Queue module handle the queueing process for submitting messages across the socket connection. In either scenario, the EWrapper class must be implemented first to acknowledge the EClient requests.",
    "Our market maker-designed IBKR Trader Workstation (TWS) lets traders, investors, and institutions trade stocks, options, futures, forex, bonds, and funds on over 100 markets worldwide from a single account. The TWS API is a programming interface to TWS, and as such, for an application to connect to the API there must first be a running instance of TWS or IB Gateway.",
    "As an alternative to TWS for API users, IBKR also offers IB Gateway (IBGW). From the perspective of an API application, IB Gateway and TWS are identical; both represent a server to which an API client application can open a socket connection after the user has authenticated. With either application (TWS or IBGW), the user must manually enter their username and password into a login window. For security reasons, a headless session of TWS or IBGW without a GUI is not supported. From the user's perspective, IB Gateway may be advantageous because it is a lighter application which consumes about 40% fewer resources. Both TWS and IBGW were designed to be restarted daily. This is necessary to perform functions such as re-downloading contract definitions in cases where contracts have been changed or new contracts have been added. Beginning in version 974+ both applications offer an autorestart feature that allows the application to restart daily without user intervention. With this option enabled, TWS or IBGW can potentially run from Sunday to Sunday without re-authenticating. After the nightly server reset on Saturday night it will be necessary to again enter security credentials. The advantages of TWS over IBGW is that it provides the end user with many tools (Risk Navigator, OptionTrader, BookTrader, etc) and a graphical user interface which can be used to monitor an account or place orders. For beginning API users, it is recommended to first become acquainted with TWS before using IBGW. For simplicity, this guide will mostly refer to the TWS although the reader should understand that for the TWS API's purposes, TWS and IB Gateway are synonymous.",
    "Pacing Limitations with regards to the TWS API are based on the number of requests submitted by a client connection. A 'request' is a user-submitted query to retrieve some form of data. An example of a request is a query to retrieve live watchlist data. While you may make a single request for market data, you will receive market data until the subscription is cancelled or your session is disconnected. Only the original request to begin the flow of data will contribute to the pacing limitation.  The maximum number of API requests that can be submitted are equivalent to your Maximum Market Data Lines divided by 2, per second. By default, all users maintain 100 market data lines. Therefore, users have a pacing limitation of (100/2)= 50 requests per second. Clients that have increased their market data lines to 200, by way of commission or Quote Booster Subscription, would receive (200/2)= 100 requests per second, and this would increment as your market data lines increase or decrease.  In some use cases, if you plan to send more than 50 requests per second, some orders may be queued and delayed. For this scenario, please consider switching to FIX API. For FIX API users in IB Gateway, the limitation is 250 messages per second. For FIX API users without using IB Gateway or TWS, there is no limitation on messages per second, but less is better.",
    "The TWS API supports two formats for users who break the pacing limitations. This behavior is set in the Global Configuration of Trader Workstation or IB Gateway. Under 'API' and then 'Settings' users will see a setting for 'Reject messages above maximum allowed message rate vs applying pacing.'  If the setting is checked, TWS will notify the user they surpassed the pacing limit using error code 100. If the pacing limits are broken 3 times, the API session will terminate and the user will receive WinError 10053 on Windows or a BrokenPipe error on MacOS or Linux machines. If the setting is unchecked, TWS will automatically pace the requests submitted by the user. The system will wait to acknowledge requests in the EReader Thread prior to moving on to new requests. ",
    "A socket connection between the API client application and TWS is established with the IBApi.EClientSocket.eConnect function. TWS acts as a server to receive requests from the API application (the client) and responds by taking appropriate actions. The first step is for the API client to initiate a connection to TWS on a socket port where TWS is already listening. It is possible to have multiple TWS instances running on the same computer if each is configured with a different API socket port number. Also, each TWS session can receive up to 32 different client applications simultaneously. The client ID field specified in the API connection is used to distinguish different API clients.",
    "Once our two main objects have been created, EWrapper and ESocketClient, the client application can connect via the IBApi.EClientSocket object:  eConnect starts by requesting from the operating system that a TCP socket be opened to the specified IP address and socket port. If the socket cannot be opened, the operating system (not TWS) returns an error which is received by the API client as error code 502 to IBApi.EWrapper.error (Note: since this error is not generated by TWS it is not captured in TWS log files). Most commonly error 502 will indicate that TWS is not running with the API enabled, or it is listening for connections on a different socket port. If connecting across a network, the error can also occur if there is a firewall or antivirus program blocking connections, or if the router's IP address is not listed in the 'Trusted IPs' in TWS. After the socket has been opened, there must be an initial handshake in which information is exchanged about the supported version of the TWS and API to ensure each platform can interpret received messages correctly. For this reason it is important that the main EReader object is not created until after a connection has been established. The initial connection results in a negotiated common version between TWS and the API client which will be needed by the EReader thread in interpreting subsequent messages. After the highest version number which can be used for communication is established, TWS will return certain pieces of data that correspond specifically to the logged-in TWS user's session. This includes (1) the account number(s) accessible in this TWS session, (2) the next valid order identifier (ID), and (3) the time of connection. In the most common mode of operation the EClient.AsyncEConnect field is set to false and the initial handshake is taken to completion immediately after the socket connection is established. TWS will then immediately provides the API client with this information. Important: The IBApi.EWrapper.nextValidID callback is commonly used to indicate that the connection is completed and other messages can be sent from the API client to TWS. There is the possibility that function calls made prior to this time could be dropped by TWS. There is an alternative, deprecated mode of connection used in special cases in which the variable AsyncEconnect is set to true, and the call to startAPI is only called from the connectAck() function. All IB samples use the mode AsyncEconnect = False.  The ConnectAck function is called automatically once a connection has been established with the Trader Workstation or IB Gateway.",
    "A user can verify whether their API session is connected at any point with the EClient.isConnected() function.  eConnect starts by requesting from the operating system that a TCP socket be opened to the specified IP address and socket port. If the socket cannot be opened, the operating system (not TWS) returns an error which is received by the API client as error code 502 to IBApi.EWrapper.error (Note: since this error is not generated by TWS it is not captured in TWS log files). Most commonly error 502 will indicate that TWS is not running with the API enabled, or it is listening for connections on a different socket port. If connecting across a network, the error can also occur if there is a firewall or antivirus program blocking connections, or if the router's IP address is not listed in the 'Trusted IPs' in TWS. After the socket has been opened, there must be an initial handshake in which information is exchanged about the supported version of the TWS and API to ensure each platform can interpret received messages correctly. For this reason it is important that the main EReader object is not created until after a connection has been established. The initial connection results in a negotiated common version between TWS and the API client which will be needed by the EReader thread in interpreting subsequent messages. After the highest version number which can be used for communication is established, TWS will return certain pieces of data that correspond specifically to the logged-in TWS user's session. This includes (1) the account number(s) accessible in this TWS session, (2) the next valid order identifier (ID), and (3) the time of connection. In the most common mode of operation the EClient.AsyncEConnect field is set to false and the initial handshake is taken to completion immediately after the socket connection is established. TWS will then immediately provides the API client with this information. Important: The IBApi.EWrapper.nextValidID callback is commonly used to indicate that the connection is completed and other messages can be sent from the API client to TWS. There is the possibility that function calls made prior to this time could be dropped by TWS. There is an alternative, deprecated mode of connection used in special cases in which the variable AsyncEconnect is set to true, and the call to startAPI is only called from the connectAck() function. All IB samples use the mode AsyncEconnect = False.",
    "API programs always have at least two threads of execution. One thread is used for sending messages to TWS, and another thread is used for reading returned messages. The second thread uses the API EReader class to read from the socket and add messages to a queue. Everytime a new message is added to the message queue, a notification flag is triggered to let other threads know that there is a message waiting to be processed. In the two-thread design of an API program, the message queue is also processed by the first thread. In a three-thread design, an additional thread is created to perform this task. The thread responsible for the message queue will decode messages and invoke the appropriate functions in EWrapper. The two-threaded design is used in the IB Python sample Program.py and the C++ sample TestCppClient, while the 'Testbed' samples in the other languages use a three-threaded design. Commonly in a Python asynchronous network application, the asyncio module will be used to create a more sequential looking code design. The class which has functionality for reading and parsing raw messages from TWS is the IBApi.EReader class.",
    "For C#, Java, C++, and Visual Basic, we instead maintain a triple thread structure which requires the creation of a reader thread, a queue thread, and then a wrapper thread. The documentation listed here further elaborates on the structure for those languages.  Now it is time to revisit the role of IBApi.EReaderSignal initially introduced in The EClientSocket Class. As mentioned in the previous paragraph, after the EReader thread places a message in the queue, a notification is issued to make known that a message is ready for processing. In the (C++, C#/.NET, Java) APIs, this is done via the IBApi.EReaderSignal object we initiated within the IBApi.EWrapper's implementer.",
    "In Python IB API, the EReader logic is handled in the EClient.connect so the EReader thread is automatically started upon connection. There is no need for user to start the reader. Once the client is connected, a reader thread will be automatically created to handle incoming messages and put the messages into a message queue for further process. User is required to trigger Client::run() below, where the message queue is processed in an infinite loop and the EWrapper call-back functions are automatically triggered. Now it is time to revisit the role of IBApi.EReaderSignal initially introduced in The EClientSocket Class. As mentioned in the previous paragraph, after the EReader thread places a message in the queue, a notification is issued to make known that a message is ready for processing. In the Python API, this is handled automatically by the Queue class.",
    "If you want to connect TWS/ IB Gateway from a remote server, uncheck the 'Allow connection from localhost only' setting. Under the 'Trusted IPs' section, click 'Create' and enter the IP Address detected in 'Accept incoming connection attempt from <IP Address>' into 'Trusted IPs'. 'Trusted IPs' does not accept subnet (e.g. /27, /28). It only accepts single IP Addresses. In the following example, there is a remote computing cluster /27 which has 32 IP Addresses and the remote computing cluster will randomly assign one of the computing nodes to connect to TWS in every connection. To make this happen, every Private IPv4 Address of the subnet are put into the 'Trusted IPs' (You can also exclude the first IP Network Address and the last IP Broadcast Address of the subnet).",
    "For security reasons, by default the API is not configured to automatically accept connection requests from API applications. After a connection attempt, a dialogue will appear in TWS asking the user to manually confirm that a connection can be made: Untrusted IPs attempting to make a connection will be denied without prompting.   To prevent the TWS from asking the end user to accept the connection, it is possible to configure it to automatically accept the connection from a trusted IP address and/or the local machine. This can easily be done via the TWS API settings: ",
    "It is not possible to login to multiple trading applications simultaneously with the same username. However, it is possible to create additional usernames for an account that can be used in different trading applications simultaneously, as long as there is not more than a single trading application logged in with a given username at a time. There are some additional cases in which it is also useful to create additional usernames:  If TWS or IBGW is logged in with a username that is used to login to Client Portal during that session, that application will not be able to automatically reconnect to the server after the next disconnection (such as the server reset). A TWS or IBGW session logged into a paper trading account will not to receive market data if it is sharing data from a live user which is used to login to Client Portal.  If a different username is utilized to login to Client Portal in either of these cases, then it will not affect the TWS/IBGW session. How to add additional usernames in Account Management It is important to note that market data subscriptions are setup independently for each live username.",
    "If there is a problem with the socket connection between TWS and the API client, for instance if TWS suddenly closes, this will trigger an exception in the EReader thread which is reading from the socket. This exception will also occur if an API client attempts to connect with a client ID that is already in use. The socket EOF is handled slightly differently in different API languages. For instance in Java, it is caught and sent to the client application to IBApi::EWrapper::error with errorCode 507: 'Bad Message'. In C# it is caught and sent to IBApi::EWrapper::error with errorCode -1. The client application needs to handle this error message and use it to indicate that an exception has been thrown in the socket connection. Clients can validate a broken connection with the EWrapper.connectionClosed and EClient.isConnected functions.  Once a connection fails for any reason, the EWrapper.connectionClosed function will be called. This function can be used to build reconnection logic or affirm a system disconnect.",
    "The IBApi.EClient.reqAccountSummary method creates a subscription for the account data displayed in the TWS Account Summary window. It is commonly used with multiple-account structures. Introducing broker (IBroker) accounts with more than 50 subaccounts or configured for on-demand account lookup cannot use reqAccountSummary with group='All'. A profile name can be accepted in place of group. See Unification of Groups and Profiles. The TWS offers a comprehensive overview of your account and portfolio through its Account and Portfolio windows. This information can be obtained via the TWS API through three different kind of requests/operations.",
    "The initial invocation of reqAccountSummary will result in a list of all requested values being returned, and then every three minutes those values which have changed will be returned. The update frequency of 3 minutes is the same as the TWS Account Window and cannot be changed.",
    "Requests a specific account's summary. This method will subscribe to the account summary as presented in the TWS' Account Summary tab. Customers can specify the data received by using a specific tags value. See the Account Summary Tags section for available options. Alternatively, many languages offer the import of AccountSummaryTags with a method to retrieve all tag values.  EClient.reqAccountSummary (reqId: int. The unique request identifier. group: String. set to 'All' to return account summary data for all accounts, or set to a specific Advisor Account Group name that has already been created in TWS Global Configuration. tags: String. A comma separated list with the desired tags) Important: only two active summary subscriptions are allowed at a time!",
    "AccountType Identifies the IB account structure NetLiquidation The basis for determining the price of the assets in your account. Total cash value + stock value + options value + bond value TotalCashValue Total cash balance recognized at the time of trade + futures PNL SettledCash Cash recognized at the time of settlement - purchases at the time of trade - commissions - taxes - fees AccruedCash Total accrued cash value of stock, commodities and securities BuyingPower Buying power serves as a measurement of the dollar value of securities that one may purchase in a securities account without depositing additional funds EquityWithLoanValue Forms the basis for determining whether a client has the necessary assets to either initiate or maintain security positions. Cash + stocks + bonds + mutual funds PreviousEquityWithLoanValue Marginable Equity with Loan value as of 16:00 ET the previous day GrossPositionValue The sum of the absolute value of all stock and equity option positions RegTEquity Regulation T equity for universal account RegTMargin Regulation T margin for universal account SMA Special Memorandum Account: Line of credit created when the market value of securities in a Regulation T account increase in value InitMarginReq Initial Margin requirement of whole portfolio MaintMarginReq Maintenance Margin requirement of whole portfolio AvailableFunds This value tells what you have available for trading ExcessLiquidity This value shows your margin cushion, before liquidation Cushion Excess liquidity as a percentage of net liquidation value FullInitMarginReq Initial Margin of whole portfolio with no discounts or intraday credits FullMaintMarginReq Maintenance Margin of whole portfolio with no discounts or intraday credits FullAvailableFunds Available funds of whole portfolio with no discounts or intraday credits FullExcessLiquidity Excess liquidity of whole portfolio with no discounts or intraday credits LookAheadNextChange Time when look-ahead values take effect LookAheadInitMarginReq Initial Margin requirement of whole portfolio as of next period's margin change LookAheadMaintMarginReq Maintenance Margin requirement of whole portfolio as of next period's margin change LookAheadAvailableFunds This value reflects your available funds at the next margin change LookAheadExcessLiquidity This value reflects your excess liquidity at the next margin change HighestSeverity A measure of how close the account is to liquidation DayTradesRemaining The Number of Open/Close trades a user could put on before Pattern Day Trading is detected. A value of '-1' means that the user can put on unlimited day trades. Leverage GrossPositionValue / NetLiquidation $LEDGER Single flag to relay all cash balance tags*, only in base currency. $LEDGER:CURRENCY Single flag to relay all cash balance tags*, only in the specified currency. $LEDGER:ALL Single flag to relay all cash balance tags* in all currencies.",
    "EWrapper.accountSummary (reqId: int. the request's unique identifier. account: String. the account id tag: String. the account's attribute being received. value: String. the account's attribute's value. currency: String. the currency on which the value is expressed.) Receives the account information. This method will receive the account information just as it appears in the TWS' Account Summary Window.  EWrapper.accountSummaryEnd(reqId: String. The request's identifier.) Notifies when all the accounts' information has ben received. Requires TWS 967+ to receive accountSummaryEnd in linked account structures.",
    "Once the subscription to account summary is no longer needed, it can be cancelled via the IBApi::EClient::cancelAccountSummary method:  EClient.cancelAccountSummary (reqId: int. The identifier of the previously performed account request)",
    "The IBApi.EClient.reqAccountUpdates function creates a subscription to the TWS through which account and portfolio information is delivered. This information is the exact same as the one displayed within the TWS' Account Window. Just as with the TWS' Account Window, unless there is a position change this information is updated at a fixed interval of three minutes.  Unrealized and Realized P&L is sent to the API function IBApi.EWrapper.updateAccountValue function after a subscription request is made with IBApi.EClient.reqAccountUpdates. This information corresponds to the data in the TWS Account Window, and has a different source of information, a different update frequency, and different reset schedule than PnL data in the TWS Portfolio Window and associated API functions (below). In particular, the unrealized P&L information shown in the TWS Account Window which is sent to EWrapper.updatePortfolio will update either (1) when a trade for that particular instrument occurs or (2) every 3 minutes. The realized P&L data in the TWS Account Window is reset to 0 once per day. It is important to keep in mind that the P&L data shown in the Account Window and Portfolio Window will sometimes differ because there is a different source of information and a different reset schedule. See Profit & Loss for alternative PnL data",
    "Subscribes to a specific account's information and portfolio. Through this method, a single account's subscription can be started/stopped. As a result from the subscription, the account's information, portfolio and last update time will be received at EWrapper.updateAccountValue, EWrapper.updatePortfolio, EWrapper.updateAccountTime respectively. All account values and positions will be returned initially, and then there will only be updates when there is a change in a position, or to an account value every 3 minutes if it has changed. Only one account can be subscribed at a time. A second subscription request for another account when the previous one is still active will cause the first one to be canceled in favor of the second one.  EClient.reqAccountUpdates (subscribe: bool. Set to true to start the subscription and to false to stop it. acctCode: String. The account id (i.e. U123456) for which the information is requested.)",
    "Resulting account and portfolio information will be delivered via the IBApi.EWrapper.updateAccountValue, IBApi.EWrapper.updatePortfolio, IBApi.EWrapper.updateAccountTime and IBApi.EWrapper.accountDownloadEnd  EWrapper.updateAccountValue (key: String. The value being updated. value: String. up-to-date value currency: String. The currency on which the value is expressed. accountName: String. The account identifier.) Receives the subscribed account's information. Only one account can be subscribed at a time. After the initial callback to updateAccountValue, callbacks only occur for values which have changed. This occurs at the time of a position change, or every 3 minutes at most. This frequency cannot be adjusted. Note: An important key passed back in EWrapper.updateAccountValue after a call to EClient.reqAccountUpdates is a boolean value 'accountReady'. If an accountReady value of false is returned that means that the IB server is in the process of resetting at that moment, i.e. the account is 'not ready'. When this occurs subsequent key values returned to EWrapper.updateAccountValue in the current update can be out of date or incorrect.  EWrapper.updatePortfolio (contract: Contract. The Contract for which a position is held. position: Decimal. The number of positions held. marketPrice: Double. The instrument's unitary price marketValue: Double. Total market value of the instrument. averageCost: Double. Average cost of the overall position. unrealizedPNL: Double. Daily unrealized profit and loss on the position. realizedPNL: Double. Daily realized profit and loss on the position. accountName: String. Account ID for the update.) Receives the subscribed account's portfolio. This function will receive only the portfolio of the subscribed account. After the initial callback to updatePortfolio, callbacks only occur for positions which have changed.  EWrapper.updateAccountTime (timestamp: String. the last update system time.) Receives the last time on which the account was updated.  EWrapper.accountDownloadEnd (account: String. The account identifier.) Notifies when all the account's information has finished.",
    "When requesting reqAccountUpdates customers will receive values corresponding to various account key/value pairs. The table below documents potential responses and what they mean. Account values delivered via IBApi.EWrapper.updateAccountValue can be classified in the following way: Commodities: suffixed by a '-C' Securities: suffixed by a '-S' Totals: no suffix  Key Description AccountCode The account ID number AccountOrGroup 'All' to return account summary data for all accounts, or set to a specific Advisor Account Group name that has already been created in TWS Global Configuration AccountReady If an accountReady value of false is returned that means that the IB server is in the process of resetting at that moment, i.e. the account is 'not ready'. When this occurs subsequent key values returned to EWrapper.updateAccountValue in the current update can be out of date or incorrect. AccountType Identifies the IB account structure AccruedCash Total accrued cash value of stock, commodities and securities AccruedCash-C Reflects the current's month accrued debit and credit interest to date, updated daily in commodity segment AccruedCash-S Reflects the current's month accrued debit and credit interest to date, updated daily in security segment AccruedDividend Total portfolio value of dividends accrued AccruedDividend-C Dividends accrued but not paid in commodity segment AccruedDividend-S Dividends accrued but not paid in security segment AvailableFunds This value tells what you have available for trading AvailableFunds-C Net Liquidation Value - Initial Margin AvailableFunds-S Equity with Loan Value - Initial Margin Billable Total portfolio value of treasury bills Billable-C Value of treasury bills in commodity segment Billable-S Value of treasury bills in security segment BuyingPower Cash Account: Minimum (Equity with Loan Value, Previous Day Equity with Loan Value)-Initial Margin, Standard Margin Account: Minimum (Equity with Loan Value, Previous Day Equity with Loan Value) - Initial Margin *4 CashBalance Cash recognized at the time of trade + futures PNL CorporateBondValue Value of non-Government bonds such as corporate bonds and municipal bonds Currency Open positions are grouped by currency Cushion Excess liquidity as a percentage of net liquidation value DayTradesRemaining Number of Open/Close trades one could do before Pattern Day Trading is detected DayTradesRemainingT+1 Number of Open/Close trades one could do tomorrow before Pattern Day Trading is detected DayTradesRemainingT+2 Number of Open/Close trades one could do two days from today before Pattern Day Trading is detected DayTradesRemainingT+3 Number of Open/Close trades one could do three days from today before Pattern Day Trading is detected DayTradesRemainingT+4 Number of Open/Close trades one could do four days from today before Pattern Day Trading is detected EquityWithLoanValue Forms the basis for determining whether a client has the necessary assets to either initiate or maintain security positions EquityWithLoanValue-C Cash account: Total cash value + commodities option value - futures maintenance margin requirement + minimum (0, futures PNL) Margin account: Total cash value + commodities option value - futures maintenance margin requirement EquityWithLoanValue-S Cash account: Settled Cash Margin Account: Total cash value + stock value + bond value + (non-U.S. & Canada securities options value) ExcessLiquidity This value shows your margin cushion, before liquidation ExcessLiquidity-C Equity with Loan Value - Maintenance Margin ExcessLiquidity-S Net Liquidation Value - Maintenance Margin ExchangeRate The exchange rate of the currency to your base currency FullAvailableFunds Available funds of whole portfolio with no discounts or intraday credits FullAvailableFunds-C Net Liquidation Value - Full Initial Margin FullAvailableFunds-S Equity with Loan Value - Full Initial Margin FullExcessLiquidity Excess liquidity of whole portfolio with no discounts or intraday credits FullExcessLiquidity-C Net Liquidation Value - Full Maintenance Margin FullExcessLiquidity-S Equity with Loan Value - Full Maintenance Margin FullInitMarginReq Initial Margin of whole portfolio with no discounts or intraday credits FullInitMarginReq-C Initial Margin of commodity segment's portfolio with no discounts or intraday credits FullInitMarginReq-S Initial Margin of security segment's portfolio with no discounts or intraday credits FullMaintMarginReq Maintenance Margin of whole portfolio with no discounts or intraday credits FullMaintMarginReq-C Maintenance Margin of commodity segment's portfolio with no discounts or intraday credits FullMaintMarginReq-S Maintenance Margin of security segment's portfolio with no discounts or intraday credits FundValue Value of funds value (money market funds + mutual funds) FutureOptionValue Real-time market-to-market value of futures options FuturesPNL Real-time changes in futures value since last settlement FxCashBalance Cash balance in related IB-UKL account GrossPositionValue Gross Position Value in securities segment GrossPositionValue-S Long Stock Value + Short Stock Value + Long Option Value + Short Option Value IndianStockHaircut Margin rule for IB-IN accounts InitMarginReq Initial Margin requirement of whole portfolio InitMarginReq-C Initial Margin of the commodity segment in base currency InitMarginReq-S Initial Margin of the security segment in base currency IssuerOptionValue Real-time mark-to-market value of Issued Option Leverage-S GrossPositionValue / NetLiquidation in security segment LookAheadNextChange Time when look-ahead values take effect LookAheadAvailableFunds This value reflects your available funds at the next margin change LookAheadAvailableFunds-C Net Liquidation Value - look ahead Initial Margin LookAheadAvailableFunds-S Equity with Loan Value - look ahead Initial Margin LookAheadExcessLiquidity This value reflects your excess liquidity at the next margin change LookAheadExcessLiquidity-C Net Liquidation Value - look ahead Maintenance Margin LookAheadExcessLiquidity-S Equity with Loan Value - look ahead Maintenance Margin LookAheadInitMarginReq Initial margin requirement of whole portfolio as of next period's margin change LookAheadInitMarginReq-C Initial margin requirement as of next period's margin change in the base currency of the account LookAheadInitMarginReq-S Initial margin requirement as of next period's margin change in the base currency of the account LookAheadMaintMarginReq Maintenance margin requirement of whole portfolio as of next period's margin change LookAheadMaintMarginReq-C Maintenance margin requirement as of next period's margin change in the base currency of the account LookAheadMaintMarginReq-S Maintenance margin requirement as of next period's margin change in the base currency of the account MaintMarginReq Maintenance Margin requirement of whole portfolio MaintMarginReq-C Maintenance Margin for the commodity segment MaintMarginReq-S Maintenance Margin for the security segment MoneyMarketFundValue Market value of money market funds excluding mutual funds MutualFundValue Market value of mutual funds excluding money market funds NetDividend The sum of the Dividend Payable/Receivable Values for the securities and commodities segments of the account NetLiquidation The basis for determining the price of the assets in your account NetLiquidation-C Total cash value + futures PNL + commodities options value NetLiquidation-S Total cash value + stock value + securities options value + bond value NetLiquidationByCurrency Net liquidation for individual currencies OptionMarketValue Real-time mark-to-market value of options PASharesValue Personal Account shares value of whole portfolio PASharesValue-C Personal Account shares value in commodity segment PASharesValue-S Personal Account shares value in security segment PostExpirationExcess Total projected 'at expiration' excess liquidity PostExpirationExcess-C Provides a projected 'at expiration' excess liquidity based on the soon-to expire contracts in your portfolio in commodity segment PostExpirationExcess-S Provides a projected 'at expiration' excess liquidity based on the soon-to expire contracts in your portfolio in security segment PostExpirationMargin Total projected 'at expiration' margin PostExpirationMargin-C Provides a projected 'at expiration' margin value based on the soon-to expire contracts in your portfolio in commodity segment PostExpirationMargin-S Provides a projected 'at expiration' margin value based on the soon-to expire contracts in your portfolio in security segment PreviousDayEquityWithLoanValue Marginable Equity with Loan value as of 16:00 ET the previous day in securities segment PreviousDayEquityWithLoanValue-S IMarginable Equity with Loan value as of 16:00 ET the previous day RealCurrency Open positions are grouped by currency RealizedPnL Shows your profit on closed positions, which is the difference between your entry execution cost and exit execution costs, or (execution price + commissions to open the positions) - (execution price + commissions to close the position) RegTEquity Regulation T equity for universal account RegTEquity-S Regulation T equity for security segment RegTMargin Regulation T margin for universal account RegTMargin-S Regulation T margin for security segment SMA Line of credit created when the market value of securities in a Regulation T account increase in value SMA-S Regulation T Special Memorandum Account balance for security segment SegmentTitle Account segment name StockMarketValue Real-time mark-to-market value of stock TBondValue Value of treasury bonds TBillValue Value of treasury bills TotalCashBalance Total Cash Balance including Future PNL TotalCashValue Total cash value of stock, commodities and securities TotalCashValue-C CashBalance in commodity segment TotalCashValue-S CashBalance in security segment TradingType-S Account Type UnrealizedPnL The difference between the current market value of your open positions and the average cost, or Value - Average Cost WarrantValue Value of warrants WhatIfPMEnabled To check projected margin requirements under Portfolio Margin model",
    "Once the subscription to account updates is no longer needed, it can be cancelled by invoking the IBApi.EClient.reqAccountUpdates method while specifying the susbcription flag to be False. Important: only one account at a time can be subscribed at a time. Attempting a second subscription without previously cancelling an active one will not yield any error message although it will override the already subscribed account with the new one. With Financial Advisory (FA) account structures there is an alternative way of specifying the account code such that information is returned for 'All' sub accounts- this is done by appending the letter 'A' to the end of the account number, i.e. reqAccountUpdates(true, 'F123456A')  EClient.reqAccountUpdates (subscribe: bool. Set to true to start the subscription and to false to stop it. acctCode: String. The account id (i.e. U123456) for which the information is requested.)",
    "",
    "The IBApi.EClient.reqAccountUpdatesMulti can be used in any account structure to create simultaneous account value subscriptions from one or multiple accounts and/or models. As with IBApi.EClient.reqAccountUpdates the data returned will match that displayed within the TWS Account Window.  EClient.reqAccountUpdatesMulti (reqId: int. Identifier to label the request account: String. Account values can be requested for a particular account modelCode: String. Values can also be requested for a model ledgerAndNLV: bool. returns light-weight request; only currency positions as opposed to account values and currency positions) Requests account updates for account and/or model. IBApi.EClient.reqAccountUpdatesMulti cannot be used with Account='All' in IBroker accounts with more than 50 subaccounts. A profile name can be accepted in place of group in the account parameter for Financial Advisors",
    "The resulting account and portfolio information will be delivered via the IBApi.EWrapper.accountUpdateMulti and IBApi.EWrapper.accountUpdateMultiEnd  EWrapper.accountUpdateMulti (requestId: int. The id of request. account: String. The account with updates. modelCode: String. The model code with updates. key: String. The name of parameter. value: String. The value of parameter. currency: String. The currency of parameter.) Provides the account updates.  EWrapper.accountUpdateMultiEnd (requestId: int. The id of request) Indicates all the account updates have been transmitted.",
    "EClient.reqAccountUpdatesMulti (reqId: int. Identifier to label the request account: String. Account values can be requested for a particular account modelCode: String. Values can also be requested for a model ledgerAndNLV: bool. Specify false to cancel your subscription.)",
    "It is possible to determine from the API whether an account exists under an account family, and find the family code using the function reqFamilyCodes. For instance, if individual account U112233 is under a financial advisor with account number F445566, if the function reqFamilyCodes is invoked for the user of account U112233, the family code 'F445566A' will be returned, indicating that it belongs within that account family.",
    "EClient.reqFamilyCodes() Requests family codes for an account, for instance if it is a FA, IBroker, or associated account.",
    "EWrapper.familyCodes(familyCodes: FamilyCodes[]. Unique family codes array of accountIds.) Returns array of family codes.",
    "A single user name can handle more than one account. As mentioned in the Connectivity section, the TWS will automatically send a list of managed accounts once the connection is established. The list can also be fetched via the IBApi.EClient.reqManagedAccts method.",
    "EClient.reqManagedAccts() Requests the accounts to which the logged user has access to.",
    "EWrapper.managedAccounts (accountsList: String. A comma-separated string with the managed account ids.) Returns a string of all available accounts for the logged in user. Occurs automatically on initial API client connection.",
    "A limitation of the function IBApi.EClient.reqAccountUpdates is that it can only be used with a single account at a time. To create a subscription for position updates from multiple accounts, the function IBApi.EClient.reqPositions is available. Note: The reqPositions function is not available in Introducing Broker or Financial Advisor master accounts that have very large numbers of subaccounts (> 50) to optimize the performance of TWS/IB Gateway. Instead the function reqPositionsMulti can be used to subscribe to updates from individual subaccounts. Also not available with IBroker accounts configured for on-demand account lookup. After initially invoking reqPositions, information about all positions in all associated accounts will be returned, followed by the IBApi::EWrapper::positionEnd callback. Thereafter, when a position has changed an update will be returned to the IBApi::EWrapper::position function. To cancel a reqPositions subscription, invoke IBApi::EClient::cancelPositions.",
    "EClient.reqPositions() Subscribes to position updates for all accessible accounts. All positions sent initially, and then only updates as positions change.",
    "EWrapper.position(account: String. The account holding the position. contract: Contract. The position's Contract pos: decimal. The number of positions held. avgCost the average cost of the position. avgCost: double. The total average cost of all trades for the currently held position.) Provides the portfolio's open positions. After the initial callback (only) of all positions, the IBApi.EWrapper.positionEnd function will be triggered. For futures, the exchange field will not be populated in the position callback as some futures trade on multiple exchanges  Ewrapper.positionEnd() Indicates all the positions have been transmitted. Only returned after the initial callback of EWrapper.position.",
    "EClient.cancelPositions() Cancels a previous position subscription request made with EClient.reqPositions().",
    "The function IBApi.EClient.reqPositionsMulti can be used with any account structure to subscribe to positions updates for multiple accounts and/or models. The account and model parameters are optional if there are not multiple accounts or models available. It is more efficient to use this function for a specific subset of accounts than using IBApi.EClient.reqPositions. A profile name can be accepted in place of group in the account parameter.",
    "EClient.reqPositionsMulti(requestId: int. Request's identifier. account: String. If an account Id is provided, only the account's positions belonging to the specified model will be delivered. modelCode: String. The code of the model's positions we are interested in.) Requests position subscription for account and/or model Initially all positions are returned, and then updates are returned for any position changes in real time.",
    "EWrapper.positionMulti(requestId: int. The id of request account: String. The account holding the position. modelCode: String. The model code holding the position. contract: Contract. The position's Contract pos: decimal. The number of positions held. avgCost: double. The average cost of the position.) Provides the portfolio's open positions.  EWrapper.positionMultiEnd(requestId: int. The id of request) Indicates all the positions have been transmitted.",
    "EClient.cancelPositionsMulti (requestId: int. The identifier of the request to be canceled.) Cancels positions request for account and/or model.",
    "Requests can be made to receive real time updates about the daily P&L and unrealized P&L for an account, or for individual positions. Financial Advisors can also request P&L figures for 'All' subaccounts, or for a portfolio model. This is further extended to include realized P&L information at the account or individual position level. The P&L API functions demonstrated below return the data which is displayed in the TWS Portfolio Window in current versions of TWS. As such, the P&L values are calculated based on the reset schedule specified in TWS Global Configuration (by default an instrument-specific reset schedule) and this setting affects values sent to the associated API functions as well. Also in TWS, P&L data from virtual forex positions will be included in the account P&L if and only if the Virtual Fx section of the Account Window is expanded. See Account Updates for alternative PnL data.",
    "Subscribe using the IBApi::EClient::reqPnLSingle function Cannot be used with IBroker accounts configured for on-demand lookup with account = 'All'. Currently updates are returned to IBApi.EWrapper.pnlSingle approximately once per second*. If a P&L subscription request is made for an invalid conId or contract not in the account, there will not be a response. As elsewhere in the API, a max double value will indicate an 'unset' value. This corresponds to an empty cell in TWS. Introducing broker accounts without a large number of subaccounts (<50) can receive aggregate data by specifying the account as 'All'. *Cannot be used with IBroker accounts configured for on-demand lookup with account = 'All' *subject to change in the future.  EClient.reqPnLSingle (reqId: int. Request identifier for to track the data. account: String. Account in which position exists modelCode: String. Model in which position exists conId: int. Contract ID (conId) of contract to receive daily PnL updates for. Note: does not return message if invalid conId is entered) Requests real time updates for daily PnL of individual positions.",
    "EWrapper.pnlSingle (reqId: int. Request identifier used for tracking. pos: decimal. Current size of the position dailyPnL: double. DailyPnL for the position unrealizedPnL: double. Total unrealized PnL for the position (since inception) updating in real time realizedPnL: double. Total realized PnL for the position (since inception) updating in real time value: double. Current market value of the position.) Receives real time updates for single position daily PnL values",
    "EClient.cancelPnLSingle (reqId: int. Request identifier to cancel the P&L subscription for.) Cancels real time subscription for a positions daily PnL information.",
    "Subscribe using the IBApi::EClient::reqPnL function. Updates are sent to IBApi.EWrapper.pnl. Introducing broker accounts with less than 50 subaccounts can receive aggregate PnL for all subaccounts by specifying 'All' as the account code. With requests for advisor accounts with many subaccounts and/or positions can take several seconds for aggregated P&L to be computed and returned. For account P&L data the TWS setting 'Prepare portfolio PnL data when downloading positions' must be checked.  EClient.reqPnL (reqId: int. Request ID to track the data. account: String. Account for which to receive PnL updates modelCode: String. Specify to request PnL updates for a specific model.) Creates subscription for real time daily PnL and unrealized PnL updates.",
    "EWrapper.pnl (reqId: int. Request identifier for tracking data. dailyPnL: double. DailyPnL updates for the account in real time unrealizedPnL: double. Total Unrealized PnL updates for the account in real time realizedPnL: double. Total Realized PnL updates for the account in real time)",
    "EClient.cancelPnL (reqId: int. Request identifier for tracking data.) Cancels subscription for real time updated daily PnL params reqId",
    "This function will return White Branding ID associated with the user. Please note, that nothing will be returned if requesting username is not associated with any White Branding entity.",
    "EClient.reqUserInfo(reqId: int. Request ID)",
    "EWrapper.userInfo (reqId: int. Identifier for the given request. whiteBrandingId: String. Identifier for the white branded entity.)",
    "From time to time, IB sends out important News Bulletins, which can be accessed via the TWS API through the EClient.reqNewsBulletins. Bulletins are delivered via IBApi.EWrapper.updateNewsBulletin whenever there is a new bulletin. In order to stop receiving bulletins you need to cancel the subscription.",
    "EClient.reqNewsBulletins (allMessages: bool. If set to true, will return all the existing bulletins for the current day, set to false to receive only the new bulletins.) Subscribes to IB's News Bulletins.",
    "EWrapper.updateNewsBulletin (msgId: int. The bulletin's identifier. msgType: int. 1: Regular news bulletin; 2: Exchange no longer available for trading; 3: Exchange is available for trading. message: String. The news bulletin context. origExchange: String. The exchange where the message comes from.) Provides IB's bulletins",
    "EClient.cancelNewsBulletin () Cancels IB's news bulletin subscription.",
    "An IBApi.Contract object represents trading instruments such as a stocks, futures or options. Every time a new request that requires a contract (i.e. market data, order placing, etc.) is sent to TWS, the platform will try to match the provided contract object with a single candidate.",
    "The Contract object is an object used throughout the TWS API to define the target of your requests. Contract objects will be used for market data, portfolios, orders, executions, and even some news request. This is the staple structure used for all of the TWS API. In all contracts, the minimum viable structure requires at least a conId and exchange; or a symbol, secType, exchange, primaryExchange, and currency. Derivatives will require additional fields, such as lastTradeDateOrExpiration, tradingClass, multiplier, strikes, and so on. The values to the right represent the most common Contract values to pass for complete contracts. For a more comprehensive list of contract structures, please see the Contracts page.  Contract() ConId: int. Identifier to specify an exact contract. Symbol: String. Ticker symbol of the underlying instrument. SecType: String. Security type of the traded instrument. Exchange: String. Exchange for which data or trades should be routed. PrimaryExchange: String. Primary listing exchange of the instrument. Currency: String. Base currency the instrument is traded on. LastTradeDateOrContractMonth: String. For derivatives, the expiration date of the contract. Strike: double. For derivatives, the strike price of the instrument. Right: String. For derivatives, the right (P/C) of the instrument. TradingClass: String. For derivatives, the trading class of the instrument. May be used to indicate between a monthly or a weekly contract.  Given additional structures for contracts are ever evolving, it is recommended to review the relevant Contract class in your programming language for a comprehensive review of what fields are available.  Contract Class Reference",
    "If there is more than one contract matching the same description, TWS will return an error notifying you there is an ambiguity. In these cases the TWS needs further information to narrow down the list of contracts matching the provided description to a single element. The best way of finding a contract's description is within TWS itself. Within TWS, you can easily check a contract's description either by double clicking it or through the Financial Instrument Info -> Description menu, which you access by right-clicking a contract in TWS:   The description will then appear: Note: you can see the extended contract details by choosing Contract Info -> Details. This option will open a web page showing all available information on the contract.   Whenever a contract description is provided via the TWS API, the TWS will try to match the given description to a single contract. This mechanism allows for great flexibility since it gives the possibility to define the same contract in multiple ways. The simplest way to define a contract is by providing its symbol, security type, currency, exchange, and primary exchange. The vast majority of stocks, CFDs, Indexes or FX pairs can be uniquely defined through these four attributes. More complex contracts such as options and futures require some extra information due to their nature. Below are several examples for different types of instruments.",
    "Complete details about a contract in IB's database can be retrieved using the function IBApi.EClient.reqContractDetails. This includes information about a contract's conID, symbol, local symbol, currency, etc. which is returned in a IBApi.ContractDetails object. reqContractDetails takes as an argument a Contract object which may uniquely match one contract, and unlike other API functions it can also take a Contract object which matches multiple contracts in IB's database. When there are multiple matches, they will each be returned individually to the function IBApi::EWrapper::contractDetails. Request for Bond details will be returned to IBApi::EWrapper::bondContractDetails instead. Because of bond market data license restrictions, there are only a few available fields to be returned in a bond contract description, namely the minTick, exchange, and short name. Note: Invoking reqContractDetails with a Contract object which has currency = USD will only return US contracts, even if there are non-US instruments which have the USD currency.  Another function of IBApi::EClient::reqContractDetails is to request the trading schedule of an instrument via the TradingHours and LiquidHours fields. The corresponding timeZoneId field will then indicate the time zone for the trading schedule of the instrument. TWS sends these timeZoneId strings to the API from the schedule responses as-is, and may not exactly match the time zones displayed in the TWS contract description. Possible timeZoneId values are: Europe/Riga Australia/NSW Europe/Warsaw US/Pacific Europe/Tallinn Japan US/Eastern Europe/London Africa/Johannesburg Israel Europe/Vilnius MET Europe/Helsinki US/Central Europe/Budapest Asia/Calcutta Hongkong Europe/Moscow GMT",
    "EClient.reqContractDetails (reqId: int. Request identifier to track data. contract: ContractDetails. the contract used as sample to query the available contracts. Typically contains at least the Symbol, SecType, Exchange, and Currency.) Upon requesting EClient.reqContractDetails, all contracts matching the requested Contract Object will be returned to EWrapper.contractDetails or EWrapper.bondContractDetails.",
    "EWrapper.contractDetails (reqId: int. Request identifier to track data. contract: ContractDetails. Contains the full contract object contents including all information about a specific traded instrument.) Receives the full contract's definitions This method will return all contracts matching the requested via EClientSocket::reqContractDetails. For example, one can obtain the whole option chain with it.  EWrapper.contractDetailsEnd (reqId: int. Request identifier to track data.) After all contracts matching the request were returned, this method will mark the end of their reception.",
    "EWrapper.bondContractDetails (reqId: int. Request identifier to track data. contract: ContractDetails. Contains the full contract object contents including all information about a specific traded instrument.) Delivers the Bond contract data after this has been requested via reqContractDetails.",
    "The option chain for a given security can be returned using the function EClient.reqContractDetails. If an option contract is incompletely defined (for instance with the strike undefined) and used as an argument to EClient.reqContractDetails, a list of all matching option contracts will be returned. One limitation of this technique is that the return of option chains will be throttled and take a longer time the more ambiguous the contract definition. The function EClient.reqSecDefOptParams was introduced that does not have the throttling limitation. It is not recommended to use EClient.reqContractDetails to receive complete option chains on an underlying, e.g. all combinations of strikes/rights/expiries. For very large option chains returned from EClient.reqContractDetails, unchecking the setting in TWS Global Configuration at API -> Settings -> 'Expose entire trading schedule to the API' will decrease the amount of data returned per option and help to return the contract list more quickly. EClient.reqSecDefOptParams returns a list of expiries and a list of strike prices. In some cases, it is possible there are combinations of strike and expiry that would not give a valid option contract.",
    "EClient.reqSecDefOptParams (reqId: int. The ID chosen for the request underlyingSymbol: String. Contract symbol of the underlying. futFopExchange: String. The exchange on which the returned options are trading. Can be set to the empty string '' for all exchanges. underlyingSecType: String. The type of the underlying security, i.e. STK underlyingConId: int. The contract ID of the underlying security.) Requests security definition option parameters for viewing a contract's option chain.",
    "EWrapper.securityDefinitionOptionParameter (reqId: int. ID of the request initiating the callback. underlyingConId: int. The conID of the underlying security. tradingClass: String. The option trading class. multiplier: String. The option multiplier. exchange: String. Exchange for which the derivative is hosted. expirations: HashSet. A list of the expiries for the options of this underlying on this exchange. strikes: HashSet. A list of the possible strikes for options of this underlying on this exchange.) Returns the option chain for an underlying on an exchange specified in reqSecDefOptParams There will be multiple callbacks to securityDefinitionOptionParameter if multiple exchanges are specified in reqSecDefOptParams",
    "The function IBApi::EClient::reqMatchingSymbols is available to search for stock contracts. The input can be either the first few letters of the ticker symbol, or for longer strings, a character sequence matching a word in the security name. For instance to search for the stock symbol 'IBKR', the input 'I' or 'IB' can be used, as well as the word 'Interactive'. Up to 16 matching results are returned. There must be an interval of at least 1 second between successive calls to reqMatchingSymbols Matching stock contracts are returned to IBApi::EWrapper::symbolSamples with information about types of derivative contracts which exist (warrants, options, dutch warrants, futures).",
    "EClient.reqMatchingSymbols (reqId: int. Request identifier used to track data. pattern: String. Either start of ticker symbol or (for larger strings) company name.) Requests matching stock symbols.",
    "EWrapper.symbolSamples (reqID: int. Request identifier used to track data. contractDescription: ContractDescription[]. Provide an array of contract objects matching the requested descriptoin.) Returns array of sample contract descriptions",
    "Forecast and Event Contracts enable investors to trade their opinion on specific yes-or-no questions on economic indicators such as the Consumer Price Index and the Fed Funds Rate, climate indicators including temperatures and atmospheric CO2, key futures markets including energy, metals, and equity indexes.",
    "Interactive Brokers models Event Contract instruments on options (for ForecastEx products) and futures options (for CME Group products). Event Contracts can generally be thought of as options products in the TWS API, and their discovery workflow follows a familiar options-like sequence. This guide will make analogies to conventional index options for both ForecastEx and CME Group products.",
    "Forecast Contracts let you trade your view on the outcomes of various economic, government and environmental indicators, elections and tight races. Each contract pays USD 1.00 at expiry if expiring in-the-money, and your max profit per contract is USD 1.00 minus the premium you paid to purchase the contract. Forecast Contracts are quoted in USD 0.01 increments. ForecastEx Website: https://forecastex.com/",
    "CME event contracts let you trade your view on whether the price of key futures markets will move up or down by the end of each day's trading session. Each contract pays USD 100.00 at expiry if expiring in-the-money, and your max profit per contract is USD 100.00 minus the premium you paid to purchase the contract (plus fees and commissions). CME event contracts are quoted in USD 1.00 increments. ForecastEx Website: https://www.cmegroup.com/activetrader/event-contracts.html",
    "IB's Event Contract instrument records use the following fields inherited from the options model: An underlier, which may or may not be artificial: For CME products, a tradable Event Contract will have the relevant CME future as its underlier. Therefore, the security type of the CME contract will be a futures option, or 'FOP'. For ForecastEx products, IB has generated an artificial underlying index which serves as a container for related Event Contracts in the same product class. These artificial indices do not have any associated reference values and are purely an artifact of the option instrument model used to represent these Event Contracts. However, these artificial underlying indices can be used to search for groups of related Event Contracts, just as with index options. Therefore, the security type of ForecastEx products are always options, or 'OPT'. An Exchange value will reflect the listing exchange of the given Event contract. ForecastEx contracts will always use 'FORECASTX' as the exchange value. Note the value does not include the final 'E' in 'ForecastEx'. A CME product may use 'CBOT', 'CME', 'COMEX', or 'NYMEX' depending on the contract's listing. A Symbol value which matches the symbol of the underlier, and which reflects the issuer's product code. A Trading Class which also reflects the issuer's product code for the instrument, and in the case of CME Group products, is used to differentiate Event Contracts from CME futures options. Note that many CME Group Event Contracts, which resolve against CME Group futures, are assigned a Trading Class prefixed with 'EC' and followed by the symbol of the relevant futures product, to avoid naming collisions with other derivatives (i.e., proper futures options listed on the same future). A Put or Call (Right) value, where Call = Yes and Put = No. Note that ForecastEx instruments do not permit Sell orders. Instead, ForecastEx positions are flattened or reduced by buying the opposing contract. CME Group Event Contracts permit both buying and selling. An artificial Contract Month value, again used primarily for searching and filtering available instruments. Most Event Contract products do not follow monthly series as is common with index or equity options, so these Contract Month values are typically not a meaningful attribute of the instrument. Rather, they permit filtering of instruments by calendar month. Requesting Contract Details for a given instrument will return a 'realExpirationDate', which will correspond with the same values printed in the ForecastTrader page. A Last Trade Date, Time, and Millisecond values, which together indicate precisely when trading in an Event Contract will cease, just as with index options. A Strike value, which is the numerical value on which the event resolution hinges. Though numerical, this value need not represent a price. An instrument description (or 'local symbol') in the form 'PRODUCT EXPIRATION STRIKE RIGHT', where: PRODUCT is the issuer's product identifier EXPIRATION is the date of the instrument's resolution in the form MmmDD'YY, e.g., 'Sep26'24' STRIKE is the numerical value that determines the contract's moneyness at expiration RIGHT is a value YES or NO",
    "Given the information above, we can establish a working example against the Global Carbon Dioxide Emissions contract on the ForecastTrader Website. Reviewing the page to the right, we can see all of the contract details necessary to get started. Above the chart next to the contract name, we can see the Symbol, 'GCE'. On the left side of the web page, we can find the contract's expiration date, June 30, 2026. Equally important is the value on the right, 'Market closes in 287 days.' The bolded excess on the top, 40,5000, indicates our strike price. This can be corroborated by the table on the left which acts like an Option Chain table users may be more familiar with. While not explicitly stated in the web page, there are several details that may be inferred based on the information present: All ForecastEx contracts use the 'OPT' security type, as mentioned in the Contract Definition & Discovery section above. The ForecastEx exchange value is always listed as 'FORECASTX'. All currently offered Event Contracts are hosted in the United States of America, and therefore will always use 'USD' as their currency value. 'Yes' or 'No' contracts are based on option rights, 'Call' and 'Put' respectively.   In order to request our specific contract, we will need to focus on the 'Market closes in 287 days' statement. This value indicates the last day the contract may be traded. This document is written on the 19th of March, 2025. That is the 78th day of the calendar year. Given the context that this is day 78, and the market will close in 287 days, the contract's last trade date would then be the 365th day of the year, or December 31st, 2025. Given the TWS API date standards, this will be written as 20251231.  This information can now be distilled into a standard TWS API contract definition: Symbol: 'GCE' SecType: 'OPT' Exchange: 'FORECASTX' Currency: 'USD' LastTradeDateOrContractMonth: '20251231' Right: 'C' Strike: 40500",
    "Requesting market data for event contracts will follow the same request structure as for any other security type. Noted in our Contract Definition & Discovery section, ForecastEx instruments do not support buying and selling. Therefore, 'BID' and 'ASK' values will not correlate to buy and sell values, but the 'Highest Bid' and 'Buy Yes Now at' prices for the Bid and Ask respectively. Because 'BID' and 'ASK' do not correctly directly to Buying and Selling, historical 'Trades' nor real-time 'Last' prices will not be available.",
    "Order Submission for Event Contracts function the same as any other instrument offered at Interactive Brokers. There are some unique order behaviors for both CME Group and ForecastEx contracts: Event Contracts only support Limit Orders Event Contracts only support a Time in Force of Day, Good till Canceled, or Immediate-Or-Cancel. Event Contracts do not support Cash Quantity in the TWS API. Orders must be submitted as whole-share values. CME Group instruments can be bought and sold and function as normal futures options. ForecastEx instruments cannot be sold, only bought. To exit or reduce a position, one must buy the opposing Event Contract, and IB will net the opposing positions together automatically. Event Contracts cannot be sold short.",
    "Reviewing the same material as our Contract Example, we have all the tools needed to submit our order with some additional context available in the Order Ticket, featured on the right. We are already aware that: ForecastEx contracts are always 'BUY' orders. Event Contracts only support 'LMT' as the Order Type. This leaves us to decide the quantity, limit price, and time-in-force values. We can set our limit price based on the values shown in the Order Ticket, or base the value on the Bid and Ask Price from our Requested Market Data.   Given the information above, we are able to create a full order ticket. Action: 'BUY' TotalQuantity: 1000 OrderType: 'LMT' LmtPrice: 0.57 Tif: 'DAY'",
    "Event Contracts fundamentally behave like Options or Futures Options. As a result, instrument rules, position information, and instrument-specific behavior will follow the same presentation in the Trader Workstation as those other instruments. Market Scanners are not currently available to research Event Contracts. Users will need to discover Event Contract symbols through Interactive Brokers' ForecastTrader.",
    "When a client application sends a message to TWS which requires a response which has an expected response (i.e. placing an order, requesting market data, subscribing to account updates, etc.), TWS will almost either always 1) respond with the relevant data or 2) send an error message to EWrapper.error(). Exceptions when no response can occur: Also, if a request is made prior to full establishment of connection (denoted by a returned 2104 or 2106 error code 'Data Server is Ok'), there may not be a response from the request. Error messages sent by the TWS are handled by the EWrapper.error() method. The EWrapper.error() event contains the originating request Id (or the orderId in case the error was raised when placing an order), a numeric error code and a brief description. It is important to keep in mind that this function is used for true error messages as well as notifications that do not mean anything is wrong. API Error Messages when TWS is not set to the English Language Currently on the Windows platform, error messages are sent using Latin1 encoding. If TWS is launched in a non-Western language, it is recommended to enable the setting at Global Configuration -> API -> Settings to 'Show API error messages in English'.",
    "The TWS uses the EWrapper.error method not only to deliver errors but also warnings or informative messages. This is done mostly for simplicity's sake. Below is a table with all the messages which can be sent by the TWS/IB Gateway. All messages delivered by the TWS are usually accompanied by a brief but meaningful description pointing in the direction of the problem. Remember that the TWS API simply connects to a running TWS/IB Gateway which most of times will be running on your local network if not in the same host as the client application. It is your responsibility to provide reliable connectivity between the TWS and your client application.",
    "The messages in the table below are not a consequence of any action performed by the client application. They are notifications about the connectivity status between the TWS and our servers. Your client application must pay special attention to them and handle the situation accordingly. You are very likely to lose connectivity to our servers at least once a day due to our daily server maintenance downtime as clearly detailed in our Current System Status page. Note that after the system reset, the TWS/IB Gateway will automatically reconnect to our servers and you can resume your operations normally. Note: During a reset period, there may be an interruption in the ability to log in or manage orders. Existing orders (native types) will operate normally although execution reports and simulated orders will be delayed until the reset is complete. It is not recommended to operate during the scheduled reset times.  Code TWS message Additional notes 1100 Connectivity between IB and the TWS has been lost. Your TWS/IB Gateway has been disconnected from IB servers. This can occur because of an internet connectivity issue, a nightly reset of the IB servers, or a competing session. 1101 Connectivity between IB and TWS has been restored- data lost.* The TWS/IB Gateway has successfully reconnected to IB's servers. Your market data requests have been lost and need to be re-submitted. 1102 Connectivity between IB and TWS has been restored- data maintained. The TWS/IB Gateway has successfully reconnected to IB's servers. Your market data requests have been recovered and there is no need for you to re-submit them. 1300 TWS socket port has been reset and this connection is being dropped. Please reconnect on the new port - <port_num> The port number in the TWS/IBG settings has been changed during an active API connection.",
    "Error codes in different ranges have different indications. Code TWS message Additional notes 100 Max rate of messages per second has been exceeded. The client application has exceeded the rate of 50 messages/second. The TWS will likely disconnect the client application after this message. 101 Max number of tickers has been reached. ''The current number of active market data subscriptions in TWS and the API altogether has been exceeded. This number is calculated based on a formula which is based on the equity, commissions, and quote booster packs in an account. Active lines can be checked in Tws using the Ctrl-Alt-= combination'' 102 Duplicate ticker ID. A market data request used a ticker ID which is already in use by an active request. 103 Duplicate order ID. An order was placed with an order ID that is less than or equal to the order ID of a previous order from this client 104 Can't modify a filled order. An attempt was made to modify an order which has already been filled by the system. 105 Order being modified does not match original order. An order was placed with an order ID of a currently open order but basic parameters differed (aside from quantity or price fields) 106 Can't transmit order ID: Order ID may not be transmitted. This is most often caused by an invalid order type or order formatting. 107 Cannot transmit incomplete order. Order is missing a required field. 109 Price is out of the range defined by the Percentage setting at order defaults frame. The order will not be transmitted. Price entered is outside the range of prices set in TWS or IB Gateway Order Precautionary Settings 110 The price does not conform to the minimum price variation for this contract. An entered price field has more digits of precision than is allowed for this particular contract. Minimum increment information can be found on the IB Contracts and Securities Search page. 111 The TIF (Tif type) and the order type are incompatible. The time in force specified cannot be used with this order type. Please refer to order tickets in TWS for allowable combinations. 113 The Tif option should be set to DAY for MOC and LOC orders. Market-on-close or Limit-on-close orders should be sent with time in force set to 'DAY' 114 Relative orders are valid for stocks only. This error is deprecated. 115 ''Relative orders for US stocks can only be submitted to SMART, SMART_ECN, INSTINET, or PRIMEX.'' This error is deprecated. 116 The order cannot be transmitted to a dead exchange. Exchange field is invalid. 117 The block order size must be at least 50. Caused by a block order submission using a quantity less than 50. 118 VWAP orders must be routed through the VWAP exchange. 119 Only VWAP orders may be placed on the VWAP exchange. ''When an order is routed to the VWAP exchange, the type of the order must be defined as 'VWAP'.'' 120 It is too late to place a VWAP order for today. The cutoff has passed for the current day to place VWAP orders. 121 'Invalid BD flag for the order. Check ''Destination'' and ''BD'' flag.' This error is deprecated. 122 No request tag has been found for order: Caused when request encoding to socket improperly formed. 123 No record is available for conid: The specified contract ID cannot be found. This error is deprecated. 124 No market rule is available for conid: Returned in the event a market rule is not applied to a given contract identifier. May be caused when interacting with a non-tradeable instrument such as an Index. 125 Buy price must be the same as the best asking price. Caused by a Buy order exceptionally above the Best Ask price. Please request market data to identify the NBO. 126 Sell price must be the same as the best bidding price. Caused by a Sell order exceptionally below the Best Bid price. Please request market data to identify the NBB. 129 VWAP orders must be submitted at least three minutes before the start time. The start time specified in the VWAP order is less than 3 minutes after when it is placed. 131 ''The sweep-to-fill flag and display size are only valid for US stocks routed through SMART, and will be ignored.'' Sweep-to-fill used on an unsupported order type. 132 This order cannot be transmitted without a clearing account. Order parameters do not include a valid clearing account. 133 Submit new order failed. Failure in order submission. May be caused by order parameters or network connectivity. 134 Modify order failed. Unable to modify an existing order. The order may have already been executed or cancelled. Please request open orders to verify current order status. 135 Can't find order with ID = An attempt was made to cancel an order not currently in the system. 136 This order cannot be cancelled. ''An attempt was made to cancel an order than cannot be cancelled, for instance because'' 137 VWAP orders can only be cancelled up to three minutes before the start time. VWAP order cancellation taking place within three minutes of submission. 138 Could not parse ticker request: 'Ticker symbol cannot be parsed, likely due to the inclusion of invalid symbols or content.' 139 Parsing error: Error in command syntax generated parsing error. 140 The size value should be an integer: The size field in the Order class has an invalid type. 141 The price value should be a double: A price field in the Order type has an invalid type. 142 Institutional customer account does not have account info Institutional account structure is not including account details in order submission. 143 Requested ID is not an integer number. The IDs used in API requests must be integer values. 144 ''Order size does not match total share allocation. To adjust the share allocation, right-click on the order and select Modify > Share Allocation '' 145 Error in validating entry fields - An error occurred with the syntax of a request field. 146 Invalid trigger method. The trigger method specified for a method such as stop or trail stop was not one of the allowable methods. 147 The conditional contract info is incomplete. 148 'Conditional submission of orders is supported for Limit, Market, MidPrice, Relative and Snap order types only. Conditional cancelation of orders is supported for Limit and MidPrice order types only.' 151 This order cannot be transmitted without a user name. In DDE the user name is a required field in the place order command. 152 'The ''hidden'' order attribute may not be specified for this order.' The order in question cannot be placed as a hidden order. See- https://www.interactivebrokers.com/en/index.php?f=596 153 EFPs can only be limit orders. This error is deprecated. 154 Orders cannot be transmitted for a halted security. A security was halted for trading when an order was placed. 155 A sizeOp order must have a user name and account. This error is deprecated. 156 A SizeOp order must go to IBSX This error is deprecated. 157 An order can be EITHER Iceberg or Discretionary. Please remove either the Discretionary amount or the Display size. In the Order class extended attributes the fields 'Iceberg' and 'Discretionary' cannot 158 You must specify an offset amount or a percent offset value. TRAIL and TRAIL STOP orders must have an absolute offset amount or offset percentage specified. 159 The percent offset value must be between 0% and 100%. A percent offset value was specified outside the allowable range of 0% and 100%. 160 The size value cannot be zero. The size of an order must be a positive quantity. 161 Cancel attempted when order is not in a cancellable state. Order permId = An attempt was made to cancel an order not active at the time. 162 Historical market data Service error message. 163 The price specified would violate the percentage constraint specified in the default order settings. The order price entered is outside the allowable range specified in the Order Precautionary Settings of TWS or IB Gateway 164 There is no market data to check price percent violations. No market data is available for the specified contract to determine whether the specified price is outside the price percent precautionary order setting. 165 Historical market Data Service query message. ''There was an issue with a historical data request, such is no such data in IB's database. Note this message is not specific to the API.'' 166 HMDS Expired Contract Violation. Historical data is not available for the specified expired contract. 167 VWAP order time must be in the future. The start time of a VWAP order has already passed. 168 Discretionary amount does not conform to the minimum price variation for this contract. The discretionary field is specified with a number of degrees of precision higher than what is allowed for a specified contract. 200 No security definition has been found for the request. ''The specified contract does not match any in IB's database, usually because of an incorrect or missing parameter.'' 200 The contract description specified for is ambiguous Ambiguity may occur when the contract definition provided is not unique. 200 ''For some stocks that has the same Symbol, Currency and Exchange, you need to specify the IBApi.Contract.PrimaryExch attribute to avoid ambiguity. Please refer to a sample stock contract here.'' 200 ''For futures that has multiple multipliers for the same expiration, You need to specify the IBApi.Contract.Multiplier attribute to avoid ambiguity. Please refer to a sample futures contract here.'' 201 Order rejected - Reason: An attempted order was rejected by the IB servers. See Order Placement Considerations for additional information/considerations for these errors. 202 Order cancelled - Reason: An active order on the IB server was cancelled. See Order Placement Considerations for additional information/considerations for these errors. 203 The security is not available or allowed for this account. The specified security has a trading restriction with a specific account. 203 The contract description specified for %S is ambiguous; you must specify the currency. The contract definition is incomplete. The currency must be included. 300 Can't find EId with ticker Id: An attempt was made to cancel market data for a ticker ID that was not associated with a current subscription. With the DDE API this occurs by clearing the spreadsheet cell. 301 Invalid ticker action: 302 Error parsing stop ticker string: 303 Invalid action: An action field was specified that is not available for the account. For most accounts this is only BUY or SELL. Some institutional accounts also have the options SSHORT or SLONG available. 304 Invalid account value action: 305 ''Request parsing error, the request has been ignored.'' The syntax of a DDE request is invalid. 306 Error processing DDE request: An issue with a DDE request prevented it from processing. 307 Invalid request topic: The 'topic' field in a DDE request is invalid. 308 Unable to create the 'API' page in TWS as the maximum number of pages already exists. ''An order placed from the API will automatically open a new page in classic TWS, however there are already the maximum number of pages open.'' 309 ''Max number (3) of market depth requests has been reached. Note: TWS currently limits users to a maximum of 3 distinct market depth requests. This same restriction applies to API clients, however API clients may make multiple market depth requests for the same security.'' 'Maximum market depth requests exceeded. Please see our Market Data Line Documentation for more information.' 310 Can't find the subscribed market depth with tickerId: An attempt was made to cancel market depth for a ticker not currently active. 311 The origin is invalid. The origin field specified in the Order class is invalid. 312 The combo details are invalid. Combination contract specified has invalid parameters. 313 The combo details for leg ' are invalid. A combo leg was not defined correctly. 314 Security type 'BAG' requires combo leg details. When specifying security type as 'BAG' make sure to also add combo legs with details. 315 Stock combo legs are restricted to SMART order routing. Make sure to specify 'SMART' as an exchange when using stock combo contracts. 316 Market depth data has been HALTED. Please re-subscribe. You need to re-subscribe to start receiving market depth data again. 317 Market depth data has been RESET. Please empty deep book contents before applying any new entries. 319 Invalid log level Make sure that you are setting a log level to a value in range of 1 to 5. 320 Server error when reading an API client request. 321 Server error when validating an API client request. 322 Server error when processing an API client request. 323 Server error: cause - s 324 Server error when reading a DDE client request (missing information). Make sure that you have specified all the needed information for your request. 325 Discretionary orders are not supported for this combination of exchange and order type. Make sure that you are specifying a valid combination of exchange and order type for the discretionary order. 326 Unable to connect as the client id is already in use. Retry with a unique client id. Another client application is already connected with the specified client id. 327 Only API connections with clientId set to 0 can set the auto bind TWS orders property. 328 Trailing stop orders can be attached to limit or stop-limit orders only. Indicates attempt to attach trail stop to order which was not a limit or stop-limit. 329 Order modify failed. Cannot change to the new order type. You are not allowed to modify initial order type to the specific order type you are using. 330 Only FA or STL customers can request managed accounts list. Make sure that your account type is either FA or STL. 331 Internal error. FA or STL does not have any managed accounts. You do not have any managed accounts. 332 The account codes for the order profile are invalid. You need to check that the account codes you specified for your request are valid. 333 Invalid share allocation syntax. 334 Invalid Good Till Date order Check you order settings. 335 Invalid delta: The delta must be between 0 and 100. 336 ''The time or time zone is invalid. The correct format is hh:mm:ss xxx where xxx is an optionally specified time-zone. E.g.: 15:59:00 EST Note that there is a space between the time and the time zone. If no time zone is specified, local time is assumed.'' 337 ''The date, time, or time-zone entered is invalid. The correct format is yyyymmdd hh:mm:ss xxx where yyyymmdd and xxx are optional. E.g.: 20031126 15:59:00 ESTNote that there is a space between the date and time, and between the time and time-zone.'' 338 Good After Time orders are currently disabled on this exchange. 339 Futures spread are no longer supported. Please use combos instead. 340 Invalid improvement amount for box auction strategy. 341 'Invalid delta. Valid values are from 1 to 100. You can set the delta from the 'Pegged to Stock' section of the Order Ticket Panel, or by selecting Page/Layout from the main menu and adding the Delta column.' 342 Pegged order is not supported on this exchange. You can review all order types and supported exchanges on the Order Types and Algos page. 343 ''The date, time, or time-zone entered is invalid. The correct format is yyyymmdd hh:mm:ss xxx'' 344 The account logged into is not a financial advisor account. You are trying to perform an action that is only available for the financial advisor account. 345 Generic combo is not supported for FA advisor account. 346 Not an institutional account or an away clearing account. 347 Short sale slot value must be 1 (broker holds shares) or 2 (delivered from elsewhere). Make sure that your slot value is either 1 or 2. 348 Order not a short sale - type must be SSHORT to specify short sale slot. Make sure that the action you specified is 'SSHORT'. 349 'Generic combo does not support ''Good After'' attribute.' 350 Minimum quantity is not supported for best combo order. 351 'The ''Regular Trading Hours only'' flag is not valid for this order.' 352 Short sale slot value of 2 (delivered from elsewhere) requires location. You need to specify designatedLocation for your order. 353 Short sale slot value of 1 requires no location be specified. You do not need to specify designatedLocation for your order. 354 Requested market data is not subscribed. Check API status by selecting the Account menu then under Management choose Market Data Subscription Manager and/or availability of delayed data. You do not have live market data available in your account for the specified instruments. For further details please refer to our Market Data Subscriptions page. 355 Order size does not conform to market rule. Check order size parameters for the specified contract from the TWS Contract Details. 356 Smart-combo order does not support OCA group. Remove OCA group from your order. 357 Your client version is out of date. 358 Smart combo child order not supported. 359 Combo order only supports reduce on fill without block(OCA). 360 No whatif check support for smart combo order. Pre-trade commissions and margin information is not available for this type of order. 361 Invalid trigger price. 362 Invalid adjusted stop price. 363 Invalid adjusted stop limit price. 364 Invalid adjusted trailing amount. 365 No scanner subscription found for ticker id: Scanner market data subscription request with this ticker id has either been cancelled or is not found. 366 No historical data query found for ticker id: Historical market data request with this ticker id has either been cancelled or is not found. 367 Volatility type if set must be 1 or 2 for VOL orders. Do not set it for other order types. 368 Reference Price Type must be 1 or 2 for dynamic volatility management. Do not set it for non-VOL orders. 369 Volatility orders are only valid for US options. Make sure that you are placing an order for US OPT contract. 370 ''Dynamic Volatility orders must be SMART routed, or trade on a Price Improvement Exchange.'' 371 VOL order requires positive floating point value for volatility. Do not set it for other order types. 372 Cannot set dynamic VOL attribute on non-VOL order. Make sure that your order type is 'VOL'. 373 Can only set stock range attribute on VOL or RELATIVE TO STOCK order. 374 ''If both are set, the lower stock range attribute must be less than the upper stock range attribute.'' 375 Stock range attributes cannot be negative. 376 The order is not eligible for continuous update. The option must trade on a cheap-to-reroute exchange. 377 Must specify valid delta hedge order aux. price. 378 Delta hedge order type requires delta hedge aux. price to be specified. Make sure your order has delta attribute. 379 Delta hedge order type requires that no delta hedge aux. price be specified. Make sure you do not specify aux. delta hedge price. 380 This order type is not allowed for delta hedge orders. ''Limit, Market or Relative orders are supported.'' 381 Your DDE.dll needs to be upgraded. 382 The price specified violates the number of ticks constraint specified in the default order settings. 383 The size specified violates the size constraint specified in the default order settings. 384 Invalid DDE array request. 385 Duplicate ticker ID for API scanner subscription. Make sure you are using a unique ticker ID for your new scanner subscription. 386 Duplicate ticker ID for API historical data query. Make sure you are using a unique ticker ID for your new historical market data query. 387 Unsupported order type for this exchange and security type. You can review all order types and supported exchanges on the Order Types and Algos page. 388 Order size is smaller than the minimum requirement. Check order size parameters for the specified contract from the TWS Contract Details. 389 Supplied routed order ID is not unique. 390 Supplied routed order ID is invalid. 391 The time or time-zone entered is invalid. The correct format is hh:mm:ss xxx 392 Invalid order: contract expired. You can not place an order for the expired contract. 393 Short sale slot may be specified for delta hedge orders only. 394 Invalid Process Time: must be integer number of milliseconds between 100 and 2000. Found: 395 ''Due to system problems, orders with OCA groups are currently not being accepted.'' Check TWS bulletins for more information. 396 ''Due to system problems, application is currently accepting only Market and Limit orders for this contract.'' Check TWS bulletins for more information. 397 ''Due to system problems, application is currently accepting only Market and Limit orders for this contract.'' 398 cannot be used as a condition trigger. Please make sure that you specify a valid condition 399 Order message error 400 Algo order error. 401 Length restriction. 402 Conditions are not allowed for this contract. Condition order type does not support for this contract 403 Invalid stop price. The Stop Price you specified for the order is invalid for the contract 404 Shares for this order are not immediately available for short sale. The order will be held while we attempt to locate the shares. You order is held by the TWS because you are trying to sell a contract but you do not have any long position and the market does not have short sale available. You order will be transmitted once there is short sale available on the market 405 The child order quantity should be equivalent to the parent order size. This error is deprecated. 406 The currency is not allowed. Please specify a valid currency 407 The symbol should contain valid non-unicode characters only. Please check your contract Symbol 408 Invalid scale order increment. 409 Invalid scale order. You must specify order component size. ScaleInitLevelSize specified is invalid 410 Invalid subsequent component size for scale order. ScaleSubsLevelSize specified is invalid 411 'The ''Outside Regular Trading Hours'' flag is not valid for this order.' Trading outside of regular trading hours is not available for this security 412 The contract is not available for trading. 413 What-if order should have the transmit flag set to true. You need to set IBApi.Order.Transmit to TRUE 414 Snapshot market data subscription is not applicable to generic ticks. You must leave Generic Tick List to be empty when requesting snapshot market data 415 Wait until previous RFQ finishes and try again. 416 RFQ is not applicable for the contract. Order ID: 417 Invalid initial component size for scale order. ScaleInitLevelSize specified is invalid 418 Invalid scale order profit offset. ScaleProfitOffset specified is invalid 419 Missing initial component size for scale order. You need to specify the ScaleInitLevelSize 420 Invalid real-time query. Information about pacing violations 421 Invalid route. This error is deprecated. 422 The account and clearing attributes on this order may not be changed. 423 Cross order RFQ has been expired. THI committed size is no longer available. Please open order dialog and verify liquidity allocation. 424 FA Order requires allocation to be specified. This error is deprecated. 425 FA Order requires per-account manual allocations because there is no common clearing instruction. Please use order dialog Adviser tab to enter the allocation. This error is deprecated. 426 None of the accounts have enough shares. You are not able to enter short position with Cash Account 427 Mutual Fund order requires monetary value to be specified. This error is deprecated. 428 Mutual Fund Sell order requires shares to be specified. This error is deprecated. 429 Delta neutral orders are only supported for combos (BAG security type). 430 ''We are sorry, but fundamentals data for the security specified is not available.'' 431 What to show field is missing or incorrect. This error is deprecated. 432 Commission must not be negative. This error is deprecated. 433 'Invalid ''Restore size after taking profit'' for multiple account allocation scale order.' 434 The order size cannot be zero. 435 You must specify an account. The function you invoked only works on a single account 436 ''You must specify an allocation (either a single account, group, or profile).'' ''When you try to place an order with a Financial Advisor account, you must specify the order to be routed to either a single account, a group, or a profile.'' 437 Order can have only one flag Outside RTH or Allow PreOpen. This error is deprecated. 438 The application is now locked. This error is deprecated. 439 Order processing failed. Algorithm definition not found. Please double check your specification for IBApi.Order.AlgoStrategy and IBApi.Order.AlgoParams 440 Order modify failed. Algorithm cannot be modified. 441 Algo attributes validation failed: Please double check your specification for IBApi.Order.AlgoStrategy and IBApi.Order.AlgoParams 442 Specified algorithm is not allowed for this order. 443 Order processing failed. Unknown algo attribute. Specification for IBApi.Order.AlgoParams is incorrect 444 Volatility Combo order is not yet acknowledged. Cannot submit changes at this time. The order is not in a state that is able to be modified 445 The RFQ for this order is no longer valid. 446 Missing scale order profit offset. ScaleProfitOffset is not properly specified 447 Missing scale price adjustment amount or interval. ScalePriceAdjustValue or ScalePriceAdjustInterval is not specified properly 448 Invalid scale price adjustment interval. ScalePriceAdjustInterval specified is invalid 449 Unexpected scale price adjustment amount or interval. ScalePriceAdjustValue or ScalePriceAdjustInterval specified is invalid 481 Order size reduced. 501 Already Connected. Your client application is already connected to the TWS. 502 'Couldn't connect to TWS. Confirm that ''Enable ActiveX and Socket Clients'' is enabled and connection port is the same as ''Socket Port'' on the TWS ''Edit->Global Configuration...->API->Settings'' menu.' When you receive this error message it is either because you have not enabled API connectivity in the TWS and/or you are trying to connect on the wrong port. Refer to the TWS' API Settings as explained in the error message. See also Connectivity 503 The TWS is out of date and must be upgraded. Indicates TWS or IBG is too old for use with the current API version. Can also be triggered if the TWS version does not support a specific API function. 504 Not connected. You are trying to perform a request without properly connecting and/or after connection to the TWS has been broken probably due to an unhandled exception within your client application. 505 Fatal Error: Unknown message id. 506 Unsupported Version (not used in Python client) 507 Bad Message Length (Java-only) ''Indicates EOF exception was caught while reading from the socket. This can occur if there is an attempt to connect to TWS with a client ID that is already in use, or if TWS is locked, closes, or breaks the connection. It should be handled by the client application and used to indicate that the socket connection is not valid.'' 508 Bad Message 509 Exception caught while reading socket (not used in Python C# client) 510 Request Market Data Sending Error - 511 Cancel Market Data Sending Error - 512 Order Sending Error - 513 Account Update Request Sending Error - 514 Request For Executions Sending Error - 515 Cancel Order Sending Error - 516 Request Open Order Sending Error - 517 Unknown contract. Verify the contract details supplied. (not used in Python C# client) 518 Request Contract Data Sending Error - 519 Request Market Depth Sending Error - 520 Failed to create socket (not used in C# client) 521 Set Server Log Level Sending Error - 522 FA Information Request Sending Error - 523 FA Information Replace Sending Error - 524 Request Scanner Subscription Sending Error - 525 Cancel Scanner Subscription Sending Error - 526 Request Scanner Parameter Sending Error - 527 Request Historical Data Sending Error - 528 Request Historical Data Sending Error - 529 Request Real-time Bar Data Sending Error - 530 Cancel Real-time Bar Data Sending Error - 531 Request Current Time Sending Error - 532 Request Fundamental Data Sending Error - 533 Cancel Fundamental Data Sending Error - 534 Request Calculate Implied Volatility Sending Error - 535 Request Calculate Option Price Sending Error - 536 Cancel Calculate Implied Volatility Sending Error - 537 Cancel Calculate Option Price Sending Error - 538 Request Global Cancel Sending Error - 539 Request Market Data Type Sending Error - 540 Request Positions Sending Error - 541 Cancel Positions Sending Error - 542 Request Account Data Sending Error - 543 Cancel Account Data Sending Error - 544 Verify Request Sending Error - 545 Verify Message Sending Error - 546 Query Display Groups Sending Error - 547 Subscribe To Group Events Sending Error - 548 Update Display Group Sending Error - 549 Unsubscribe From Group Events Sending Error - 550 Start API Sending Error - 551 Verify And Auth Request Sending Error - 552 Verify And Auth Message Sending Error - 553 Request Positions Multi Sending Error - 554 Cancel Positions Multi Sending Error - 555 Request Account Updates Multi Sending Error - 556 Cancel Account Updates Multi Sending Error - 557 Request Security Definition Option Params Sending Error - 558 Request Soft Dollar Tiers Sending Error - 559 Request Family Codes Sending Error - 560 Request Matching Symbols Sending Error - 561 Request Market Depth Exchanges Sending Error - 562 Request Smart Components Sending Error - 563 Request News Providers Sending Error - 564 Request News Article Sending Error - 565 Request Historical News Sending Error - 566 Request Head Time Stamp Sending Error - 567 Request Histogram Data Sending Error - 568 Cancel Request Histogram Data Sending Error - 569 Cancel Head Time Stamp Sending Error - 570 Request Market Rule Sending Error - 571 Request PnL Sending Error - 572 Cancel PnL Sending Error - 573 Request PnL Single Error - 574 Cancel PnL Single Sending Error - 575 Request Historical Ticks Error - 576 Request Tick-By-Tick Data Sending Error - 577 Cancel Tick-By-Tick Data Sending Error - 578 Request Completed Orders Sending Error - 579 Invalid symbol in string - 580 Request WSH Meta Data Sending Error - 581 Cancel WSH Meta Data Sending Error - 582 Request WSH Event Data Sending Error - 583 Cancel WSH Event Data Sending Error - 584 Request User Info Sending Error - 585 'FA Profile is not supported anymore, use FA Group instead' 'Indicates FaDataTypeEnum.PROFILES is deprecated. Use FaDataTypeEnum.GROUPS or 1 instead' 586 Failed to read message because not connected (Used only in Java client) 587 Request Current Time In Millis Sending Error - 588 Error encoding protobuf (Used only in Java client) 589 Cancel Market Depth Sending Error - 2100 New account data requested from TWS. API client has been unsubscribed from account data. ''The TWS only allows one IBApi.EClient.reqAccountUpdates request at a time. If the client application attempts to subscribe to a second account without canceling the previous subscription, the new request will override the old one and the TWS will send this message notifying so.'' 2101 Unable to subscribe to account as the following clients are subscribed to a different account. ''If a client application invokes IBApi.EClient.reqAccountUpdates when there is an active subscription started by a different client, the TWS will reject the new subscription request with this message.'' 2102 Unable to modify this order as it is still being processed. ''If you attempt to modify an order before it gets processed by the system, the modification will be rejected. Wait until the order has been fully processed before modifying it. See Placing Orders for further details.'' 2103 A market data farm is disconnected. ''Indicates a connectivity problem to an IB server. Outside of the nightly IB server reset, this typically indicates an underlying ISP connectivity issue.'' 2104 Market data farm connection is OK ''A notification that connection to the market data server is ok. This is a notification and not a true error condition, and is expected on first establishing connection.'' 2105 A historical data farm is disconnected. ''Indicates a connectivity problem to an IB server. Outside of the nightly IB server reset, this typically indicates an underlying ISP connectivity issue.'' 2106 A historical data farm is connected. ''A notification that connection to the market data server is ok. This is a notification and not a true error condition, and is expected on first establishing connection.'' 2107 A historical data farm connection has become inactive but should be available upon demand. ''Whenever a connection to the historical data farm is not being used because there is not an active historical data request, the connection will go inactive in IB Gateway. This does not indicate any connectivity issue or problem with IB Gateway. As soon as a historical data request is made the status will change back to active.'' 2108 A market data farm connection has become inactive but should be available upon demand. ''Whenever a connection to our data farms is not needed, it will become dormant. There is nothing abnormal nor wrong with your client application nor with the TWS. You can safely ignore this message.'' 2109 'Order Event Warning: Attribute ''Outside Regular Trading Hours'' is ignored based on the order type and destination. PlaceOrder is now processed.' Indicates the outsideRth flag was set for an order for which there is not a regular vs outside regular trading hour distinction 2110 Connectivity between TWS and server is broken. It will be restored automatically. Indicates a connectivity problem between TWS or IBG and the IB server. This will usually only occur during the IB nightly server reset; cases at other times indicate a problem in the local ISP connectivity. 2111 'The Start and/or End Time for algo order BUY/SELL a contract was adjusted to use the next trading date. To modify this setting, use the Auto-adjust algo order date item on the Orders configuration page' Please go to TWS Global Configuration - 'Orders' - 'Settings' to correct the configuration. 2119 Market data farm is connecting. 2130 Warning: products are trading on the basis of currency price with factor. 2137 Cross Side Warning ''This warning message occurs in TWS version 955 and higher. It occurs when an order will change the position in an account from long to short or from short to long. To bypass the warning, a new feature has been added to IB Gateway 956 (or higher) and TWS 957 (or higher) so that once can go to Global Configuration > Messages and disable the ''Cross Side Warning''.'' 2152 Market depth smart depth exchanges. 2158 Sec-def data farm connection is OK ''A notification that connection to the Security definition data server is ok. This is a notification and not a true error condition, and is expected on first establishing connection.'' 2168 Etrade Only Not Supported Warning The EtradeOnly IBApi.Order attribute is no longer supported. Error received with TWS versions 983+. Remove attribute to place order. 2169 Firm Quote Only Not Supported Warning The firmQuoteOnly IBApi.Order attribute is no longer supported. Error received with TWS versions 983+. Remove attribute to place order. 10000 Cross currency combo error. 10001 Cross currency vol error. 10002 Invalid non-guaranteed legs. 10003 IBSX not allowed. 10005 Read-only models. 10006 Missing parent order. The parent order ID specified cannot be found. In some cases this can occur with bracket orders if the child order is placed immediately after the parent order; a brief pause of 50 ms or less will be necessary before the child order is transmitted to TWS/IBG. 10007 Invalid hedge type. 10008 Invalid beta value. 10009 Invalid hedge ratio. 10010 Invalid delta hedge order. 10011 Currency is not supported for Smart combo. 10012 Invalid allocation percentage FaPercentage specified is not valid 10013 Smart routing API error (Smart routing opt-out required). 10014 PctChange limits. This error is deprecated 10015 Trading is not allowed in the API. 10016 Contract is not visible. This error is deprecated 10017 Contracts are not visible. This error is deprecated 10018 Orders use EV warning. 10019 Trades use EV warning. 10020 Display size should be smaller than order size./td> The display size should be smaller than the total quantity 10021 Invalid leg2 to Mkt Offset API. This error is deprecated 10022 Invalid Leg Prio API. This error is deprecated 10023 Invalid combo display size API. This error is deprecated 10024 Invalid don't start next legin API. This error is deprecated 10025 Invalid leg2 to Mkt time1 API. This error is deprecated 10026 Invalid leg2 to Mkt time2 API. This error is deprecated 10027 Invalid combo routing tag API. This error is deprecated 10090 Part of requested market data is not subscribed. ''Indicates that some tick types requested require additional market data subscriptions not held in the account. This commonly occurs for instance if a user has options subscriptions but not the underlying stock so the system cannot calculate the real time greek values (other default ticks will be returned). Or alternatively, if generic tick types are specified in a market data request without the associated subscriptions.'' 10147 Order to be canceled was not found. 10148 ''OrderId that needs to be cancelled can not be cancelled, state:'' An attempt was made to cancel an order that had already been filled by the system. 10186 Requested market data is not subscribed. Delayed market data is not enabled See Market Data Types on how to enable delayed data. 10187 Failed to request historical ticks:No market data permissions 10189 Failed to request tick-by-tick data. Invalid Real-time Query 'Trading TWS session is connected from a different IP address. Or, No market data permissions' 10197 No market data during competing session ''Indicates that the user is logged into the paper account and live account simultaneously trying to request live market data using both the accounts. In such a scenario preference would be given to the live account, for more details please refer: https://ibkr.info/node/1719'' 10225 ''Bust event occurred, current subscription is deactivated. Please resubscribe real-time bars immediately'' 10230 ''You have unsaved FA changes. Please retry 'request FA' operation later, when 'replace FA' operation is complete'' There are pending Financial Advisor configuration changes. See Financial Advisors 10231 The following Groups and/or Profiles contain invalid accounts: ''If the account(s) inside Groups or Profiles is/are incorrect in xml-formatted configuration string of replaceFA request, then the error shows list of such Groups and/or Profiles.'' 10233 Defaults were inherited from CASH preset during the creation of this order. 10234 The Decision Maker field is required and not set for this order (non-desktop). 10235 The Decision Maker field is required and not set for this order (ibbot). 10236 Child has to be AON if parent order is AON 10237 All or None ticket can route entire unfilled size only 10238 Some error occured during communication with Advisor Setup web-app 10239 This order will affect one or more accounts that are flagged because they do not fit the required risk score criteria prescribed by the group/profile/model allocation. 10240 You must enter a valid Price Cap. 10241 Order Quantity is expressed in monetary terms. Modification is not supported via API. Please use desktop version to revise this order. 10242 Fractional-sized order cannot be modified via API. Please use desktop version to revise this order. 10243 Fractional-sized order cannot be placed via API. Please use desktop version to place this order. 10244 Cash Quantity cannot be used for this order 10245 This financial instrument does not support fractional shares trading 10246 This order doesn't support fractional shares trading 10247 Only IB SmartRouting supports fractional shares 10248 doesn't have permission to trade fractional shares 10249 '=''''> order doesn't support fractional shares' 10250 The size does not conform to the minimum variation of for this contract 10251 Fractional shares are not supported for allocation orders 10252 This non-close-position order doesn't support fractional shares trading 10253 Clear Away orders are not supported for multi-leg combo with attached hedge. 10254 Invalid Order: bond expired 10268 The 'EtradeOnly' order attribute is not supported The EtradeOnly IBApi.Order attribute is no longer supported. Error received with TWS versions 983+ 10269 The 'firmQuoteOnly' order attribute is not supported The firmQuoteOnly IBApi.Order attribute is no longer supported. Error received with TWS versions 983+ 10270 The 'nbboPriceCap' order attribute is not supported The nbboPriceCap IBApi.Order attribute is no longer supported. Error received with TWS versions 983+ 10276 News feed is not allowed The API client is not permissioned for receiving WSH news feed. 10277 News feed permissions required The API client is not subscribed to receive WSH news feed 10278 Duplicate WSH metadata request A request is already pending for the same API client. 10279 Failed request WSH metadata A general error occurred when processing the request. 10280 Failed cancel WSH metadata A general error occurred when processing the request. 10281 Duplicate WSH event data request A request is already pending for the same API client. 10282 WSH metadata not requested WSH metadata was not requested by first sending a reqWshMetaData request. 10283 Fail request WSH event data A general error occurred when processing the request. 10284 Fail cancel WSH event data A general error occurred when processing the request. 10285 Your API version does not support fractional sizing rules. Please upgrade to at least version 163 10286 %s field cannot contain more than %s decimals. 10287 Cryptocurrency order is not confirmed 10288 Market order confirmation dialog title for cryptocurrencies 10289 You must set Cash Quantity for this order 10290 This order only supports CashQty trading. 10291 Orders to harvest Capital Loss must use the DAY time-in-force. 10292 Order type/action restriction 10293 Cryptocurrency Cash Quantity order cannot specify size 10294 Cash quantity set on the order does not match total monetary amount of the Group. 10295 Orders to harvest Capital Loss must use the DAY time-in-force. 10295 Only daily resolution supported for Schedule requests 10296 'The Smart Routing features \\''Seek Price Improvement\\'' (aka \\''Route to Dark Pools\\'') and \\''Do not route to Dark Pools\\'' are mutually exclusive.Enabling both will result in the order being rejected. Please choose only one of these commands.%s' 10297 Not Held attribute is invalid for this order. 10298 Cannot trade an instrument with currency different from model currency 10299 Expected what to show is %s please use that instead of %s. 10300 %s: The date time 10301 %s: The date time 10302 Min trade trade quantity is not allowed for this order 10303 Invalid min trade quantity value (%s).It must be a positive integer not exceeding the total order size. 10304 Minimum Competing Size value must be non-negative. 10305 Compete against best bid or offer Offset dollar value must be positive multiple of a cent. 10306 Mid offsets are not allowed 10307 Invalid MidOffsetAtWhole and/or MidOffsetAtHalf attribute values 10308 Revision to Post to ATS value presence is not allowed. 10309 Invalid WSH event data request. 10310 The Solicited field should be used for orders initiated or recommended by the broker or advisor that were approved by the client (by phone email 10311 This order will be directly routed to %s. Direct routed orders may result in higher trade fees. 10312 The order type Volatility is currently not supported for this combination of financial instrument and account type 10314 %s: The date time 10315 %s: The time entered is invalid. The correct format is hh:mm:ss. E.g.: 15:00:00 in UTC. No date should be specified current date is assumed. 10316 Trigger Outside RTH was deprecated. Please upgrade your API Client software to submit order with Outside RTH attribute instead. 10317 The Cash Quantity size for the below contracts does not conform to minimum variation of %s 10318 This order doesn't support fractional quantity trading 10319 Placing orders for Municipal Bonds via API is currently disabled 10321 Placing orders for Municipal Bonds is currently disabled for attached and OCA orders. 10322 This API request for All is not supported for Dynamic Account Addition 10324 Invalid parameters for OCA group for exchange %s. Overfill Protection is implied. 10325 OCA group is not supported 10326 OCA group revision is not allowed 10327 OCA group type revision is not allowed 10328 Connection lost order data could not be resolved 10329 This order will be directly routed to %s. 10330 The expiry date/time format is invalid.\\nThe correct format is yyyyMM yyyyMMdd HH:mm:ss (operator or instrument time zone) or yyyyMMdd-HH:mm:ss (UTC time zone). 10331 Any stop warning 10332 Cryptocurrency volatility warning 10333 Option Exercise at-the-money warning 10334 Confirm Omnibus Order Account 10335 'Order presets cannot be applied as configured. Please review%s Settings and Rapid Order Entry Configuration for consistency.' 10336 Per-leg executing broker configuration is not supported 10337 Misc options key=%s is invalid in %s request. Valid keys are: %s 10338 Misc options value=%s is invalid for key=%s in %s request. Valid values are: %s 10339 Setting end date/time for continuous future security type is not allowed 10340 The following order attribute is not supported: %s 10341 Parent order id cannot be modified 10342 The 'ImbalanceOnly' order attribute may not be specified for this order. 10343 Selling Event Contracts is neither allowed directly nor as an attached profit taker. 10344 Price value must be between 0.02 and 0.99 with a maximum of two decimal places. 10345 You cannot trade a %s 10346 Market data for %s cannot be delivered because ticker for the same financial instrument is displayed on %s 10347 This security has limited liquidity. If you choose to trade this security there is a heightened risk that you may not be able to close your position at the time you wish WinError 10038 An operation was attempted on something that is not a socket. This indicates socket connection was closed improperly.",
    "EWrapper.error(reqId: int. The request identifier corresponding to the most recent reqId that maintained the error stream. This does not pertain to the orderId from placeOrder, but whatever the most recent requestId is. errorTime: int. The Unix timestamp of when the error took place. Note: This is only implemented for TWS API 10.33+ errorCode: int. The code identifying the error. errorMsg: String. The error's description. advancedOrderRejectJson: String. Advanced order reject description in json format.)",
    "The content below references some of the most common errors received by clients at Interactive Brokers, and offers direct resolutions for the matters in most instances. If further information is required, please feel to contact Customer Service for additional insight.",
    "Error code 2104, 2106, and 2158 all generally state that farm connection is OK. What this means is that the API has successfully connected to Trader Workstation or the IB Gateway, and that connection is able to reach Interactive Brokers servers. There is no issue with the connection, and it is a sign you connected successfully. While using IB Gateway, users may encounter the error, 'A historical data farm connection has become inactive but should be available upon demand.' This means that while no historical data requests are being sent, the connection is halted. Once a historical data request is sent over the API connection, the market data farm will reconnect and supply market data.",
    "Error 10089 notes that clients are requesting market data when they do not maintain a valid market data subscription. To resolve this issue, users must add a market data subscription to the specific user they are requesting market data with. Alternatively, users must request delayed market data prior to requesting market data. Market data availability is different in TWS versus the API. As a result, market data you can receive in Trader Workstation may not be available in the API. Interactive Brokers lists many of our most popular market data subscriptions here.",
    "Financial Advisors are able to manage their allocation groups from the TWS API. Note: Modifications made through the API will effect orders placed through TWS, the TWS API, Client Portal, and the Client Portal API.",
    "EClient.requestFA (faDataType: int. The configuration to change. Set to 1 or 3 as defined in the table below.) Requests the FA configuration as set in TWS for the given FA Group or Profile.  requestFA FA Data Types Type Code Type Name Description 1 Groups offer traders a way to create a group of accounts and apply a single allocation method to all accounts in the group. 3 Account Aliases let you easily identify the accounts by meaningful names rather than account numbers.",
    "EWrapper.receiveFA (faDataType: int. Receive the faDataType value specified in the requestFA. See FA Data Types faXmlData: String. The xml-formatted configuration.) Receives the Financial Advisor's configuration available in the TWS.",
    "EClient.replaceFA (reqId: int. Request identifier used to track data. faDataType: int. The configuration structure to change. Set to 1 or 3 as defined above. xml: String. XML configuration for allocation profiles or group. See Allocation Method XML Format for more details.)  replaceFA FA Data Types replaceFA Type Code Type Name Description 1 Groups offer traders a way to create a group of accounts and apply a single allocation method to all accounts in the group. 2 Account Aliases let you easily identify the accounts by meaningful names rather than account numbers. Note: In order to confirm that your FA changes were saved, you may wait for the EWrapper.replaceFAEnd callback, which provides the corresponding reqId. In addition, after saving changes, it is advised to verify the new FA setup via EClient.requestFA. If it is called before changes are fully saved, you may receive an error, such as error 10230. See Message Codes. EClient.replaceFA only accepts faDataType 1 now. Otherwise, it may trigger error 585.  EWrapper.replaceFAEnd (reqId: int. Request identifier used to track data. text: String. the message text.) Marks the ending of the replaceFA reception.",
    "A number of methods for account allocations are available with Financial Advisor and IBroker account structures to specify how trades should be distributed across multiple accounts. Allocation Groups can be created or modified in the Trader Workstation directly as described in TWS: Allocations and Transfers. Alternatively, allocation groups can be created or modified through the EClient.replaceFA() method in the API. Interactive Brokers supports two forms of allocation methods. Allocation methods that have calculations completed by Interactive Brokers, and a set of allocation methods calculated by the user and then specified.  IB-computed allocation methods Available Equity Equal Quantity Net Liquidation Value  User-specified allocation methods Formerly known as Allocation Profiles Cash Quantity Percentages Ratios Shares",
    "Allocation methods for financial advisor's allocation groups are created using an XML format. The content below signifies the supported allocation groups and how to format them in their respective XML.",
    "Requires you to specify an order size. This method distributes shares based on the amount of available equity in each account. The system calculates ratios based on the Available Equity in each account and allocates shares based on these ratios. Example: You transmit an order for 700 shares of stock XYZ. The account group includes three accounts, A, B and C with available equity in the amounts of $25,000, $50,000 and $100,000 respectively. The system calculates a ratio of 1:2:4 and allocates 100 shares to Client A, 200 shares to Client B, and 400 shares to Client C.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter <?xml version='1.0' encoding='UTF-8'?> <ListOfGroups> <Group> <name>MyTestProfile2</name> <defaultMethod>AvailableEquity</defaultMethod> <ListOfAccts varName='list'> <Account> <acct>DU6202167</acct> </Account> <Account> <acct>DU6202168</acct> </Account> </ListOfAccts> </Group> </ListOfGroups> <?xml version='1.0' encoding='UTF-8'?> <ListOfGroups> <Group> <name>MyTestProfile2</name> <defaultMethod>AvailableEquity</defaultMethod> <ListOfAccts varName='list'> <Account> <acct>DU6202167</acct> </Account> <Account> <acct>DU6202168</acct> </Account> </ListOfAccts> </Group> </ListOfGroups> <?xml version='1.0' encoding='UTF-8'?> <ListOfGroups> <Group> <name>MyTestProfile2</name> <defaultMethod>AvailableEquity</defaultMethod> <ListOfAccts varName='list'> <Account> <acct>DU6202167</acct> </Account> <Account> <acct>DU6202168</acct> </Account> </ListOfAccts> </Group> </ListOfGroups>",
    "This method allocates the absolute number of shares you enter to each account listed. If you use this method, the order size is calculated by adding together the number of shares allocated to each account in the profile. Example: Assume an order for 300 shares of stock ABC is transmitted. In the example code shown in the right side, you can see that: Account A is set to receive 100.0 shares while Account B is set to receive 200.0 shares. Account A should receive 100 shares and Account B should receive 200 shares.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter <?xml version='1.0' encoding='UTF-8'?> <ListOfGroups> <Group> <name>MyTestProfile2</name> <defaultMethod>ContractsOrShares</defaultMethod> <ListOfAccts varName='list'> <Account> <acct>DU6202167</acct> <amount>100.0</amount> </Account> <Account> <acct>DU6202168</acct> <amount>200.0</amount> </Account> </ListOfAccts> </Group> </ListOfGroups> <?xml version='1.0' encoding='UTF-8'?> <ListOfGroups> <Group> <name>MyTestProfile2</name> <defaultMethod>ContractsOrShares</defaultMethod> <ListOfAccts varName='list'> <Account> <acct>DU6202167</acct> <amount>100.0</amount> </Account> <Account> <acct>DU6202168</acct> <amount>200.0</amount> </Account> </ListOfAccts> </Group> </ListOfGroups> <?xml version='1.0' encoding='UTF-8'?> <ListOfGroups> <Group> <name>MyTestProfile2</name> <defaultMethod>ContractsOrShares</defaultMethod> <ListOfAccts varName='list'> <Account> <acct>DU6202167</acct> <amount>100.0</amount> </Account> <Account> <acct>DU6202168</acct> <amount>200.0</amount> </Account> </ListOfAccts> </Group> </ListOfGroups>",
    "Requires you to specify an order size. This method distributes shares equally between all accounts in the group. Example: You transmit an order for 400 shares of stock ABC. If your Account Group includes four accounts, each account receives 100 shares. If your Account Group includes six accounts, each account receives 66 shares, and then 1 share is allocated to each account until all are distributed.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter <?xml version='1.0' encoding='UTF-8'?> <ListOfGroups> <Group> <name>MyTestProfile2</name> <defaultMethod>Equal</defaultMethod> <ListOfAccts varName='list'> <Account> <acct>DU6202167</acct> </Account> <Account> <acct>DU6202168</acct> </Account> </ListOfAccts> </Group> </ListOfGroups> <?xml version='1.0' encoding='UTF-8'?> <ListOfGroups> <Group> <name>MyTestProfile2</name> <defaultMethod>Equal</defaultMethod> <ListOfAccts varName='list'> <Account> <acct>DU6202167</acct> </Account> <Account> <acct>DU6202168</acct> </Account> </ListOfAccts> </Group> </ListOfGroups> <?xml version='1.0' encoding='UTF-8'?> <ListOfGroups> <Group> <name>MyTestProfile2</name> <defaultMethod>Equal</defaultMethod> <ListOfAccts varName='list'> <Account> <acct>DU6202167</acct> </Account> <Account> <acct>DU6202168</acct> </Account> </ListOfAccts> </Group> </ListOfGroups>",
    "The Monetary Amount method calculates the number of units to be allocated based on the monetary value assigned to each account.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter <?xml version='1.0' encoding='UTF-8'?> <ListOfGroups> <Group> <name>MyTestProfile2</name> <defaultMethod>MonetaryAmount</defaultMethod> <ListOfAccts varName='list'> <Account> <acct>DU6202167</acct> <amount>1000.0</amount> </Account> <Account> <acct>DU6202168</acct> <amount>2000.0</amount> </Account> </ListOfAccts> </Group> </ListOfGroups> <?xml version='1.0' encoding='UTF-8'?> <ListOfGroups> <Group> <name>MyTestProfile2</name> <defaultMethod>MonetaryAmount</defaultMethod> <ListOfAccts varName='list'> <Account> <acct>DU6202167</acct> <amount>1000.0</amount> </Account> <Account> <acct>DU6202168</acct> <amount>2000.0</amount> </Account> </ListOfAccts> </Group> </ListOfGroups> <?xml version='1.0' encoding='UTF-8'?> <ListOfGroups> <Group> <name>MyTestProfile2</name> <defaultMethod>MonetaryAmount</defaultMethod> <ListOfAccts varName='list'> <Account> <acct>DU6202167</acct> <amount>1000.0</amount> </Account> <Account> <acct>DU6202168</acct> <amount>2000.0</amount> </Account> </ListOfAccts> </Group> </ListOfGroups>",
    "Requires you to specify an order size. This method distributes shares based on the net liquidation value of each account. The system calculates ratios based on the Net Liquidation value in each account and allocates shares based on these ratios. Example: You transmit an order for 700 shares of stock XYZ. The account group includes three accounts, A, B and C with Net Liquidation values of $25,000, $50,000 and $100,000 respectively. The system calculates a ratio of 1:2:4 and allocates 100 shares to Client A, 200 shares to Client B, and 400 shares to Client C.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter <?xml version='1.0' encoding='UTF-8'?> <ListOfGroups> <Group> <name>MyTestProfile2</name> <defaultMethod>NetLiq</defaultMethod> <ListOfAccts varName='list'> <Account> <acct>DU6202167</acct> </Account> <Account> <acct>DU6202168</acct> </Account> </ListOfAccts> </Group> </ListOfGroups> <?xml version='1.0' encoding='UTF-8'?> <ListOfGroups> <Group> <name>MyTestProfile2</name> <defaultMethod>NetLiq</defaultMethod> <ListOfAccts varName='list'> <Account> <acct>DU6202167</acct> </Account> <Account> <acct>DU6202168</acct> </Account> </ListOfAccts> </Group> </ListOfGroups> <?xml version='1.0' encoding='UTF-8'?> <ListOfGroups> <Group> <name>MyTestProfile2</name> <defaultMethod>NetLiq</defaultMethod> <ListOfAccts varName='list'> <Account> <acct>DU6202167</acct> </Account> <Account> <acct>DU6202168</acct> </Account> </ListOfAccts> </Group> </ListOfGroups>",
    "This method will split the total number of shares in the order between listed accounts based on the percentages you indicate. Example: Assume an order for 300 shares of stock ABC is transmitted. In the example code shown in the right side, you can see that: Account A is set to have 60.0 percentage while Account B is set to have 40.0 percentage. Account A should receive 180 shares and Account B should receive 120 shares. While making modifications to allocations for profiles, the method uses an enumerated value. The number shown below demonstrates precisely what profile corresponds to which value. BUY ORDER Positive Percent Negative Percent Long Position Increases position No effect Short Position No effect Decreases position SELL ORDER Positive Percent Negative Percent Long Position No effect Decreases position Short Position Increases position No effect Note: Do not specify an order size. Since the quantity is calculated by the system, the order size is displayed in the Quantity field after the order is acknowledged. This method increases or decreases an already existing position. Positive percents will increase a position, negative percents will decrease a position. For exmaple, to fully close out a position, you just need to specify percentage to be -100.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter <?xml version='1.0' encoding='UTF-8'?> <ListOfGroups> <Group> <name>MyTestProfile2</name> <defaultMethod>Percent</defaultMethod> <ListOfAccts varName='list'> <Account> <acct>DU6202167</acct> <amount>60.0</amount> </Account> <Account> <acct>DU6202168</acct> <amount>40.0</amount> </Account> </ListOfAccts> </Group> </ListOfGroups> <?xml version='1.0' encoding='UTF-8'?> <ListOfGroups> <Group> <name>MyTestProfile2</name> <defaultMethod>Percent</defaultMethod> <ListOfAccts varName='list'> <Account> <acct>DU6202167</acct> <amount>60.0</amount> </Account> <Account> <acct>DU6202168</acct> <amount>40.0</amount> </Account> </ListOfAccts> </Group> </ListOfGroups> <?xml version='1.0' encoding='UTF-8'?> <ListOfGroups> <Group> <name>MyTestProfile2</name> <defaultMethod>Percent</defaultMethod> <ListOfAccts varName='list'> <Account> <acct>DU6202167</acct> <amount>60.0</amount> </Account> <Account> <acct>DU6202168</acct> <amount>40.0</amount> </Account> </ListOfAccts> </Group> </ListOfGroups>",
    "This method calculates the allocation of shares based on the ratios you enter. Example: Assume an order for 300 shares of stock ABC is transmitted. In the example code shown in the right side, you can see that: A ratio of 1.0 and 2.0 is set to Account A and Account B. Account A should receive 100 shares and Account B should receive 200 shares.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter <?xml version='1.0' encoding='UTF-8'?> <ListOfGroups> <Group> <name>MyTestProfile2</name> <defaultMethod>Ratio</defaultMethod> <ListOfAccts varName='list'> <Account> <acct>DU6202167</acct> <amount>1.0</amount> </Account> <Account> <acct>DU6202168</acct> <amount>2.0</amount> </Account> </ListOfAccts> </Group> </ListOfGroups> <?xml version='1.0' encoding='UTF-8'?> <ListOfGroups> <Group> <name>MyTestProfile2</name> <defaultMethod>Ratio</defaultMethod> <ListOfAccts varName='list'> <Account> <acct>DU6202167</acct> <amount>1.0</amount> </Account> <Account> <acct>DU6202168</acct> <amount>2.0</amount> </Account> </ListOfAccts> </Group> </ListOfGroups> <?xml version='1.0' encoding='UTF-8'?> <ListOfGroups> <Group> <name>MyTestProfile2</name> <defaultMethod>Ratio</defaultMethod> <ListOfAccts varName='list'> <Account> <acct>DU6202167</acct> <amount>1.0</amount> </Account> <Account> <acct>DU6202168</acct> <amount>2.0</amount> </Account> </ListOfAccts> </Group> </ListOfGroups>",
    "Advisors can use Model Portfolios to easily invest some or all of a client's assets into one or multiple custom-created portfolios, rather than tediously managing individual investments in single instruments. More about Model Portfolios The TWS API can access model portfolios in accounts where this functionality is available and a specific model has previously been setup in TWS. API functionality allows the client application to request model position update subscriptions, request model account update subscriptions, or place orders to a specific model. Model Portfolio functionality not available in the TWS API: Portfolio Model Creation Portfolio Model Rebalancing Portfolio Model Position or Cash Transfer  To request position updates from a specific model, the function IBApi::EClient::reqPositionsMulti can be used: Position Update Subscription by Model To request model account updates, there is the function IBApi::EClient::reqAccountUpdatesMulti, see: Account Value Update Subscriptions by Model  To place an order to a model, the IBApi.Order.ModelCode field must be set accordingly, for example:",
    "With TWS/IBGW build 983+, the API settings will have a new flag/checkbox, 'Use Account Groups with Allocation Methods' (enabled by default for new users). If not enabled, groups and profiles would behave the same as before. If it is checked, group and profile functionality will be merged. With TWS/IBGW Build 10.20+, this setting is now enabled by default, and moving forward into new versions, the two systems can be deemed as interchangeable for modifying allocation groups, placing orders, requesting account or portfolio summaries, or requesting multiple positions.",
    "For advisors to place orders to their allocation groups users would simply declare their allocation group name in the order object. This would be done with the Order's faGroup field. The example to the right references a standard market order placed to our allocation group, MyTestProfile.",
    "Delayed market data can only be used with EClient.reqMktData and EClient.reqHistoricalData. This does not function for tick data. The API can request Live, Frozen, Delayed and Delayed Frozen market data from Trader Workstation by switching market data type via the EClient.reqMarketDataType before making a market data request. A successful switch to a different (non-live) market data type for a particular market data request will be indicated by a callback to EWrapper.marketDataType with the ticker ID of the market data request which is returning a different type of data. A EClient.reqMarketDataType callback of 1 will occur automatically after invoking reqMktData if the user has live data permissions for the instrument.  Market Data Type ID Description Live 1 Live market data is streaming data relayed back in real time. Market data subscriptions are required to receive live market data. Frozen 2 Frozen market data is the last data recorded at market close. In TWS, Frozen data is displayed in gray numbers. When you set the market data type to Frozen, you are asking TWS to send the last available quote when there is not one currently available. For instance, if a market is currently closed and real time data is requested, -1 values will commonly be returned for the bid and ask prices to indicate there is no current bid/ask data available. TWS will often show a 'frozen' bid/ask which represents the last value recorded by the system. To receive the last know bid/ask price before the market close, switch to market data type 2 from the API before requesting market data. API frozen data requires TWS/IBG v.962 or higher and the same market data subscriptions necessary for real time streaming data. Delayed 3 Free, delayed data is 15 - 20 minutes delayed. In TWS, delayed data is displayed in brown background. When you set market data type to delayed, you are telling TWS to automatically switch to delayed market data if the user does not have the necessary real time data subscription. If live data is available a request for delayed data would be ignored by TWS. Delayed market data is returned with delayed Tick Types (Tick ID 66~76). Delayed Frozen 4 Requests delayed 'frozen' data for a user without market data subscriptions.",
    "1) If user sends reqMarketDataType(1) - TWS will start sending only regular (1) market data. 2) If user sends reqMarketDataType(2) - frozen, TWS will start sending regular (1) as default and frozen (2) market data. TWS sends marketDataType callback (1 or 2) indicating what market data will be sent after this callback. It can be regular or frozen. 3) If user sends reqMarketDataType(3) - delayed, TWS will start sending regular (1) as default and delayed (3) market data. 4) If user sends reqMarketDataType(4) - delayed-frozen, TWS will start sending regular (1) as default, delayed (3) and delayed-frozen (4) market data. Interactive Brokers data will always try to provide the most up to date market data possible, but will permit additional delayed or frozen data if available upon request.",
    "EClient.reqMarketDataType (marketDataType: int. Type of market data to retrieve.) Switches data type returned from reqMktData request to Live (1), Frozen (2), Delayed (3), or Frozen-Delayed (4).",
    "EWrapper.marketDataType (reqId: int. Request identifier used to track data. marketDataType: int. Type of market data to retrieve.)",
    "Historical Market data is available for Interactive Brokers market data subscribers in a range of methods and structures. This includes requests for historical bars, identical to the Trader Workstation, historical Time & Sales, as well as Histogram data.",
    "Historical market data has it's own set of market data limitations unique to other requests such as real time market data. This section will cover all limitations that effect historical market data in the Trader Workstation API.",
    "Historical data at IB is filtered for trade types which occur away from the NBBO such as combo legs, block trades, and derivative trades. For that reason the daily volume from the (unfiltered) real time data functionality will generally be larger than the (filtered) historical volume reported by historical data functionality. Also, differences are expected in other fields such as the VWAP between the real time and historical data feeds. As historical data at IB gets adjusted, compressed and filtered by default, there may be historical data differences if you request historical data at different time points.",
    "Volume data returned for historical bars can be modified to return in shares or lots. Open the Global Configuration window Navigate to 'API' and then 'Settings' on the left pane Scroll down to the 'Send market data in lots for US Stocks for dual-mode API clients' If the setting is checked, historical volume data will return as a Round Lot. If the setting is unchecked, historical volume data will return in Shares. ",
    "Although Interactive Brokers offers our clients high quality market data, IB is not a specialised market data provider and as such it is forced to put in place restrictions to limit traffic which is not directly associated to trading. A Pacing Violation occurs whenever one or more of the following restrictions is not observed: Important: these limitations apply to all our clients and it is not possible to overcome them. If your trading strategy's market data requirements are not met by our market data services please consider contacting a specialized provider.  Making identical historical data requests within 15 seconds. Making six or more historical data requests for the same Contract, Exchange and Tick Type within two seconds. Making more than 60 requests within any ten minute period. Note that when BID_ASK historical data is requested, each request is counted twice. In a nutshell, the information above can simply be put as 'do not request too much data too quick'.",
    "The other historical data limitations listed are general limitations for all trading platforms: Bars whose size is 30 seconds or less older than six months Expired futures data older than two years counting from the future's expiration date. Expired options, FOPs, warrants and structured products. End of Day (EOD) data for options, FOPs, warrants and structured products. Data for expired future spreads Data for securities which are no longer trading. Native historical data for combos. Historical data is not stored in the IB database separately for combos.; combo historical data in TWS or the API is the sum of data from the legs. Historical data for securities which move to a new exchange will often not be available prior to the time of the move. For example, SOXX stock moved to NASDAQ exchange on 15 Oct 2010, so no SOXX data before 15 Oct 2010 can be retrieved despite SOXX was listed in 2001. This limitation also applied to contract which specifies SMART as the exchange. Studies and indicators such as Weighted Moving Averages or Bollinger Bands are not available from the API.",
    "For many functions, such as EClient.reqHistoricalData, you will need to request market data for a contract. Given that you may not know how long a symbol has been available, you can use EClient.reqHeadTimestamp to find the first available point of data for a given whatToShow value. ReqHeadTimeStamp counts as an ongoing historical data request, similar to using EClient.reqHistoricalData's keepUpToDate=True flag. As a result, users should always: Cancel timestamp requests using EClient.cancelHeadTimeStamp. All EClient.reqHeadTimestamp requests follow the 30 second bar limitations, regardless of which bar size value has been requested.",
    "EClient.reqHeadTimestamp (tickerId: int., A unique identifier which will serve to identify the incoming data. contract: Contract. The IBApi.Contract you are interested in. whatToShow: String. The type of data to retrieve. See Historical Data Types useRTH: int. Whether (1) or not (0) to retrieve data generated only within Regular Trading Hours (RTH) formatDate: int. Using 1 will return UTC time in YYYYMMDD-hh:mm:ss format. Using 2 will return epoch time.) Returns the timestamp of earliest available historical data for a contract and data type.",
    "EWrapper.headTimestamp (requestId: int. Request identifier used to track data. headTimestamp: String. Value identifying earliest data date) The data requested will be returned to EWrapper.headTimeStamp.",
    "EWrapper.cancelHistogramData (tickerId: int. Request identifier used to track data.) A reqHeadTimeStamp request can be cancelled with EClient.cancelHeadTimestamp",
    "Historical Bar data returns a candlestick value based on the requested duration and bar size. This will always return an open, high, low, and close values. Based on which whatToShow value is used, you may also receive volume data. See the whatToShow section for more details.",
    "EClient.reqHistoricalData(reqId: int, A unique identifier which will serve to identify the incoming data. contract: Contract, The IBApi.Contract object you are working with. endDateTime: String, The request's end date and time. This should be formatted as 'YYYYMMDD HH:mm:ss TMZ' or an empty string indicates current present moment). Please be aware that endDateTime must be left as an empty string when requesting continuous futures contracts. durationStr: String, The amount of time (or Valid Duration String units) to go back from the request's given end date and time. barSizeSetting: String, The data's granularity or Valid Bar Sizes whatToShow: String, The type of data to retrieve. See Historical Data Types useRTH: bool, Whether (1) or not (0) to retrieve data generated only within Regular Trading Hours (RTH) formatDate: bool, The format in which the incoming bars' date should be presented. Note that for day bars, only yyyyMMdd format is available. keepUpToDate: bool, Whether a subscription is made to return updates of unfinished real time bars as they are available (True), or all data is returned on a one-time basis (False). If True, and endDateTime cannot be specified. Supported whatToShow values: Trades, Midpoint, Bid, Ask. chartOptions: TagValueList, This is a field used exclusively for internal use.)",
    "The Interactive Brokers Historical Market Data maintains a duration parameter which specifies the overall length of time that data can be collected. The duration specified will derive the bars of data that can then be collected.  Valid Duration String Units: Unit Description S Seconds D Day W Week M Month Y Year",
    "Bar sizes dictate the data returned by historical bar requests. The bar size will dictate the scale over which the OHLC/V is returned to the API.  Valid Bar Sizes: Bar Unit Bar Sizes secs 1, 5, 10, 15, 30 mins 1, 2, 3, 5, 10, 15, 20, 30 hours 1, 2, 3, 4, 8 day 1 weeks 1 months 1",
    "The functionality of market data requests are predicated on preset step sizes. As such, not all bar sizes will work with all duration values. The table listed here will discuss the smallest to largest bar size value for each duration string.  Duration Unit Bar units allowed Bar size Interval (Min/Max) S secs | mins 1 secs -> 1mins D secs | mins | hrs 5 secs -> 1 hours W sec | mins | hrs 10 secs -> 4 hrs M sec | mins | hrs 30 secs -> 8 hrs Y mins | hrs | d 1 mins-> 1 day",
    "The table below displays the maximum duration values allowed for a given bar. As an example, the maximum duration for Seconds values supported for 5 seconds bars are 86400 S. This means that if I want to retrieve more than 1 day's worth of 5 second bars, I will then need to request data in increments of D (days).  Bar Size Max Second Duration Max Day Duration Max Week Duration Max Month Duration Max Year Duration 1 secs 2000 S {Not Supported} {Not Supported} {Not Supported} {Not Supported} 5 secs 86400 S 365 D 52 W 12 M 68 Y 10 secs 86400 S 365 D 52 W 12 M 68 Y 15 secs 86400 S 365 D 52 W 12 M 68 Y 30 secs 86400 S 365 D 52 W 12 M 68 Y 1 min 86400 S 365 D 52 W 12 M 68 Y 2 mins 86400 S 365 D 52 W 12 M 68 Y 3 mins 86400 S 365 D 52 W 12 M 68 Y 5 mins 86400 S 365 D 52 W 12 M 68 Y 10 mins 86400 S 365 D 52 W 12 M 68 Y 15 mins 86400 S 365 D 52 W 12 M 68 Y 20 mins 86400 S 365 D 52 W 12 M 68 Y 30 mins 86400 S 365 D 52 W 12 M 68 Y 1 hour 86400 S 365 D 52 W 12 M 68 Y 2 hours 86400 S 365 D 52 W 12 M 68 Y 3 hours 86400 S 365 D 52 W 12 M 68 Y 4 hours 86400 S 365 D 52 W 12 M 68 Y 8 hours 86400 S 365 D 52 W 12 M 68 Y 1 day 86400 S 365 D 52 W 12 M 68 Y 1M 86400 S 365 D 52 W 12 M 68 Y 1W 86400 S 365 D 52 W 12 M 68 Y",
    "Interactive Brokers will return historical market data based on the format set from the request. The formatDate parameter can be provided an integer value to indicate how data should be returned. Note: Day bars will only return dates in the yyyyMMdd format. Time data is not available.  Value Description Example 1 String Time Zone Date '20231019 16:11:48 America/New_York' 2 Epoch Date 1697746308 3 Day & Time Date '1019 16:11:48 America/New_York'",
    "When using keepUpToDate=True for historical data requests, you will see several bars returned with the same timestamp. This is because data is updated approximately every 1-2 seconds. These updates compound until the end of the specified bar size. In our example to the below, 15 second bars are requested, and we can see the 30 second bar built out incrementally until 20231204 13:30:30 is completed. At which point, we move on to the 45th second bars. This same logic extends into minute, hourly, or daily bars.  Note: keepUpToDate is only available for whatToShow: Trades, Midpoint, Bid, Ask  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter Date: 20231204 13:30:30 US/Eastern, Open: 188.56, High: 188.56, Low: 188.54, Close: 188.55 Date: 20231204 13:30:30 US/Eastern, Open: 188.56, High: 188.56, Low: 188.54, Close: 188.55 Date: 20231204 13:30:30 US/Eastern, Open: 188.56, High: 188.56, Low: 188.54, Close: 188.55 Date: 20231204 13:30:30 US/Eastern, Open: 188.56, High: 188.56, Low: 188.54, Close: 188.55 Date: 20231204 13:30:30 US/Eastern, Open: 188.56, High: 188.56, Low: 188.54, Close: 188.55 Date: 20231204 13:30:30 US/Eastern, Open: 188.56, High: 188.56, Low: 188.54, Close: 188.56 Date: 20231204 13:30:30 US/Eastern, Open: 188.56, High: 188.56, Low: 188.54, Close: 188.56 Date: 20231204 13:30:30 US/Eastern, Open: 188.56, High: 188.57, Low: 188.54, Close: 188.55 Date: 20231204 13:30:45 US/Eastern, Open: 188.54, High: 188.54, Low: 188.54, Close: 188.54 Date: 20231204 13:30:30 US/Eastern, Open: 188.56, High: 188.56, Low: 188.54, Close: 188.55 Date: 20231204 13:30:30 US/Eastern, Open: 188.56, High: 188.56, Low: 188.54, Close: 188.55 Date: 20231204 13:30:30 US/Eastern, Open: 188.56, High: 188.56, Low: 188.54, Close: 188.55 Date: 20231204 13:30:30 US/Eastern, Open: 188.56, High: 188.56, Low: 188.54, Close: 188.55 Date: 20231204 13:30:30 US/Eastern, Open: 188.56, High: 188.56, Low: 188.54, Close: 188.55 Date: 20231204 13:30:30 US/Eastern, Open: 188.56, High: 188.56, Low: 188.54, Close: 188.56 Date: 20231204 13:30:30 US/Eastern, Open: 188.56, High: 188.56, Low: 188.54, Close: 188.56 Date: 20231204 13:30:30 US/Eastern, Open: 188.56, High: 188.57, Low: 188.54, Close: 188.55 Date: 20231204 13:30:45 US/Eastern, Open: 188.54, High: 188.54, Low: 188.54, Close: 188.54 Date: 20231204 13:30:30 US/Eastern, Open: 188.56, High: 188.56, Low: 188.54, Close: 188.55 Date: 20231204 13:30:30 US/Eastern, Open: 188.56, High: 188.56, Low: 188.54, Close: 188.55 Date: 20231204 13:30:30 US/Eastern, Open: 188.56, High: 188.56, Low: 188.54, Close: 188.55 Date: 20231204 13:30:30 US/Eastern, Open: 188.56, High: 188.56, Low: 188.54, Close: 188.55 Date: 20231204 13:30:30 US/Eastern, Open: 188.56, High: 188.56, Low: 188.54, Close: 188.55 Date: 20231204 13:30:30 US/Eastern, Open: 188.56, High: 188.56, Low: 188.54, Close: 188.56 Date: 20231204 13:30:30 US/Eastern, Open: 188.56, High: 188.56, Low: 188.54, Close: 188.56 Date: 20231204 13:30:30 US/Eastern, Open: 188.56, High: 188.57, Low: 188.54, Close: 188.55 Date: 20231204 13:30:45 US/Eastern, Open: 188.54, High: 188.54, Low: 188.54, Close: 188.54",
    "EWrapper.historicalData (reqId: int. Request identifier used to track data. bar: Bar. The OHLC historical data Bar. The time zone of the bar is the time zone chosen on the TWS login screen. Smallest bar size is 1 second.) The historical data will be delivered via the EWrapper.historicalData method in the form of candlesticks. The time zone of returned bars is the time zone chosen in TWS on the login screen.  Default Return Format The text on the right is the default formatting for returning data. The datetime value here was modified to return UTC datetime formatting. Note: The datetime value indicates the beginning of the request range rather than the end. The last bar on the right would then indicate data that took place between 20241111-16:53:15 to 20241111-16:53:20.  Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter Date: 20241111-16:53:00, Open: 222.97, High: 222.97, Low: 222.96, Close: 222.97, Volume: 300, WAP: 222.965, BarCount: 2 Date: 20241111-16:53:05, Open: 222.97, High: 223.01, Low: 222.96, Close: 223.01, Volume: 5378, WAP: 222.981, BarCount: 38 Date: 20241111-16:53:10, Open: 223.02, High: 223.02, Low: 222.98, Close: 222.98, Volume: 3659, WAP: 222.997, BarCount: 24 Date: 20241111-16:53:15, Open: 222.98, High: 222.98, Low: 222.96, Close: 222.97, Volume: 2585, WAP: 222.963, BarCount: 24 Date: 20241111-16:53:00, Open: 222.97, High: 222.97, Low: 222.96, Close: 222.97, Volume: 300, WAP: 222.965, BarCount: 2 Date: 20241111-16:53:05, Open: 222.97, High: 223.01, Low: 222.96, Close: 223.01, Volume: 5378, WAP: 222.981, BarCount: 38 Date: 20241111-16:53:10, Open: 223.02, High: 223.02, Low: 222.98, Close: 222.98, Volume: 3659, WAP: 222.997, BarCount: 24 Date: 20241111-16:53:15, Open: 222.98, High: 222.98, Low: 222.96, Close: 222.97, Volume: 2585, WAP: 222.963, BarCount: 24 Date: 20241111-16:53:00, Open: 222.97, High: 222.97, Low: 222.96, Close: 222.97, Volume: 300, WAP: 222.965, BarCount: 2 Date: 20241111-16:53:05, Open: 222.97, High: 223.01, Low: 222.96, Close: 223.01, Volume: 5378, WAP: 222.981, BarCount: 38 Date: 20241111-16:53:10, Open: 223.02, High: 223.02, Low: 222.98, Close: 222.98, Volume: 3659, WAP: 222.997, BarCount: 24 Date: 20241111-16:53:15, Open: 222.98, High: 222.98, Low: 222.96, Close: 222.97, Volume: 2585, WAP: 222.963, BarCount: 24  EWrapper.historicalSchedule (reqId: int. Request identifier used to track data. startDateTime: String. Returns the start date and time of the historical schedule range. endDateTime: String. Returns the end date and time of the historical schedule range. timeZone: String. Returns the time zone referenced by the schedule. sessions: HistoricalSession[]. Returns the full block of historical schedule data for the duration.) In the case of whatToShow='schedule', you will need to also define the EWrapper.historicalSchedule value. This is a unique method that will only be called in the case of the unique whatToShow value to display calendar information.  EWrapper.historicalDataUpdate (reqId: int. Request identifier used to track data. bar: Bar. The OHLC historical data Bar. The time zone of the bar is the time zone chosen on the TWS login screen. Smallest bar size is 1 second.) Receives bars in real time if keepUpToDate is set as True in reqHistoricalData. Similar to realTimeBars function, except returned data is a composite of historical data and real time data that is equivalent to TWS chart functionality to keep charts up to date. Returned bars are successfully updated using real time data.  EWrapper.historicalDataEnd (reqId: int. Request identifier used to track data. start: String. Returns the starting time of the first historical data bar. end: String. Returns the end time of the last historical data bar.) Marks the ending of the historical bars reception.",
    "The historical bar types listed below can be used as the whatToShow value for historical bars. These values are used to request different data such as Trades, Midpoint, Bid_Ask data and more. Some bar types support more products than others. Please note the Supported Products section for each bar type below.",
    "Bar Values: Open High Low Close Volume First traded price Highest traded price Lowest traded price Last traded price Total traded volume Supported Products: Cryptocurrency",
    "Bar Values: Open High Low Close Volume Starting ask price Highest ask price Lowest ask price Last ask price N/A Supported Products: Bonds, CFDs, Commodities, Cryptocurrencies, ETFs, FOPs, Forex, Funds, Futures, Metals, Options, SSFs, Stocks, Structured Products, Warrants",
    "Bar Values: Open High Low Close Volume Starting bid price Highest bid price Lowest bid price Last bid price N/A Supported Products: Bonds, CFDs, Commodities, Cryptocurrencies, ETFs, FOPs, Forex, Funds, Futures, Metals, Options, SSFs, Stocks, Structured Products, Warrants",
    "Bar Values: Open High Low Close Volume Time average bid Max Ask Min Bid Time average ask N/A Supported Products: Bonds, CFDs, Commodities, Cryptocurrencies, ETFs, FOPs, Forex, Funds, Futures, Metals, Options, SSFs, Stocks, Structured Products, Warrants",
    "Bar Values: Open High Low Close Volume Starting Fee Rate Highest fee rate Lowest fee rate Last fee rate N/A Supported Products: Stocks, ETFs,",
    "Bar Values: Open High Low Close Volume Starting volatility Highest volatility Lowest volatility Last volatility N/A Supported Products: ETFs, Indices, Stocks",
    "Bar Values: Open High Low Close Volume Starting midpoint price Highest midpoint price Lowest midpoint price Last midpoint price N/A Supported Products: Bonds, CFDs, Commodities, Cryptocurrencies, ETFs, FOPs, Forex, Funds, Futures, Metals, Options, SSFs, Stocks, Structured Products, Warrants",
    "Bar Values: Open High Low Close Volume Starting implied volatility Highest implied volatility Lowest implied volatility Last implied volatility N/A Supported Products: ETFs, Indices, Stocks",
    "Bar Values: Open High Low Close Volume Starting ask price Highest ask price Lowest ask price Last ask price N/A Supported Products: Bonds, CFDs, Commodities, Cryptocurrencies, ETFs, Forex, Funds, Futures, Indices, Metals, SSFs, Stocks, Structured Products, Warrants NOTE: SCHEDULE data returns only on 1 day bars but returns historical trading schedule only with no information about OHLCV.",
    "Bar Values: Open High Low Close Volume First traded price Highest traded price Lowest traded price Last traded price Total traded volume Supported Products: Bonds, ETFs, FOPs, Futures, Indices, Metals, Options, SSFs, Stocks, Structured Products, Warrants NOTES: TRADES data is adjusted for splits, but not dividends.",
    "Bar Values: Open High Low Close Volume Starting ask yield Highest ask yield Lowest ask yield Last ask yield N/A Supported Products: Indices Note: Yield historical data only available for corporate bonds.",
    "Bar Values: Open High Low Close Volume Starting bid yield Highest bid yield Lowest bid yield Last bid yield N/A Supported Products: Indices Note: Yield historical data only available for corporate bonds.",
    "Bar Values: Open High Low Close Volume Time average bid yield Highest ask yield Lowest bid yield Time average ask yield N/A Supported Products: Indices Note: Yield historical data only available for corporate bonds.",
    "Bar Values: Open High Low Close Volume Starting last yield Highest last yield Lowest last yield Last last yield N/A Supported Products: Indices Note: Yield historical data only available for corporate bonds.",
    "Instead of returned data points as a function of time as with the function IBApi::EClient::reqHistoricalData, histograms return data as a function of price level with function IBApi::EClient::reqHistogramData",
    "EClient.reqHistogramData (requestId: int, id of the request contract: Contract, Contract object that is subject of query. useRth: bool, Data from regular trading hours (1), or all available hours (0). period: String, string value of requested date range. This will be tied to the same bar size strings as the historical bar sizes) Returns data histogram of specified contract.",
    "EWrapper.histogramData (requestId: int. Request identifier used to track data. data: HistogramEntry[]. Returned Tuple of histogram data, number of trades at specified price level.) Returns relevant histogram data.",
    "EClient.cancelHistogramData (tickerId: int. Request identifier used to track data.) An active histogram request which has not returned data can be cancelled with EClient.cancelHistogramData",
    "The highest granularity of historical data from IB's database can be retrieved using the API function EClient.reqHistoricalTicks for historical time and sales values. Historical Time & Sales will return the same data as what is available in Trader Workstation under the Time and Sales window. This is a series of ticks indicating each trade based on the requested values. Historical Tick-By-Tick data is not available for combos. Data will not be returned from multiple trading sessions in a single request; Multiple requests must be used. To complete a full second, more ticks may be returned than requested. Time & Sales data requires a Level 1, Top Of Book market data subscription. This would be the same subscription as EClient.reqMktData() or EClient.reqHistoricalData().",
    "EClient.reqHistoricalTicks (requestId: int, id of the request contract: Contract, Contract object that is subject of query. startDateTime: String, i.e. '20170701 12:01:00'. Uses TWS timezone specified at login. endDateTime: String, i.e. '20170701 13:01:00'. In TWS timezone. Exactly one of startDateTime or endDateTime must be defined. numberOfTicks: int, Number of distinct data points. Max is 1000 per request. whatToShow: String, (Bid_Ask, Midpoint, or Trades) Type of data requested. useRth: bool, Data from regular trading hours (1), or all available hours (0). ignoreSize: bool, Omit updates that reflect only changes in size, and not price. Applicable to Bid_Ask data requests. Note: Options and Future Options will only display a value of 1, unless to indicate a removed bid/ask, which will instead return a price and size value of 0. miscOptions: list, Should be defined as null; reserved for internal use.) Requests historical Time & Sales data for an instrument.",
    "Data is returned to unique functions based on what is requested in the whatToShow field. IBApi.EWrapper.historicalTicks for whatToShow=MIDPOINT IBApi.EWrapper.historicalTicksBidAsk for whatToShow=BID_ASK IBApi.EWrapper.historicalTicksLast for for whatToShow=TRADES  EWrapper.historicalTicks (reqId: int, id of the request ticks: ListOfHistoricalTick, object containing a list of tick values for the requested timeframe. done: bool, return whether or not this is the end of the historical ticks requested.) For whatToShow=MIDPOINT  EWrapper.historicalTicksBidAsk (reqId: int, id of the request ticks: ListOfHistoricalTick, object containing a list of tick values for the requested timeframe. done: bool, return whether or not this is the end of the historical ticks requested.) For whatToShow=BidAsk  EWrapper.historicalTicksLast (reqId: int, id of the request ticks: ListOfHistoricalTick, object containing a list of tick values for the requested timeframe. done: bool, return whether or not this is the end of the historical ticks requested.) For whatToShow=Last & AllLast",
    "The tick attribute pastLimit is also returned with streaming Tick-By-Tick responses. Check Halted and Unhalted ticks section. If tick has zero price, zero size and pastLimit flag is set - this is 'Halted' tick. If tick has zero price, zero size and followed immediately after 'Halted' tick - this is 'Unhalted' tick.",
    "When creating dates in the TWS API, Interactive Brokers typically supports three methods: Operator Time Zone Exchange Time Zone Coordinated Universal Time (UTC)",
    "Operator Time Zone is the local time set by the user in Trader Workstation. The Operator Time Zone typically maintains a unique formatting structure separate from Exchange Time Zones; however, they can match.  A user can confirm their Operator Time Zone by launching Trader Workstation then, before logging in, click 'More Options >'.   Users can then confirm their active Operator Time Zone by referencing the 'Time Zone' field. For US residents, this will typically appear as 'America/New_York', 'America/Chicago', or 'America/Los_Angeles'. It is essential to note the Time Zone value, as this will be the value supplied when making requests with the Operator Time Zone.   After logging in to Trader Workstation or IB Gateway, you would be able to submit time stamps in the format of 'YYYYMMDD HH:mm:ss Operator/Time_Zone'. Given our prior example, a historical data endDateTime value would appear as'20250101 23:59:59 America/Chicago'. This would mean the latest value I want is just before midnight in Chicago on January 1st, 2025. Even if I am trading contracts in New York or overseas, all historical data requests would be relative to my own time zone.",
    "The exchange Time Zone is the value the exchange itself uses to calculate time. This value is typically unique to the Operator Time Zone, but these values can overlap.  As an example, the New York Stock Exchange operates on 'US/Eastern'. However, the CME operates on 'US/Central'. This values can be programmatically requested using the EClient.reqContractDetails method, and then received from EWrapper.contractDetails in contractDetails.Time ZoneId. Note that this will be interpreted differently from 'America/Chicago'. ",
    "UTC is a time standard centered around Greenwich Mean Time (GMT). UTC historical data can be formatted as 'YYYYMMDD-hh:mm:ss'. Please keep in mind this is based on UTC+0, and as a reference, US/Eastern time is approximately UTC-4 or UTC-5 depending on U.S. Daylight savings. Please note GMT is unaffected by Daylight savings, and so 09:00:00 will be the same time of day year round regardless of the exchange's or your local daylight savings observation.",
    "You may also log in to the Trader Workstation and modify this in the Global Configuration under API and then Settings. Here, you will find a modifiable setting labeled 'Send instrument-specific attributes for dual-mode API client in' Here you can select one of the following: operator timezone: refers to the local timezone you have set in the Trader Workstation or IB Gateway instrument timezone: refers to the timezone of the requested exchange. If 'SMART' is used, this will use the instrument's primary exchange. UTC format: refers to a standardized return using UTC as the timezone. This will be returned in the format YYYYMMDD-hh:mm:ss ",
    "",
    "For all data, besides Delayed Watchlist Data, a paid data subscription is required to receive market data through the API. See the Market Data Subscriptions page for more information. Live market data and historical bars are currently not available from the API for the exchange OSE. Only 15 minute delayed streaming data will be available for this exchange. Some Available Tick Types may not be provided due to the contract details, the time that you run the code...... ,etc. To verify whether the specific Available Tick Type is provided, it is suggested to manually check the data in TWS. Different Available Tick Types have different updating frequency.  The bid, ask, and last size quotes are displayed in shares instead of lots. API users have the option to configure the TWS API to work in compatibility mode for older programs, but we recommend migrating to 'quotes in shares' at your earliest convenience. To display quotes as lots, from the Global Configuration > API > Settings page, check 'Bypass US Stocks market data in shares warning for API orders.' ",
    "Real time and historical data functionality is combined through the EClient.reqRealTimeBars request. reqRealTimeBars will create an active subscription that will return a single bar in real time every five seconds that has the OHLC values over that period. reqRealTimeBars can only be used with a bar size of 5 seconds. Important: real time bars subscriptions combine the limitations of both, top and historical market data. Make sure you observe Market Data Lines and Pacing Violations for Small Bars (30 secs or less). For example, no more than 60 *new* requests for real time bars can be made in 10 minutes, and the total number of active active subscriptions of all types cannot exceed the maximum allowed market data lines for the user.",
    "EClient.reqRealTimeBars (tickerId: int. Request identifier used to track data. contract: Contract. The Contract object for which the depth is being requested barSize: int. Currently being ignored whatToShow: String. The nature of the data being retrieved: Available Values: TRADES, MIDPOINT, BID, ASK useRTH: int. Set to 0 to obtain the data which was also generated outside of the Regular Trading Hours, set to 1 to obtain only the RTH data) realTimeBarOptions: List<TagValue>. Internal use only. Requests real time bars. Only 5 seconds bars are provided. This request is subject to the same pacing as any historical data request: no more than 60 API queries in more than 600 seconds. Real time bars subscriptions are also included in the calculation of the number of Level 1 market data subscriptions allowed in an account.",
    "EWrapper.realtimeBar (reqId: int. Request identifier used to track data. time: long. The bar's start date and time (Epoch/Unix time) open: double. The bar's open point high: double. The bar's high point low: double. The bar's low point close: double. The bar's closing point volume: decimal. The bar's traded volume (only returned for TRADES data) WAP: decimal. The bar's Weighted Average Price rounded to minimum increment (only available for TRADES). count: int. The number of trades during the bar's timespan (only available for TRADES).) Receives the real time 5 second bars.",
    "EClient.cancelRealTimeBars (tickerId: int. Request identifier used to track data.) Cancels Real Time Bars' subscription.",
    "A single data request from the API can receive aggregate quotes from multiple exchanges. The tick types 'bidExch' (tick type 32), 'askExch' (tick type 33), 'lastExch' (tick type 84) are used to identify the source of a quote. To preserve bandwidth, the data returned to these tick types consists of a sequence of capital letters rather than a long list of exchange names for every returned exchange name field. To find the full exchange name corresponding to a single letter code returned in tick types 32, 33, or 84, and API function IBApi::EClient::reqSmartComponents is available. Note: This function can only be used when the exchange is open. Different IB contracts have a different exchange map containing the set of exchanges on which they trade. Each exchange map has a different code, such as 'a6' or 'a9'. This exchange mapping code is returned to EWrapper.tickReqParams immediately after a market data request is made by a user with market data subscriptions. To find a particular map of single letter codes to full exchange names, the function reqSmartComponents is invoked with the exchange mapping code returned to tickReqParams. For instance, a market data request for the IBKR US contract may return the exchange mapping identifier 'a6' to EWrapper.tickReqParams . Invoking the function EClient.reqSmartComponents with the symbol 'a9' will reveal the list of exchanges offering market data for the IBKR US contract, and their single letter codes. The code for 'ARCA' may be 'P'. In that case if 'P' is returned to the exchange tick types, that would indicate the quote was provided by ARCA.",
    "EClient.reqSmartComponents (reqId: int. Request identifier used to track data. bboExchange: String. Mapping identifier received from EWrapper.tickReqParams) Returns the mapping of single letter codes to exchange names given the mapping identifier.",
    "EWrapper.smartComponents (reqId: int. Request identifier used to track data. smartComponentMap: SmartComponentMap. Unique object containing a map of all key-value pairs) Containing a bit number to exchange + exchange abbreviation dictionary. All IDs can be initially retrieved using reqTickParams.",
    "To check which exchanges offer deep book data, the function EClient.reqMktDepthExchanges can be invoked. It will return a list of exchanges from where market depth is available if the user has the appropriate market data subscription. API 'Exchange' fields for which a market depth request would return market maker information and result in a callback to EWrapper.updateMktDepthL2 will be indicated in the results from the EWrapper.mktDepthExchanges field by a 'True' value in the 'isL2' field:",
    "EClient.reqMktDepthExchanges () Requests venues for which market data is returned to updateMktDepthL2 (those with market makers).",
    "EWrapper.mktDepthExchanges (depthMktDataDescriptions: DepthMktDataDescription[]. A list containing all available exchanges offering market depth.) Called when receives Depth Market Data Descriptions.",
    "Market depth data, also known as level II, represents an instrument's order book. Via the TWS API it is possible to obtain this information with the EClient.reqMarketDepth function. Unlike Top Market Data (Level I), market depth data is sent without sampling or filtering, however we cannot guarantee that every price quoted for a particular security will be displayed. In particular, odd lot orders are not included. It is possible to Smart-route a EClient.reqMarketDepth request to receive aggregated data from all available exchanges. An integral part of processing the incoming data is monitoring EWrapper.error for message 317 'Market depth data has been RESET. Please empty deep book contents before applying any new entries.' and handling it appropriately, otherwise the update process would be corrupted. Market Depth is not support for Calendar Spreads or Combos.",
    "Important: Please note that the languages use different method names for requesting market depth. The C# and Visual Basic APIs use reqMarketDepth(). The Python, Java, and C++ APIs use reqMktDepth().  EClient.reqMarketDepth (tickerId: int. Request identifier used to track data. contract: Contract. The Contract for which the depth is being requested. numRows: int. The number of rows on each side of the order book. isSmartDepth: bool. Flag indicates that this is a Smart-routed market depth request. Supplying true will return data identical to the TWS Book Trader while False returns direct routed data similar to the TWS Market Depth tool. mktDepthOptions: List. Internal use only. Leave an empty array or None type.) Requests the contract's market depth (order book).",
    "EWrapper.updateMktDepth (tickerId: int. Request identifier used to track data. position: int. The order book's row being updated operation: int. Indicates a change in the row's value.: 0 = insert (insert new price into the row). 1 = update (update the existing order in the row). 2 = delete (delete the existing order at the row). side: int. 0 for ask, 1 for bid price: double. The order's price size: decimal. The order's size) Returns the order book. Used for direct routed requests only.  EWrapper.updateMktDepthL2 (tickerId: int. Request identifier used to track data. position: int. The order book's row being updated. marketMaker: String. The exchange holding the order if isSmartDepth is True, otherwise the MPID of the market maker. operation: int. Indicates a change in the row's value.: 0 = insert (insert new price into the row). 1 = update (update the existing order in the row). 2 = delete (delete the existing order at the row). side: int. 0 for ask, 1 for bid price: double. The order's price size: decimal. The order's size isSmartDepth: bool. Flag indicating if this is smart depth response (True) or the MPID of the market maker.) Returns the order book.",
    "EClient.cancelMarketDepth (tickerId: int. Request identifier used to track data. isSmartDepth: bool. Flag indicates that this is smart depth request.) Cancel's market depth's request.",
    "The option greek values- delta, gamma, theta, vega- are returned by default following a reqMktData() request for the option. See Available Tick Types Tick types 'Bid Option Computation' (#10), 'Ask Option Computation' (#11), 'Last Option Computation' (#12), and 'Model Option Computation' (#13) return all Greeks (delta, gamma, vega, theta), the underlying price and the stock and option reference price when requested. MODEL_OPTION_COMPUTATION also returns model implied volatility. Note that to receive live greek values it is necessary to have market data subscriptions for both the option and the underlying contract. The implied volatility for an option given its price and the price of the underlying can be calculated with the function EClient.calculateImpliedVolatility. Alternatively, given the price of the underlying and an implied volatility it is possible to calculate the option price using the function EClient.calculateOptionPrice. After the request, the option specific information will be delivered via the EWrapper.tickOptionComputation method.",
    "EClient.reqMktData (reqId: int. Request identifier for tracking data. contract: Contract. Contract object used for specifying an instrument. genericTickList: String. Comma separated ids of the available generic ticks. snapshot: bool. Set to True for snapshot data with a relevant subscription or False for live data. regulatorySnapshot: bool. Set to True for a paid, regulatory snapshot or False for live data. mktDataOptions: List<TagValue>. Internal use only.) Greeks are requested automatically when pulling market data for an Options contract. Users that do not have a valid Market Data Subscription for the underlying contract will receive an error that Market Data Is Not Subscribed. This error can be ignored if Greeks are not wanted.",
    "EClient.calculateOptionPrice (reqId: int. Request identifier used to track data. contract: Contract. The Contract object for which the depth is being requested volatility: double. Hypothetical volatility. underPrice: double. Hypothetical option's underlying price. optionPriceOptions: List<TagValue>. Internal use only. Send an empty tag value list.) Calculates an option's price based on the provided volatility and its underlying's price.",
    "EClient.calculateImpliedVolatility (reqId: int. Request identifier used to track data. contract: Contract. The Contract object for which the depth is being requested optionPrice: double. Hypothetical option price. underPrice: double. Hypothetical option's underlying price. impliedVolatilityOptions: List<TagValue>. Internal use only. Send an empty tag value list.) Calculate the volatility for an option. Request the calculation of the implied volatility based on hypothetical option and its underlying prices.",
    "EWrapper.tickOptionComputation (tickerId the request's unique identifier. field: int. Specifies the type of option computation. Pass the field value into TickType.getField(int tickType) to retrieve the field description. For example, a field value of 13 will map to modelOptComp, etc. 10 = Bid 11 = Ask 12 = Last tickAttrib: int. 0 - return based, 1- price based. impliedVolatility: double. the implied volatility calculated by the TWS option modeler, using the specified tick type value. delta: double. The option delta value. optPrice: double. The option price. pvDividend: double. The present value of dividends expected on the option's underlying. gamma: double. The option gamma value. vega: double. The option vega value. theta: double. The option theta value. undPrice: double. The price of the underlying.) Receives option specific market data. This method is called when the market in an option or its underlier moves. TWS's option model volatilities, prices, and deltas, along with the present value of dividends expected on that options underlier are received.",
    "Streaming market data values corresponding to data shown in TWS watchlists is available via the EClient.reqMktData. This data is not tick-by-tick but consists of aggregate snapshots taken several times per second. A set of 'default' tick types are returned by default from a call to EClient.reqMktData, and additional tick types are available by specifying the corresponding generic tick type in the market data request. Including the generic tick types many, but not all, types of data are available that can be displayed in TWS watchlists by adding additional columns.  Using the TWS API, you can request real time market data for trading and analysis. From the API, market data returned from the function IBApi.EClient.reqMktData corresponds to market data displayed in TWS watchlists. This data is not tick-by-tick but consists of aggregated snapshots taken at intra-second intervals which differ depending on the type of instrument:  Product Frequency Stocks, Futures and others 250 ms US Options 100 ms FX pairs 5 ms",
    "EClient.reqMktData (reqId: int. Request identifier for tracking data. contract: Contract. Contract object used for specifying an instrument. genericTickList: String. Comma separated ids of the available generic ticks. snapshot: bool. Used to retrieve a single snapshot of data for those with an existing market data subscirption. regulatorySnapshot: bool. Used to retrieve a single snapshot of paid data. Each snapshot costs $0.01. See here for more information about Regulatory Snapshots and Market Data. mktDataOptions: List<TagValue>. Internal use only.) Requests real time market data. Returns market data for an instrument either in real time or 10-15 minutes delayed data.",
    "Watchlist market data at Interactive Brokers is derived from time-based snapshot intervals which vary by product and region. This means that a given tick will only update as frequently as its interval allows. See the table for more details on product specifics.  Product Frequency United States Stocks, Futures, Bonds, Indices 250ms Options 10ms Forex 5ms Europe All Products 250ms Asia All Products 250ms",
    "The most common tick types are delivered automatically after a successful market data request. There are however other tick types available by explicit request: the generic tick types. When invoking IBApi.EClient.reqMktData, specific generic ticks can be requested via the genericTickList parameter of the function: See the Available Tick Types section for more information on generic ticks.",
    "With an exchange market data subscription, such as Network A (NYSE), Network B(ARCA), or Network C(NASDAQ) for US stocks, it is possible to request a snapshot of the current state of the market once instead of requesting a stream of updates continuously as market values change. By invoking the EClient.reqMktData function passing in true for the snapshot parameter, the client application will receive the currently available market data once before a EWrapper.tickSnapshotEnd event is sent 11 seconds later. Snapshot requests can only be made for the default tick types; no generic ticks can be specified. It is important to note that a snapshot request will only return available data over the 11 second span; in some cases values may not be returned for all tick types.  EWrapper.tickSnapshotEnd (tickerId: int. Request identifier used to track data.) When requesting market data snapshots, this market will indicate the snapshot reception is finished. Expected to occur 11 seconds after beginning of request.",
    "The fifth argument to reqMktData specifies a regulatory snapshot request to US stocks and options. For stocks, there are individual exchange-specific market data subscriptions necessary to receive streaming quotes. For instance, for NYSE stocks this subscription is known as 'Network A', for ARCA/AMEX stocks it is called 'Network B' and for NASDAQ stocks it is 'Network C'. Each subscription is added a la carte and has a separate market data fee. Alternatively, there is also a 'US Securities Snapshot Bundle' subscription which does not provide streaming data but which allows for real time calculated snapshots of US market NBBO prices. By setting the 5th parameter in the function EClient::reqMktData to True, a regulatory snapshot request can be made from the API. The returned value is a calculation of the current market state based on data from all available exchanges. Important: Each regulatory snapshot made will incur a fee of 0.01 USD to the account. This applies to both live and paper accounts.. If the monthly fee for regulatory snapshots reaches the price of a particular 'Network' subscription, the user will automatically be subscribed to that Network subscription for continuous streaming quotes and charged the associated fee for that month. At the end of the month the subscription will be terminated. Each listing exchange will be capped independently and will not be combined across listing exchanges. Requesting regulatory snapshots is subject to pacing limitations: No more than one request per second.  The following table lists the cost and maximum allocation for regulatory snapshot quotes:  Listed Network Feed Price per reqSnapshot request Pro or non-Pro Max reqSnapshot request NYSE (Network A/CTA) 0.01 USD Pro 4500 NYSE (Network A/CTA) 0.01 USD Non-Pro 150 AMEX (Network B/CTA) 0.01 USD Pro 2300 AMEX (Network B/CTA) 0.01 USD Non-Pro 150 NASDAQ (Network C/UTP) 0.01 USD Pro 2300 NASDAQ (Network C/UTP) 0.01 USD Non-Pro 150",
    "Note: Please be aware that in the event subsequent orders are received with the same price value, but different size values, no new tickPrice value should be returned. Only an updated tickSize will denote that a new order was retrieved with the assumption the last tickPrice value will also correlate with the new size.  EWrapper.tickGeneric (tickerId: int. Request identifier used to track data. field: int. The type of tick being received. value: double. Return value corresponding to value. See Available Tick Types for more details.) Returns generic data back to requester. Used for an array of tick types and is used to represent general evaluations.  EWrapper.tickPrice (tickerId: int. Request identifier used to track data. tickType: int. The type of the price being received (See Tick ID field in Available Tick Types). price: double. The monetary value for the given tick type. attribs: TickAttrib. A TickAttrib object that contains price attributes such as TickAttrib::CanAutoExecute, TickAttrib::PastLimit and TickAttrib::PreOpen.) Market data tick price callback. Handles all price related ticks. Every tickPrice callback is followed by a tickSize. A tickPrice value of -1 or 0 followed by a tickSize of 0 indicates there is no data for this field currently available, whereas a tickPrice with a positive tickSize indicates an active quote of 0 (typically for a combo contract).  EWrapper.tickSize (tickerId: int. Request identifier used to track data. field: int. the type of size being received (i.e. bid size) size: int. the actual size. US stocks have a multiplier of 100.) Market data tick size callback. Handles all size-related ticks.  EWrapper.tickString (tickerId: int. Request identifier used to track data. field: int. The type of the tick being received value: String. Variable containining message response.) Market data callback. Note: Every tickPrice is followed by a tickSize. There are also independent tickSize callbacks anytime the tickSize changes, and so there will be duplicate tickSize messages following a tickPrice.",
    "A market data request is able to return data from multiple exchanges. After a market data request is made for an instrument covered by market data subscriptions, a message will be sent to function IBApi::EWrapper::tickReqParams with information about 'minTick', BBO exchange mapping, and available snapshot permissions. The exchange mapping identifier bboExchange will be a symbol such as 'a6' which can be used to decode the single letter exchange abbreviations returned to the bidExch, askExch, and lastExch fields by invoking the function IBApi::EClient::reqSmartComponents. More information about Component Exchanges. The minTick returned to tickReqParams indicates the minimum increment in market data values returned to the API. It can differ from the minTick value in the ContractDetails class. For instance, combos will often have a minimum increment of 0.01 for market data and a minTick of 0.05 for order placement.  EWrapper.tickReqParams (tickerId: int. Request identifier used to track data. minTick: Minimum tick for the contract on the exchange. bboExchange: String. Exchange offering the best bid offer. snapshotPermissions: Based on the snapshot parameter in EClient.reqMktData.) Displays the ticker with BBO exchange.",
    "IB does not provide market data for certain types of instruments, such as stock CFDs and forex CFDs. If a stock CFD or forex CFD is entered into a TWS watchlist, TWS will automatically display market data for the underlying ticker and show a 'U' icon next to the instrument name to indicate that the data is for the underlying instrument. From the API, when level 1 or level 2 market data is requested for a stock CFD or a forex CFD, a callback is made to the functions EWrapper.rerouteMktDataReq or EWrapper.rerouteMktDepthReq respectively with details about the underlying instrument in IB's database which does have market data.  EWrapper.rerouteMktDataReq (reqId: int. Request identifier used to track data. conId: int. Contract identifier of the underlying instrument which has market data. exchange: int. Primary exchange of the underlying.) Returns conid and exchange for CFD market data request re-route.  EWrapper.rerouteMktDepthReq (reqId: int. Request identifier used to track data. conId: int. Contract identifier of the underlying instrument which has market data. exchange: int. Primary exchange of the underlying.) Returns the conId and exchange for an underlying contract when a request is made for level 2 data for an instrument which does not have data in IB's database. For example stock CFDs and index CFDs.",
    "EClient.cancelMktData(tickerId: int. Request identifier used to track data.) Cancels a watchlist market data request.",
    "EClient.reqMktData will return data to various methods such as EWrapper.tickPrice, EWrapper.tickSize, EWrapper.tickString, etc. The values returned are dependent upon the generic tick requested and the type of data returned. The table below references which tick ID will be returned upon requesting a given generic tick. *RDD: These tick types are provided only when the user makes a request to EClient.reqMarketDataType(3) prior to their market data request. - : These ticks are returned by default and do not have any generic tick requirements.  Tick Name Description Generic tick required Delivery Method Tick Id Disable Default Market Data Disables standard market data stream and allows the TWS & API feed to prioritize other listed generic tick types. mdoff - - Bid Size Number of contracts or lots offered at the bid price. - IBApi.EWrapper.tickSize 0 Bid Price Highest priced bid for the contract. - IBApi.EWrapper.tickPrice 1 Ask Price Lowest price offer on the contract. - IBApi.EWrapper.tickPrice 2 Ask Size Number of contracts or lots offered at the ask price. - IBApi.EWrapper.tickSize 3 Last Price Last price at which the contract traded (does not include some trades in RTVolume). - IBApi.EWrapper.tickPrice 4 Last Size Number of contracts or lots traded at the last price. - IBApi.EWrapper.tickSize 5 High High price for the day. - IBApi.EWrapper.tickPrice 6 Low Low price for the day. - IBApi.EWrapper.tickPrice 7 Volume Trading volume for the day for the selected contract (US Stocks volume is display as Round Lots). - IBApi.EWrapper.tickSize 8 Close Price 'The last available closing price for the previous day. For US Equities we use corporate action processing to get the closing price so the close price is adjusted to reflect forward and reverse splits and cash and stock dividends.' - IBApi.EWrapper.tickPrice 9 Bid Option Computation Computed Greeks and implied volatility based on the underlying stock price and the option bid price. See Option Greeks - IBApi.EWrapper.tickOptionComputation 10 Ask Option Computation Computed Greeks and implied volatility based on the underlying stock price and the option ask price. See Option Greeks - IBApi.EWrapper.tickOptionComputation 11 Last Option Computation Computed Greeks and implied volatility based on the underlying stock price and the option last traded price. See Option Greeks - IBApi.EWrapper.tickOptionComputation 12 Model Option Computation Computed Greeks and implied volatility based on the underlying stock price and the option model price. Correspond to greeks shown in TWS. See Option Greeks - IBApi.EWrapper.tickOptionComputation 13 Open Tick Current session's opening price. Before open will refer to previous day. The official opening price requires a market data subscription to the native exchange of the instrument. - IBApi.EWrapper.tickPrice 14 Low 13 Weeks Lowest price for the last 13 weeks. For stocks only. 165 IBApi.EWrapper.tickPrice 15 High 13 Weeks Highest price for the last 13 weeks. For stocks only. 165 IBApi.EWrapper.tickPrice 16 Low 26 Weeks Lowest price for the last 26 weeks. For stocks only. 165 IBApi.EWrapper.tickPrice 17 High 26 Weeks Highest price for the last 26 weeks. For stocks only. 165 IBApi.EWrapper.tickPrice 18 Low 52 Weeks Lowest price for the last 52 weeks. For stocks only. 165 IBApi.EWrapper.tickPrice 19 High 52 Weeks Highest price for the last 52 weeks. For stocks only. 165 IBApi.EWrapper.tickPrice 20 Average Volume The average daily trading volume over 90 days. Multiplier of 100. For stocks only. 165 IBApi.EWrapper.tickSize 21 Open Interest '(Deprecated not currently in use) Total number of options that are not closed.' - IBApi.EWrapper.tickSize 22 Option Historical Volatility The 30-day historical volatility (currently for stocks). 104 IBApi.EWrapper.tickGeneric 23 Option Implied Volatility 'A prediction of how volatile an underlying will be in the future. The IB 30-day volatility is the at-market volatility estimated for a maturity thirty calendar days forward of the current trading day and is based on option prices from two consecutive expiration months.' 106 IBApi.EWrapper.tickGeneric 24 Option Bid Exchange Not Used. - IBApi.EWrapper.tickString 25 Option Ask Exchange Not Used. - IBApi.EWrapper.tickString 26 Option Call Open Interest Call option open interest. 101 IBApi.EWrapper.tickSize 27 Option Put Open Interest Put option open interest. 101 IBApi.EWrapper.tickSize 28 Option Call Volume Call option volume for the trading day. 100 IBApi.EWrapper.tickSize 29 Option Put Volume Put option volume for the trading day. 100 IBApi.EWrapper.tickSize 30 Index Future Premium The number of points that the index is over the cash index. 162 IBApi.EWrapper.tickGeneric 31 Bid Exchange 'For stock and options identifies the exchange(s) posting the bid price. See Component Exchanges' - IBApi.EWrapper.tickString 32 Ask Exchange 'For stock and options identifies the exchange(s) posting the ask price. See Component Exchanges' - IBApi.EWrapper.tickString 33 Auction Volume The number of shares that would trade if no new orders were received and the auction were held now. 225 IBApi.EWrapper.tickSize 34 Auction Price The price at which the auction would occur if no new orders were received and the auction were held now- the indicative price for the auction. Typically received after Auction imbalance (tick type 36) 225 IBApi.EWrapper.tickPrice 35 Auction Imbalance The number of unmatched shares for the next auction; returns how many more shares are on one side of the auction than the other. Typically received after Auction Volume (tick type 34) 225 IBApi.EWrapper.tickSize 36 Mark Price 'The mark price is the current theoretical calculated value of an instrument. Since it is a calculated value it will typically have many digits of precision.' 232 IBApi.EWrapper.tickPrice 37 Bid EFP Computation Computed EFP bid price - IBApi.EWrapper.tickEFP 38 Ask EFP Computation Computed EFP ask price - IBApi.EWrapper.tickEFP 39 Last EFP Computation Computed EFP last price - IBApi.EWrapper.tickEFP 40 Open EFP Computation Computed EFP open price - IBApi.EWrapper.tickEFP 41 High EFP Computation Computed high EFP traded price for the day - IBApi.EWrapper.tickEFP 42 Low EFP Computation Computed low EFP traded price for the day - IBApi.EWrapper.tickEFP 43 Close EFP Computation Computed closing EFP price for previous day - IBApi.EWrapper.tickEFP 44 Last Timestamp Time of the last trade (in UNIX time). - IBApi.EWrapper.tickString 45 Shortable Describes the level of difficulty with which the contract can be sold short. See Shortable 236 IBApi.EWrapper.tickGeneric 46 Fundamental_Ratios Contains an array of fundamental market data that correlate with the Fundamental Data available in the TWS Watchlist. Data returned in the format of, 'KEY1=VALUE1;KEY2=VALUE2;...KEY_N=VALUE_N'. 258 IBApi.EWrapper.tickString 47 RT Volume (Time & Sales) 'Last trade details (Including both ''Last'' and ''Unreportable Last'' trades). See RT Volume' 233 IBApi.EWrapper.tickString 48 Halted Indicates if a contract is halted. See Halted - IBApi.EWrapper.tickGeneric 49 Bid Yield Implied yield of the bond if it is purchased at the current bid. - IBApi.EWrapper.tickPrice 50 Ask Yield Implied yield of the bond if it is purchased at the current ask. - IBApi.EWrapper.tickPrice 51 Last Yield Implied yield of the bond if it is purchased at the last price. - IBApi.EWrapper.tickPrice 52 Custom Option Computation Greek values are based off a user customized price. - IBApi.EWrapper.tickOptionComputation 53 Trade Count Trade count for the day. 293 IBApi.EWrapper.tickGeneric 54 Trade Rate Trade count per minute. 294 IBApi.EWrapper.tickGeneric 55 Volume Rate Volume per minute. 295 IBApi.EWrapper.tickGeneric 56 Last RTH Trade Last Regular Trading Hours traded price. 318 IBApi.EWrapper.tickPrice 57 RT Historical Volatility 30-day real time historical volatility. 411 IBApi.EWrapper.tickGeneric 58 IB Dividends Contract's dividends. See IB Dividends. 456 IBApi.EWrapper.tickString 59 Bond Factor Multiplier The bond factor is a number that indicates the ratio of the current bond principal to the original principal 460 IBApi.EWrapper.tickGeneric 60 Regulatory Imbalance The imbalance that is used to determine which at-the-open or at-the-close orders can be entered following the publishing of the regulatory imbalance. 225 IBApi.EWrapper.tickSize 61 News Contract's news feed. 292 IBApi.EWrapper.tickString 62 Short-Term Volume 3 Minutes The past three minutes volume. Interpolation may be applied. For stocks only. 595 IBApi.EWrapper.tickSize 63 Short-Term Volume 5 Minutes The past five minutes volume. Interpolation may be applied. For stocks only. 595 IBApi.EWrapper.tickSize 64 Short-Term Volume 10 Minutes The past ten minutes volume. Interpolation may be applied. For stocks only. 595 IBApi.EWrapper.tickSize 65 Delayed Bid Delayed bid price. See Market Data Types. *RDD IBApi.EWrapper.tickPrice 66 Delayed Ask Delayed ask price. See Market Data Types. *RDD IBApi.EWrapper.tickPrice 67 Delayed Last Delayed last traded price. See Market Data Types. *RDD IBApi.EWrapper.tickPrice 68 Delayed Bid Size Delayed bid size. See Market Data Types. *RDD IBApi.EWrapper.tickSize 69 Delayed Ask Size Delayed ask size. See Market Data Types. *RDD IBApi.EWrapper.tickSize 70 Delayed Last Size Delayed last size. See Market Data Types. *RDD IBApi.EWrapper.tickSize 71 Delayed High Price Delayed highest price of the day. See Market Data Types. *RDD IBApi.EWrapper.tickPrice 72 Delayed Low Price Delayed lowest price of the day. See Market Data Types *RDD IBApi.EWrapper.tickPrice 73 Delayed Volume Delayed traded volume of the day. See Market Data Types *RDD IBApi.EWrapper.tickSize 74 Delayed Close The prior day's closing price. *RDD IBApi.EWrapper.tickPrice 75 Delayed Open Displays the current day's Open price. The price will return 15 minutes after the Open price is made available. *RDD IBApi.EWrapper.tickPrice 76 RT Trade Volume 'Last trade details that excludes ''Unreportable Trades''. See RT Trade Volume' 375 IBApi.EWrapper.tickString 77 Creditman mark price Not currently available - IBApi.EWrapper.tickPrice 78 Creditman slow mark price Slower mark price update used in system calculations 619 IBApi.EWrapper.tickPrice 79 Delayed Bid Option Computed greeks based on delayed bid price. See Market Data Types and Option Greeks. *RDD IBApi.EWrapper.tickOptionComputation 80 Delayed Ask Option Computed greeks based on delayed ask price. See Market Data Types and Option Greeks. *RDD IBApi.EWrapper.tickOptionComputation 81 Delayed Last Option Computed greeks based on delayed last price. See Market Data Types and Option Greeks. *RDD IBApi.EWrapper.tickOptionComputation 82 Delayed Model Option Computed Greeks and model's implied volatility based on delayed stock and option prices. *RDD IBApi.EWrapper.tickOptionComputation 83 Last Exchange Exchange of last traded price - IBApi.EWrapper.tickString 84 Last Regulatory Time Timestamp (in Unix ms time) of last trade returned with regulatory snapshot - IBApi.EWrapper.tickString 85 Futures Open Interest Total number of outstanding futures contracts. *HSI open interest requested with generic tick 101 588 IBApi.EWrapper.tickSize 86 Average Option Volume Average volume of the corresponding option contracts(TWS Build 970+ is required) 105 IBApi.EWrapper.tickSize 87 Delayed Last Timestamp Delayed time of the last trade (in UNIX time) (TWS Build 970+ is required) *RDD IBApi.EWrapper.tickString 88 Shortable Shares Number of shares available to short (TWS Build 974+ is required) 236 IBApi.EWrapper.tickSize 89 ETF Nav Last The last price of Net Asset Value (NAV). For ETFs: Calculation is based on prices of ETF's underlying securities. For NextShares: Value is provided by NASDAQ 577 IBApi.EWrapper.tickPrice 96 ETF Nav Frozen Last ETF Nav Last for Frozen data 623 IBApi.EWrapper.tickPrice 97 ETF Nav High The high price of ETF's Net Asset Value (NAV) 614 IBApi.EWrapper.tickPrice 98 ETF Nav Low The low price of ETF's Net Asset Value (NAV) 614 IBApi.EWrapper.tickPrice 99 Estimated IPO - Midpoint Midpoint is calculated based on IPO price range 586 IBApi.EWrapper.tickGeneric 101 Final IPO Price Final price for IPO 586 IBApi.EWrapper.tickGeneric 102 Delayed Yield Bid Delayed implied yield of the bond if it is purchased at the current bid. *RDD IBApi.EWrapper.tickPrice 103 Delayed Yield Ask Delayed implied yield of the bond if it is purchased at the current ask. *RDD IBApi.EWrapper.tickPrice 104",
    "The Halted tick type indicates if a contract has been halted for trading. It can have the following values:  Value Description -1 Halted status not available. Usually returned with frozen data. 0 Not halted. This value will only be returned if the contract is in a TWS watchlist. 1 General halt. Trading halt is imposed for purely regulatory reasons with/without volatility halt. 2 Volatility halt. Trading halt is imposed by the exchange to protect against extreme volatility.",
    "The shortable tick is an indicative on the amount of shares which can be sold short for the contract: Receiving the actual number of shares available to short requires TWS 974+. For detailed information about shortability data (shortable shares, fee rate) available outside of TWS, IB also provides an FTP site. For more information on the FTP site, see knowledge base article 2024  Range Description Value higher than 2.5 There are at least 1000 shares available for short selling. Value higher than 1.5 This contract will be available for short selling if shares can be located. 1.5 or less Contract is not available for short selling.",
    "The API reports the current day's volume in several ways. They are summarized as follows: Volume tick type 8: The 'native volume'. This includes delayed transactions, busted trades, and combos, but will not update with every tick. RTVolume: highest number, includes non-reportable trades such as odd lots, average price and derivative trades. RTTradeVolume: only includes 'last' ticks, similar to number also used in charts/historical data.",
    "The RT Volume tick type corresponds to the TWS' Time & Sales window and contains the last trade's price, size and time along with current day's total traded volume, Volume Weighted Average Price (VWAP) and whether or not the trade was filled by a single market maker. There is a setting in TWS which displays tick-by-tick data in the TWS Time & Sales Window. If this setting is checked, it will provide a higher granularity of data than RTVolume. Example: 701.28;1;1348075471534;67854;701.46918464;true As volume for US stocks is reported in lots, a volume of 0 reported in RTVolume will typically indicate an odd lot data point (less than 100 shares). It is important to note that while the TWS Time & Sales Window also has information about trade conditions available with data points, this data is not available through the API. So for instance, the 'unreportable' trade status displayed with points in the Time & Sales Window is not available through the API, and that trade data will appear in the API just as any other data point. As always, an API application needs to exercise caution in responding to single data points. Note: Please be aware that RT Volume is not supported with Cryptocurrencies. RT Trade Volume The RT Trade Volume is similar to RT Volume, but designed to avoid relaying back 'Unreportable Trades' shown in TWS Time&Sales via the API. RT Trade Volume will not contain average price or derivative trades which are included in RTVolume.",
    "This tick type provides four different comma-separated elements: The sum of dividends for the past 12 months (0.83 in the example below). The sum of dividends for the next 12 months (0.92 from the example below). The next dividend date (20130219 in the example below). The next single dividend amount (0.23 from the example below). Example: 0.83,0.92,20130219,0.23 To receive dividend information it is sometimes necessary to direct-route rather than smart-route market data requests.",
    "In TWS, tick-by-tick data is available in the Time & Sales Window. The maximum number of simultaneous tick-by-tick subscriptions allowed for a user is 5% of the user's total market data lines. See Specialized Market Data Lines for more information. Real time tick-by-tick data is currently not available for options. Historical tick-by-tick data is available. The tick type field is case sensitive - it must be BidAsk, Last, AllLast, MidPoint. AllLast has additional trade types such as combos, derivatives, and average price trades which are not included in Last. Tick-by-tick data for options is currently only available historically and not in real time. Tick-by-tick data for indices is only provided for indices which are on CME. Tick-by-tick data is not available for combos. No more than 1 tick-by-tick request can be made for the same instrument within 15 seconds. Time & Sales data requires a Level 1, Top Of Book market data subscription. This would be the same subscription as EClient.reqMktData() or EClient.reqHistoricalData().",
    "EClient.reqTickByTickData (reqId: int. unique identifier of the request. contract: Contract. the contract for which tick-by-tick data is requested. tickType: String. tick-by-tick data type: 'Last', 'AllLast', 'BidAsk' or 'MidPoint'. numberOfTicks: int. If a non-zero value is entered, then historical tick data is first returned via one of the Historical Time and Sales Ewrapper Methods respectively. (Max number of historical Ticks is 1000) ignoreSize: bool. Omit updates that reflect only changes in size, and not price. Applicable to Bid_Ask data requests.) Requests tick by tick or Time & Sales data. Note: EClient.reqTickByTickData() uses Max Market Depth (Level II) data lines, instead of market data lines (Level I). For market data lines, please check: https://www.interactivebrokers.com/campus/ibkr-api-page/market-data-subscriptions/#market-data-lines",
    "EWrapper.tickByTickAllLast (reqId: int. unique identifier of the request. tickType: int. 0: 'Last' or 1: 'AllLast'. time: long. tick-by-tick real-time tick timestamp. price: double. tick-by-tick real-time tick last price. size: decimal. tick-by-tick real-time tick last size. tickAttribLast: TickAttribLast. tick-by-tick real-time last tick attribs (bit 0 - past limit, bit 1 - unreported). exchange: String. tick-by-tick real-time tick exchange. specialConditions: String. tick-by-tick real-time tick special conditions. Conditions under which the operation took place (Refer to Trade Conditions Page)) Returns 'Last' or 'AllLast' tick-by-tick real-time tick.  EWrapper.tickByTickBidAsk (reqId: int. unique identifier of the request. time: long. timestamp of the tick. bidPrice: double. bid price of the tick. askPrice: double. ask price of the tick. bidSize: decimal. bid size of the tick. askSize: decimal. ask size of the tick. tickAttribBidAsk: TickAttribBidAsk. tick-by-tick real-time bid/ask tick attribs (bit 0 - bid past low, bit 1 - ask past high).) Returns 'BidAsk' tick-by-tick real-time tick.  EWrapper.tickByTickMidPoint (reqId: int. Request identifier used to track data. time: long. Timestamp of the tick. midPoint: double. Mid point value of the tick.) Returns 'MidPoint' tick-by-tick real-time tick.",
    "EClient.cancelTickByTickData (requestId: int. Request identifier used to track data.) Cancels specified tick-by-tick data.",
    "The Tick-By-Tick attribute has been introduced. The tick attribute pastLimit is also returned with historical Tick-By-Tick responses. If tick has zero price, zero size and pastLimit flag is set - this is 'Halted' tick. If tick has zero price, zero size and followed immediately after 'Halted' tick - this is 'Unhalted' tick.",
    "Some scans in the TWS Advanced Market Scanner can be accessed via the TWS API through the EClient.reqScannerSubscription. Results are delivered via EWrapper.scannerData and the EWrapper.scannerDataEnd marker will indicate when all results have been delivered. The returned results to scannerData simply consist of a list of contracts. There are no market data fields (bid, ask, last, volume, ...) returned from the scanner, and so if these are desired they have to be requested separately with the reqMktData function. Since the scanner results do not include any market data fields, it is not necessary to have market data subscriptions to use the API scanner. However to use filters, market data subscriptions are generally required. Since the EClient.reqScannerSubscription request keeps a subscription open you will keep receiving periodic updates until the request is cancelled via EClient.cancelScannerSubscription : Scans are limited to a maximum result of 50 results per scan code, and only 10 API scans can be active at a time.  scannerSubscriptionFilterOptions has been added to the API to allow for generic filters. This field is entered as a list of TagValues which have a tag followed by its value, e.g. TagValue('usdMarketCapAbove', '10000') indicates a market cap above 10000 USD. Available filters can be found using the EClient.reqScannerParameters function. A string containing all available XML-formatted parameters will then be returned via EWrapper.scannerParameters. Important: remember the TWS API is just an interface to the TWS. If you are having problems defining a scanner, always make sure you can create a similar scanner using the TWS' Advanced Market Scanner.",
    "A string containing all available XML-formatted parameters will then be returned via EWrapper.scannerParameters.",
    "EClient.reqScannerParameters () Requests an XML list of scanner parameters valid in TWS.",
    "EWrapper.scannerParameters (xml: String. The xml-formatted string with the available parameters.) Provides the xml-formatted parameters available from TWS market scanners (not all available in API).",
    "All values used for the ScannerSubscription object are pulled from EClient.scannerParams response. The XML tree will relay a tree containing a corresponding code to each ScannerSubscription field as documented below. instrument: <ScanParameterResponse> <InstrumentList> <Instrument> <type><ScanParameterResponse> <InstrumentList> <Instrument> <type> Location Code: <ScanParameterResponse> <LocationTree> <Location> <LocationTree> <Location> <locationCode> <ScanParameterResponse> <LocationTree> <Location> <LocationTree> <Location> <locationCode> Scan Code: <ScanParameterResponse> <ScanTypeList> <ScanType> <scanCode><ScanParameterResponse> <ScanTypeList> <ScanType> <scanCode> Subscription Options should be an empty array of TagValues. Filter Options: <ScanParameterResponse> <FilterList> <RangeFilter> <AbstractField> <code><ScanParameterResponse> <FilterList> <RangeFilter> <AbstractField> <code>  ScannerSubscription() Instrument: String. Instrument Type to use. Location Code: String. Country or region for scanner to search. Scan Code: String. Value for scanner to sort by. Subscription Options: Array of TagValues. For internal use only. Filter Options: Array of TagValues. Contains an array of TagValue objects which filters the scanner subscription.",
    "EClient.reqScannerSubscription (reqId: int. Request identifier used for tracking data. subscription: ScannerSubscription. Object containing details on what values should be used to construct and sort the list. scannerSubscriptionOptions: List. Internal use only. scannerSubscriptionFilterOptions: List. List of values used to filter the results of the scanner subscription. May result in an empty scanner response from over-filtering.) Starts a subscription to market scan results based on the provided parameters.",
    "EWrapper.scannerData (reqid: int. Request identifier used to track data. rank: int. The ranking position of the contract in the scanner sort. contractDetails: ContractDetails. Contract object of the resulting object. distance: String. Internal use only. benchmark: String. Internal use only. projection: String. Internal use only. legStr: String. Describes the combo legs when the scanner is returning EFP) Provides the data resulting from the market scanner request.",
    "EClient.cancelScannerSubscription (tickerId: int. Request identifier used to track data.) Cancels the specified scanner subscription using the tickerId.",
    "API news requires news subscriptions that are specific to the API; most news services in TWS are not also available in the API. There are three API news services enabled in accounts by default and available from the API. They are: Briefing.com General Market Columns (BRFG) Briefing.com Analyst Actions (BRFUPDN) Dow Jones Newsletters (DJNL) There are also four additional news services available with all TWS versions which require API-specific subscriptions to first be made in Account Management. They have different data fees than the subscription for the same news in TWS-only. As with all subscriptions, they only apply to the specific TWS username under which they were made: Briefing Trader (BRF) Benzinga Pro (BZ) Fly on the Wall (FLY) The API functions which handle news are able to query available news provides, subscribe to news in real time to receive headlines as they are released, request specific news articles, and return a historical list of news stories that are cached in the system.",
    "Adding or removing API news subscriptions from an account is accomplished through Account Management. From the API, currently subscribed news sources can be retrieved using the function IBApi::EClient::reqNewsProviders. A list of available subscribed news sources is returned to the function IBApi::EWrapper::newsProviders",
    "EClient.reqNewsProviders() Requests news providers which the user has subscribed to.",
    "EWrapper.newsProviders (newsProviders: NewsProviders[]. Unique array containing all available news sources.) Returns array of subscribed API news providers for this user",
    "Important: in order to obtain news feeds via the TWS API you need to acquire the relevant API-specific subscriptions via your Account Management. News articles provided through the API may not correspond to what is available directly through the Trader Workstation. Off-platform distribution of data is at the discretion of the news source provider, not by Interactive Brokers. When invoking IBApi.EClient.reqMktData, for a specific IBApi.Contract you will follow the same format convention as any other basic contracts. The News Source is identified by the genericTickList argument. Note: The error message 'invalid tick type' will be returned if the username has not added the appropriate API news subscription. Note: For Briefing Trader live head lines via the API is only offered on a case-by-case basis directly from Briefing.com offers Briefing Trader subscribers access to the subscription live head lines via the API. For more information and to submit an API entitlement application, please contact Briefing.com directly at dbeasley@briefing.com.",
    "EClient.reqMktData (reqId: int. Request identifier for tracking data. contract: Contract. Contract object used for specifying an instrument. genericTickList: String. Comma separated ids of the available generic ticks. snapshot: bool. Always set to false for news data. regulatorySnapshot: bool. Always set to false for news data. mktDataOptions: List<TagValue>. Internal use only.) Used to request market data typically, but can also be used to retrieve news. 'mdoff' can be specified to disable standard market data while retrieving news. For news sources, genericTick 292 needs to be specified followed by a colon and the news provider's code.",
    "BroadTape News Contracts For BroadTape News you specify the contract for the specific news source. This is uniquely identified by the symbol and exchange. The symbol of an instrument can easily be obtained via the EClientSocket.reqContractDetails request. The symbol is typically the provider code, a colon, then the news provider codes appended with '_ALL'  EClient.reqMktData (reqId: int. Request identifier for tracking data. contract: Contract. Contract object used for specifying an instrument. genericTickList: String. Comma separated ids of the available generic ticks. snapshot: bool. Always set to false for news data. regulatorySnapshot: bool. Always set to false for news data. mktDataOptions: List<TagValue>. Internal use only.) Used to request market data typically, but can also be used to retrieve news. 'mdoff' can be specified to disable standard market data while retrieving news. For news sources, genericTick 292 needs to be specified.",
    "EWrapper.tickNews (tickerId: int. Request identifier used to track data. timeStamp: int. Epoch time of the article's published time. providerCode: String. News provider code based on requested data. articleId: String. Identifier used to track the particular article. See News Article for more. headline: String. Headline of the provided news article. extraData: String. Returns any additional data available about the article.) Returns news headlines for requested contracts.",
    "With the appropriate API news subscription, historical news headlines can be requested from the API using the function EClient::reqHistoricalNews. The resulting headlines are returned to EWrapper::historicalNews.",
    "EClient.reqHistoricalNews (requestId: int. Request identifier used to track data. conId: int. Contract id of ticker. See Contract Details for how to retrieve conId. providerCodes: String. A '+'-separated list of provider codes. startDateTime: String. Marks the (exclusive) start of the date range. The format is yyyy-MM-dd HH:mm:ss. endDateTime: String. Marks the (inclusive) end of the date range. The format is yyyy-MM-dd HH:mm:ss. totalResults: int. The maximum number of headlines to fetch (1 - 300) historicalNewsOptions: Null. Reserved for internal use. Should be defined as null.) Requests historical news headlines.",
    "EWrapper.historicalNews (requestId: int. Request identifier used to track data. time: int. Epoch time of the article's published time. providerCode: String. News provider code based on requested data. articleId: String. Identifier used to track the particular article. See News Article for more. headline: String. Headline of the provided news article.) Returns news headlines for requested contracts.  EWrapper.historicalNewsEnd (requestId: int. Request identifier used to track data. hasMore: bool. Returns whether there is more data (true) or not (false).) Returns news headlines end marker",
    "After requesting news headlines using one of the above functions, the body of a news article can be requested with the article ID returned by invoking the function IBApi::EClient::reqNewsArticle. The body of the news article is returned to the function IBApi::EWrapper::newsArticle.",
    "EClient.reqNewsArticle (requestId: int. id of the request. providerCode: String. Short code indicating news provider, e.g. FLY. articleId: String. Id of the specific article. newsArticleOptions: List. Reserved for internal use. Should be defined as null.) Requests news article body given articleId.",
    "EWrapper.newsArticle (requestId: int. Request identifier used to track data. articleType: int. The type of news article (0 - plain text or html, 1 - binary data / pdf). articleText: String. The body of article (if articleType == 1, the binary data is encoded using the Base64 scheme).) Called when receiving a News Article in response to reqNewsArticle().",
    "The nextValidId event provides the next valid identifier needed to place an order. It is necessary to use an order ID with new orders which is greater than all previous order IDs used to place an order. While requests such as EClient.reqMktData will not increment the minimum request ID value, more than one market data request cannot use the same request ID at the same time. The nextValidId value may be queried on each request. However, it is often recommended to make a request once at the beginning of the session, and then locally increment the value for each request.",
    "EClient.reqIds (numIds: int. This parameter will not affect the value returned to nextValidId but is required.) Requests the next valid order ID at the current moment be returned to the EWrapper.nextValidId function.",
    "EWrapper.nextValidId (orderId: int. Receives next valid order id.) Will be invoked automatically upon successful API client connection, or after call to EClient.reqIds.",
    "The next valid identifier is persistent between TWS sessions. If necessary, you can reset the order ID sequence within the API Settings dialogue. Note however that the order sequence Id can only be reset if there are no active API orders. ",
    "",
    "Each TWS API connection maintains its own ClientID to the host through the EClient.connect function. There are two unique client ID behaviors developers must be aware of: Master ClientID: The Master Client ID is set in the Global Configuration and is used to distinguish the connecting Client ID used to pull order and trades data even from other API connections. Connecting without using the Master Client ID will mean only trades on the connected Client ID will be returning from calls to the openOrder or execDetails functions. ClientID 0: ClientID 0 is unique from the rest of the client IDs in that users can receive trades made through Trader Workstation or through FIX in addition to trades that take place on the current client ID. The Master ClientID value can be assigned to 0 so that a connection can retrieve orders placed from TWS, FIX sessions, and all API connections on the account. ",
    "When an order is filled either fully or partially, the IBApi.EWrapper.execDetails and IBApi.EWrapper.commissionReport events will deliver IBApi.Execution and IBApi.CommissionAndFeesReport objects. This allows to obtain the full picture of the order's execution and the resulting commissions. Advisors executing allocation orders will receive execution details and commissions for the allocation order itself. To receive allocation details and commissions for a specific subaccount IBApi.EClient.reqExecutions can be used.  EWrapper.commissionReport (commissionAndFeesReport: CommissionAndFeesReport. Returns a commissions report object containing the fields execId, commission, currency, realizedPnl, yield, and yieldRedemptionDate.) Provides the Commission Report of an Execution",
    "IBApi.Execution and IBApi.CommissionReport can be requested on demand via the IBApi.EClient.reqExecutions method which receives a IBApi.ExecutionFilter object as parameter to obtain only those executions matching the given criteria. An empty IBApi.ExecutionFilter object can be passed to obtain all previous executions. Once all matching executions have been delivered, an IBApi.EWrapper.execDetailsEnd event will be triggered. Important: By default, only those executions occurring since midnight for that particular account will be delivered. If you want to request executions from the last 7 days, TWS's Trade Log setting 'Show trades for ...' must be adjusted to your requirement. The IB Gateway is limited to only executions from the current trading day since midnight.",
    "If a correction to an execution is published it will be received as an additional IBApi.EWrapper.execDetails callback with all parameters identical except for the execID in the Execution object. The execID will differ only in the digits after the final period. By default, most ExecID values will return as 4-segment alphanumeric sequence to identify each unique order. In the case of Combo orders, you may encounter a 5-segment alphanumeric sequence which will be used to denote per-leg executions. As an example, if a 1:1 combo for 200 shares of both contracts is placed, the first leg may fill for 200 shares, then leg 2 may fill for 100 in one execution, and then another execution for leg 2 of 100. The fifth segment will distinguish between these unique inner-combo executions.",
    "The Execution object is used to maintain all data related to a user's traded orders. This can be used in both querying execution details and navigating received data. The details provided will display all information pertaining to the execution, including how many shares were filled, the price of the execution, and what time it took place.  Execution() OrderId: int. The API client's order Id. May not be unique to an account. ClientId: int. The API client identifier which placed the order which originated this execution. ExecId: String. The execution's identifier. Each partial fill has a separate ExecId. A correction is indicated by an ExecId which differs from a previous ExecId in only the digits after the final period, e.g. an ExecId ending in '.02' would be a correction of a previous execution with an ExecId ending in '.01'. Time: String. The execution's server time. AcctNumber: String. The account to which the order was allocated. Exchange: String. The exchange where the execution took place. Side: String. Specifies if the transaction was buy or sale BOT for bought, SLD for sold. Shares: decimal. The number of shares filled. Price: double. The order's execution price excluding commissions. PermId: int. The TWS order identifier. The PermId can be 0 for trades originating outside IB. Liquidation: int. Identifies whether an execution occurred because of an IB-initiated liquidation. CumQty: decimal. Cumulative quantity. Used in regular trades, combo trades and legs of the combo. AvgPrice: double. Average price. Used in regular trades, combo trades and legs of the combo. Does not include commissions. OrderRef: String. The OrderRef is a user-customizable string that can be set from the API or TWS and will be associated with an order for its lifetime. EvRule: String. The Economic Value Rule name and the respective optional argument. The two values should be separated by a colon. For example, aussieBond:YearsToExpiration=3. When the optional argument is not present, the first value will be followed by a colon. EvMultiplier: double. Tells you approximately how much the market value of a contract would change if the price were to change by 1. It cannot be used to get market value by multiplying the price by the approximate multiplier. ModelCode: String. model code LastLiquidity: Liquidity. The liquidity type of the execution. pendingPriceRevision: bool. Describes if the execution is still pending price revision.  Given additional structures for executions are ever evolving, it is recommended to review the relevant Execution class in your programming language for a comprehensive review of what fields are available.  Execution Class Reference",
    "EClient.reqExecutions (reqId: int. The request's unique identifier. filter: ExecutionFilter. The filter criteria used to determine which execution reports are returned.) Requests current day's (since midnight) executions and commission report matching the filter. Only the current day's executions can be retrieved.",
    "EWrapper.execDetails (reqId: int. The request's identifier. contract: Contract. The Contract of the Order. execution: Execution. The Execution details.) Provides the executions which happened in the last 24 hours.  EWrapper.execDetailsEnd (reqId: int. The request's identifier) Indicates the end of the Execution reception.",
    "EWrapper.openOrder (orderId: int. The order's unique id contract: Contract. The order's Contract. order: Order. The currently active Order. orderState: OrderState. The order's OrderState) Feeds in currently open orders.  EWrapper.openOrderEnd () Notifies the end of the open orders' reception.",
    "EWrapper.orderStatus (orderId: int. The order's client id. status: String. The current status of the order. filled: decimal. Number of filled positions. remaining: decimal. The remnant positions. avgFillPrice: double. Average filling price. permId: int. The order's permId used by the TWS to identify orders. parentId: int. Parent's id. Used for bracket and auto trailing stop orders. lastFillPrice: double. Price at which the last positions were filled. clientId: int. API client which submitted the order. whyHeld: String. this field is used to identify an order held when TWS is trying to locate shares for a short sell. The value used to indicate this is 'locate'. mktCapPrice: double. If an order has been capped, this indicates the current capped price.) Gives the up-to-date information of an order every time it changes. Often there are duplicate orderStatus messages.",
    "Status Code Description PendingSubmit indicates that you have transmitted the order, but have not yet received confirmation that it has been accepted by the order destination. PendingCancel indicates that you have sent a request to cancel the order but have not yet received cancel confirmation from the order destination. At this point, your order is not confirmed canceled. It is not guaranteed that the cancellation will be successful. PreSubmitted indicates that a simulated order type has been accepted by the IB system and that this order has yet to be elected. The order is held in the IB system until the election criteria are met. At that time the order is transmitted to the order destination as specified. Submitted indicates that your order has been accepted by the system. ApiCancelled after an order has been submitted and before it has been acknowledged, an API client client can request its cancelation, producing this state. Cancelled indicates that the balance of your order has been confirmed canceled by the IB system. This could occur unexpectedly when IB or the destination has rejected your order. Filled indicates that the order has been completely filled. Market orders executions will not always trigger a Filled status. Inactive indicates that the order was received by the system but is no longer active because it was rejected or canceled.",
    "As long as an order is active, it is possible to retrieve it using the TWS API. Orders submitted via the TWS API will always be bound to the client application (i.e. client Id) they were submitted from meaning only the submitting client will be able to modify the placed order. Three different methods are provided to allow for maximum flexibility. Active orders will be returned via the IBApi.EWrapper.openOrder and IBApi.EWrapper.orderStatus methods as already described in The openOrder callback and The orderStatus callback sections Note: it is not possible to obtain cancelled or fully filled orders.",
    "The IBApi.EClient.reqOpenOrders method allows to obtain all active orders submitted by the client application connected with the exact same client Id with which the order was sent to the TWS. If client 0 invokes reqOpenOrders, it will cause currently open orders placed from TWS manually to be 'bound', i.e. assigned an order ID so that they can be modified or cancelled by the API client 0. When an order is bound by API client 0 there will be callback to IBApi::EWrapper::orderBound. This indicates the mapping between API order ID and permID. The IBApi.EWrapper.orderBound callback in response to newly bound orders that indicates the mapping between the permID (unique account-wide) and API Order ID (specific to an API client). In the API settings in Global Configuration, is a setting checked by default 'Use negative numbers to bind automatic orders' which will specify how manual TWS orders are assigned an API order ID. Because binding the order will change the order ID, this function will be rejected when used with the API Read-Only Mode enabled. You can find the steps for disabling read-only mode at in TWS Settings.  EClient.reqOpenOrders () Requests all open orders places by this specific API client (identified by the API client id). For client ID 0, this will bind previous manual TWS orders.",
    "EClient.reqAllOpenOrders () Requests all current open orders in associated accounts at the current moment. The existing orders will be received via the openOrder and orderStatus events. Open orders are returned once; this function does not initiate a subscription.",
    "EClient.reqAutoOpenOrders (autoBind: bool. If set to true, the newly created orders will be assigned an API order ID and implicitly associated with this client. If set to false, future orders will not be.) Requests status updates about future orders placed from TWS. Can only be used with client ID 0. Important: only those applications connecting with client Id 0 will be able to take over manually submitted orders",
    "EWrapper.orderBound (orderId: long. IBKR permId. apiClientId: int. API client id. apiOrderId: int. API order id.) Response to API bind order control message.",
    "EClient.reqCompletedOrders allows users to request all orders for the given day that are no longer modifiable. This will include orders have that executed, been rejected, or have been cancelled by the user. Clients may use these requests in order to retain a roster of those order submissions that are no longer traceable via reqOpenOrders.",
    "EClient.reqCompletedOrders(apiOnly: bool. Determines if only API orders should be returned or if TWS submitted orders should be included.)  apiOnly: bool. Determines if only API orders should be returned or if TWS submitted orders should be included.)",
    "EWrapper.completedOrders(contract: Contract. The order's Contract. order: Order. The currently active Order. orderState: OrderState. The order's OrderState)",
    "",
    "The order object is an essential piece of the TWS API which is used to both place and manage orders. This is primarily built with an ever increasing range of attributes used to create the best order possible. With that being said, the value to the right represents the required fields in order to place or reference any order. Keep in mind that there are several other attributes that can and should be referenced.  Order() action: String. Determines whether the contract should be a BUY or SELL. auxPrice: double. Used to determine the stop price for STP, STP LMT, and TRAIL orders. lmtPrice: double. Used to determine the limit price for LMT, STP LMT, and TRAIL orders. orderType: String. Specify the type of order to place. For example, MKT, LMT, STP. tif: String. Time in force for the order. Default tif is DAY. totalQuantity: decimal. Total size of the order.  Given additional structures for orders are ever evolving, it is recommended to review the relevant order class in your programming language for a comprehensive review of what fields are available.  Order Class Reference",
    "An order can be cancelled from the API with the functions EClient.cancelOrder and EClient::reqGlobalCancel. EClient.cancelOrder can only be used to cancel an order that was placed originally by a client with the same client ID (or from TWS for client ID 0). EClient.reqGlobalCancel will cancel all open orders, regardless of how they were originally placed.",
    "EClient.cancelOrder (orderId: int. Specify which order should be cancelled by its identifier. orderCancel: orderCancel. An OrderCancel object that can receive the manualOrderCancelTime, manualOrderIndicator, and extOperator fields. See OrderCancel Reference for more insight on the OrderCancel class.) Cancels an active order placed by from the same API client ID. Note: API clients cannot cancel individual orders placed by other clients. Only reqGlobalCancel is available.",
    "EClient.reqGlobalCancel () This method will cancel ALL open orders including those placed directly from TWS. orderCancel: orderCancel. An OrderCancel object that can receive the manualOrderCancelTime, manualOrderIndicator, and extOperator fields. See OrderCancel Reference for more insight on the OrderCancel class.)",
    "Options are exercised or lapsed from the API with the function EClient.exerciseOptions. Option exercise will appear with order status side = 'BUY' and limit price of 0, but only at the time the request is made Option exercise can be distinguished by price = 0  EClient.exerciseOptions (tickerId: int. Exercise request's identifier contract: Contract. the option Contract to be exercised. exerciseAction: int. Set to 1 to exercise the option, set to 2 to let the option lapse. exerciseQuantity: int. Number of contracts to be exercised account: String. Destination account ovrd: int. Specifies whether your setting will override the system's natural action. Set to 1 to override, set to 0 not to. For example, if your action is 'exercise' and the option is not in-the-money, by natural action the option would not exercise. If you have override set to 'yes' the natural action would be overridden and the out-of-the money option would be exercised. manualOrderTime: String. Specify the time at which the options should be exercised. An empty string will assume the current time. Required TWS API 10.26 or higher.) Exercises an options contract. Note: this function is affected by a TWS setting which specifies if an exercise request must be finalized.",
    "The minimum increment is the minimum difference between price levels at which a contract can trade. Some trades have constant price increments at all price levels. However some contracts have difference minimum increments on different exchanges on which they trade and/or different minimum increments at different price levels. In the contractDetails class, there is a field 'minTick' which specifies the smallest possible minimum increment encountered on any exchange or price. For complete information about minimum price increment structure, there is the IB Contracts and Securities search site, or the API function EClient.reqMarketRule. The function EClient.reqContractDetails when used with a Contract object will return contractDetails object to the contractDetails function which has a list of the valid exchanges where the instrument trades. Also within the contractDetails object is a field called marketRuleIDs which has a list of 'market rules'. A market rule is defined as a rule which defines the minimum price increment given the price. The market rule list returned in contractDetails has a list of market rules in the same order as the list of valid exchanges. In this way, the market rule ID for a contract on a particular exchange can be determined.  Market rule for forex and forex CFDs indicates default configuration (1/2 and not 1/10 pips). It can be adjusted to 1/10 pips through TWS or IB Gateway Global Configuration. Some non-US securities, for instance on the SEHK exchange, have a minimum lot size. This information is not available from the API but can be obtained from the IB Contracts and Securities search page. It will also be indicated in the error message returned from an order which does not conform to the minimum lot size. With the market rule ID number, the corresponding rule can be found with the API function EClient.reqMarketRule. The rule is returned to the function EWrapper.marketRule. For forex, there is an option in TWS/IB Gateway configuration which allows trading in 1/10 pips instead of 1/5 pips (the default). TWS Global Configuration -> Display -> Ticker Row -> Allow Forex trading in 1/10 pips",
    "EClient.reqMarketRule (marketRuleId: int. The id of market rule) Requests details about a given market rule. The market rule for an instrument on a particular exchange provides details about how the minimum price increment changes with price. A list of market rule ids can be obtained by invoking EClient.reqContractDetails on a particular contract. The returned market rule ID list will provide the market rule ID for the instrument in the correspond valid exchange list in contractDetails.",
    "EWrapper.marketRule (marketRuleId: int. Market Rule ID requested. priceIncrements: PriceIncrement[]. Returns the available price increments based on the market rule.) Returns minimum price increment structure for a particular market rule ID market rule IDs for an instrument on valid exchanges can be obtained from the contractDetails object for that contract",
    "For EEA investment firms required to comply with MiFIR reporting, and who have opted in to Enriched and Delegated Transaction Reporting, we have added four new order attributes to the Order class, and several new presets to TWS and IB Gateway Global Configuration. New order attributes include: IBApi.Order.Mifid2DecisionMaker - Used to send 'investment decision within the firm' value (if IBApi.Order.Mifid2DecisionAlgo is not used). IBApi.Order.Mifid2DecisionAlgo - Used to send 'investment decision within the firm' value (if IBApi.Order.Mifid2DecisionMaker is not used). IBApi.Order.Mifid2ExecutionTrader - Used to send 'execution within the firm' value (if IBApi.Order.Mifid2ExecutionAlgo is not used). IBApi.Order.Mifid2ExecutionAlgo - Used to send 'execution within the firm' value (if IBApi.Order.Mifid2ExecutionTrader is not used). New TWS and IB Gateway Order Presets can be found in the Orders > MiFIR page of Global Configuration, and include TWS Decision-Maker Defaults, API Decision-Maker Defaults, and Executing Trader/Algo presets. The following choices are available for the 'investment decision within the firm' IBApi.Order.Mifid2DecisionMaker and IBApi.Order.Mifid2DecisionAlgo attributes: This field does not need to be reported if you are: Using the TWS API to transmit orders, AND The investment decision is always made by the client, AND None of these clients are an EEA investment firm with delegated reporting selected (the 'delegated reporting firm'). You can configure the preset to indicate this via TWS Global Configuration using the Orders > MiFIR page. In this scenario, the orders for the proprietary account will need to be placed via TWS. If you are using the TWS API to transmit orders, and the investment decision is made by a person, or a group of people within a delegated reporting firm, with one person being the primary decision maker: Your TWS API program can, on each order, transmit a decision maker's IB-assigned short code using the field IBApi.Order.Mifid2DecisionMaker. You can define persons who can be the decision-makers via IB Account Management. To obtain the short codes that IB assigned to those persons, please contact IB Client Services. If your TWS API program is unable to transmit the above field, and the investment decision is either made by, or approved by, a single person who can be deemed to be the primary investment decision maker, you can pre-configure a default investment decision-maker that will be used for orders where the above fields are not present. You must define the investment decision-maker(s) in IB Account Management, and can then configure the default investment decision-maker in TWS Global Configuration using the Orders > MiFIR page. If you are using the TWS API to transmit orders and the investment decision is made by an algorithm: Your TWS API program can, on each order, transmit a decision maker's IB-assigned short code using the field IBApi.Order.Mifid2DecisionAlgo. You can define algorithms that can be the decision-makers via IB Account Management. To obtain the short codes that IB assigned to those persons, please contact IB Client Services. If your TWS API program is unable to transmit the above field, and/or the investment decision is made by a single or primary decision-maker algorithm, you can pre-configure a default investment decision-maker algo that will be used for orders where the above field is not sent. You must define the investment decision-maker(s) in IB Account Management, and can then configure the default investment decision-maker in TWS Global Configuration using the Orders > MiFIR page.NOTE: Only ONE investment decision-maker, either a primary person or algorithm, should be provided on an order, or selected as the default. The following choices are available for 'execution within the firm' IBApi.Order.Mifid2ExecutionTrader and IBApi.Order.Mifid2ExecutionAlgo attributes: No additional information is needed if you are using the TWS API to transmit orders entered in a third-party trading interface, and you are the trader responsible for execution within the firm. If your TWS API program transmits orders to IB automatically without human intervention, please contact IB Client Services to register the program or programs with IB as an algo. Only the primary program or algo needs to be registered and identified. You can then configure the default in TWS Global Configuration using the Orders > MiFIR page. Your TWS API program, on each order, can transmit the IB-assigned short code of the algo or person responsible for execution within the firm using the field IBApi.Order.Mifid2ExecutionAlgo (for the algorithm) or IBApi.Order.Mifid2ExecutionTrader (for the person). For more information, or to obtain short codes for persons or algos defined in IB Account Management, please contact IB Client Services. To find out more about the MiFIR transaction reporting obligations, see the MiFIR Enriched and Delegated Transaction Reporting for EEA Investment Firms knowledge base article.",
    "Modification of an API order can be done if the API client is connected to a session of TWS with the same username of TWS and using the same API client ID. The function EClient.placeOrder can then be called with the same fields as the open order, except for the parameter to modify. This includes the Order.OrderId, which must match the Order.OrderId of the open order. It is not generally recommended to try to change order fields aside from order price, size, and tif (for DAY -> IOC modifications). To change other parameters, it might be preferable to instead cancel the open order, and create a new one.  To modify or cancel an individual order placed manually from TWS, it is necessary to connect with client ID 0 and then bind the order before attempting to modify it. The process of binding assigns the order an API order ID; prior to binding it will be returned to the API with an API order ID of 0. Orders with API order ID 0 cannot be modified/cancelled from the API. The function reqOpenOrders binds orders open at that moment which do not already have an API order ID, and the function reqAutoOpenOrders binds future orders automatically. The function reqAllOpenOrders does not bind orders. To modify API orders when connecting to a different session of TWS (logged in with a different username than used for the original order), it is necessary to first bind the order with client ID 0 in the same manner as manual TWS orders are bound before they can be modified. The binding assignment of API order IDs is independent for each TWS user, so the same order can have different API order IDs for different users. The permID returned in the API Order class which is assigned by TWS can be used to identify an order in an account uniquely. The process of order binding from the API cancels/resubmits an order working on an exchange. This may affect the order's place in the exchange queue. Enhancements are planned to allow for API binding with modification of exchange queue priority.",
    "Orders are submitted via the EClient.placeOrder method. Immediately after an order is submitted correctly, the TWS will start sending events concerning the order's activity via EWrapper.openOrder and EWrapper.orderStatus Advisors executing allocation orders will receive execution details and commissions for the allocation order itself. To receive allocation details and commissions for a specific subaccount EClient.reqExecutions can be used. An order can be sent to TWS but not transmitted to the IB server by setting the Order.Transmit flag in the order class to False. Untransmitted orders will only be available within that TWS session (not for other usernames) and will be cleared on restart. Also, they can be cancelled or transmitted from the API but not viewed while they remain in the 'untransmitted' state.  EClient.placeOrder (id: int. The order's unique identifier. If a new order is placed with an order ID less than or equal to the order ID of a previous order an error will occur. contract: Contract. The order's contract order: Order. The order object.) Places or modifies an order.",
    "By default, the Trader Workstation implements several precautionary settings that will notify customers of potential order risks to make sure users are well informed before transmitting orders. As a result, customers will typically need to acknowledge a precautionary message and manually transmit the orders through the Trader Workstation. These precautionary messages may be disabled if the user is comfortable and aware of the behavior they are disabling.  Disabling Warning Messages Log in to the Trader Workstation Open the Global Configuration by selecting the Cog Wheel icon in the top right corner Navigate to the 'Messages' section on the left. Carefully read each message before disabling it. You can then disable the warning by unchecking the box on the right of the message description.  Modifying Precautionary Settings Log in to the Trader Workstation Open the Global Configuration by selecting the Cog Wheel icon in the top right corner Navigate to the 'Presets' section on the left Select the instrument(s) you are trading Carefully read each setting before making changes to it. You may modify the values inside the 'Precautionary Settings' settings to be more or less restrictive. You may also set the value to '0' to disable the precaution entirely.",
    "When placing orders via the API and building a robust trading system, it is important to monitor for callback notifications, specifically for IBApi::EWrapper::error, IBApi::EWrapper::orderStatus changes, IBApi::EWrapper::openOrder warnings, and IBApi::EWrapper::execDetails to ensure proper operation. If you experience issues with orders you place via the API, such as orders not filling, the first thing to check is what these callbacks returned. Your order may have been rejected or cancelled. If needed, see the API Log section, for information on obtaining your API logs or submitting them for review. Common cases of order rejections, cancellations, and warnings, and the corresponding message returned: If an order is subject to a large size (LGSZ) reject, the API client would receive Error (201) via IBApi::EWrapper::error. The error text would indicate that order size too large and suggest another smaller size. In accordance with our regulatory obligations as a broker, we cannot accept Large Limit Orders for #### shares of ABCD that you have submitted. Please submit a smaller order (not exceeding ###) or convert your order to an algorithmic Order (IBALGO) [conditional on instrument] If an order is subject to price checks the client may receive status (cancelled) + Error (202) via IBApi.EWrapper.orderStatus and IBApi::EWrapper::error. The error text would indicate the price is too far from current price. In accordance with our regulatory obligations as a broker, we cannot accept your order at the limit price ### you selected because it is too far through the market. Please submit your order using a limit price that is closer to the current market price ### The client may receive warning Text via IBApi::EWrapper::openOrder indicating that the order could be subject to price capping. If your order does not immediately execute, in accordance with our regulatory obligations as a broker we may, depending on market conditions, reject your order if the limit price of your order is more than allowed distance from the current reference price. This is designed to ensure that the price of your order is in line with an orderly market and reduce the impact your order has on the market. Please note that such rejection will result in you not receiving a fill. mktCapPrice - If an order has been capped, this indicates the current capped price (returned to IBApi.EWrapper.orderStatus)",
    "The TWS API supports the ability to pre-borrow shares for shorting. See here for Pre-Borrow Eligibility See here for pricing details To place a Pre-Borrow order, users must: Assign the contract's exchange to 'PREBORROW' Assign the contract's security type to 'SBL' Assign the order's orderType to 'MKT'",
    "From the API it is possible to check how a specified trade execution is expected to change the account margin requirements for an account in real time. This is done by creating an Order object which has the IBApi.Order.WhatIf flag set to true. By default, the whatif boolean in Order has a false value, but if set to True in an Order object with is passed to IBApi.EClient.placeOrder, instead of sending the order to a destination the IB server it will undergo a credit check for the expected post-trade margin requirement. The estimated post-trade margin requirement is returned to the IBApi.OrderState object in the EWrapper.openOrder callback.. This is equivalent to creating a order ticket in TWS, clicking 'Preview', and viewing the information in the 'Margin Impact' panel. For example, most users want to check the margin details or available leverage of the order. Here is the example of checking the Initial Maintenance Margin Change. Python: Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter def openOrder(self, orderId: OrderId, contract: Contract, order: Order, orderState: OrderState): print(orderId, contract, order, orderState.initMarginChange) . . . order.whatIf = True . . . self.placeOrder(order_id, contract, order) def openOrder(self, orderId: OrderId, contract: Contract, order: Order, orderState: OrderState): print(orderId, contract, order, orderState.initMarginChange) . . . order.whatIf = True . . . self.placeOrder(order_id, contract, order) def openOrder(self, orderId: OrderId, contract: Contract, order: Order, orderState: OrderState): print(orderId, contract, order, orderState.initMarginChange) . . . order.whatIf = True . . . self.placeOrder(order_id, contract, order) Expected output: Plain text Copy to clipboard Open code in new window EnlighterJS 3 Syntax Highlighter 210 152791428,700,STK,,0,?,,SEHK,,HKD,700,700,False,,,,combo: 210,1,1832692965: MKT BUY 100@0 DAY 12567.5 210 152791428,700,STK,,0,?,,SEHK,,HKD,700,700,False,,,,combo: 210,1,1832692965: MKT BUY 100@0 DAY 12567.5 210 152791428,700,STK,,0,?,,SEHK,,HKD,700,700,False,,,,combo: 210,1,1832692965: MKT BUY 100@0 DAY 12567.5 You can see that 12567.5 is the initMarginChange which matches the Initial Margin Change result shown in TWS Order Ticket Preview. Apart from InitMarginChange, there are other supported variables. For details, please visit: https://www.interactivebrokers.com/campus/ibkr-api-page/twsapi-ref/#orderstate-ref",
    "The Trigger Method defined in the IBApi.Order class specifies how simulated stop, stop-limit, and trailling stops, and conditional orders are triggered. Valid values are: 0 - The default method for instrument 1 - 'Double bid/ask' function, where stop orders are triggered based on two consecutive bid or ask prices. 2 - 'Last' function, where stop orders are triggered based on the last price 3 - 'Double last' function 4 - Bid/ask function 7 - Last or bid/ask function 8 - Mid-point function Below is a table which indicates whether a given secType is compatible with bid/ask-driven or last-driven trigger methods (method 7 only used in iBot alerts)  secType Bid/Ask-driven (1, 4, 8) Last-driven (2, 3) Default behavior Notes STK yes yes Last The double bid/ask is used for OTC stocks CFD yes yes Last CFD - Index yes n/a n/a Ex IBUS500 OPT yes yes US OPT: Double bid/ask, Other: Last FOP yes yes Last WAR yes yes Last IOPT yes yes Last FUT yes yes Last COMBO yes yes Last CASH yes n/a Bid/ask CMDTY yes n/a Last IND n/a yes n/a For conditions only  Important notes : If an incompatible triggerMethod and secType are used in your API order, the order may never trigger. These trigger methods only apply to stop orders simulated by IB. If a stop-variant is handled natively, the trigger method specified is ignored. See our Stop Orders page for more information.",
    "Display Groups function allows API clients to integrate with TWS Color Grouping Windows. TWS Color Grouping Windows are identified by a colored chain in TWS and by an integer number via the API. Currently that number ranges from 1 to 7 and are mapped to specific colors, as indicated in TWS.",
    "The IBApi.EClient.queryDisplayGroups method is used to request all available Display Groups in TWS. The IBApi.EWrapper.displayGroupList is a one-time response to IBApi.EClient.queryDisplayGroups. It returns a list of integers representing visible Group ID separated by the '|' character, and sorted by most used group first. This list will not change during TWS session. In other words, user cannot add a new group, but only the sorting of the group numbers can change. Example: '4|1|2|5|3|6|7'",
    "EClient.queryDisplayGroups (requestId: int. Request identifier used to track data.) Requests all available Display Groups in TWS.",
    "EWrapper.displayGroupList (requestId: Request identifier used to track data. groups: String. Returns a list of integers representing visible Group ID separated by the '|' character, and sorted by most used group first.) A one-time response to querying the display groups.",
    "To integrate with a specific Group, you need to first subscribe to the group number by invoking IBApi.EClient.subscribeToGroupEvents. The IBApi.EWrapper.displayGroupUpdated call back is triggered once after receiving the subscription request, and will be sent again if the selected contract in the subscribed display group has changed.",
    "EClient.subscribeToGroupEvents (requestId: int. Request identifier used to track data. groupId: int. The display group for integration.) Integrates API client and TWS window grouping.",
    "EWrapper.displayGroupUpdated (requestId: int. Request identifier used to track data. contractInfo: String. Contract information produced for the active display group.) Call triggered once after receiving the subscription request, and will be sent again if the selected contract in the subscribed * display group has changed.",
    "EClient.unsubscribeFromGroupEvents (requestId: int. Request identifier used to track data.) Cancels a TWS Window Group subscription.",
    "EClient.updateDisplayGroup (requestId: int. Request identifier used for tracking data. contractInfo: String. An encoded value designating a unique IB contract. Possible values include: none: Empty selection contractID: Any non-combination contract. Examples 8314 for IBM SMART; 8314 for IBM ARCA combo: If any combo is selected Note: This request from the API does not get a TWS response unless an error occurs.) Updates the contract displayed in a TWS Window Group.  Note: This request from the API does not get a response from TWS unless an error occurs. In this sample we have commanded TWS Windows that chained with Group #1 to display IBM@SMART. The screenshot of TWS Mosaic to the right shows that both the pink chained (Group #1) windows are now displaying IBM@SMART, while the green chained (Group #4) window remains unchanged. ",
    "Calendar and Event data can be retrieved from the Wall Street Horizon Event Calendar and accessed via the TWS API through the functions IBApi.EClient.reqWshMetaData and IBApi.EClient.reqWshEventData. It is necessary to have the Wall Street Horizon Corporate Event Data research subscription activated first in Account Management.  WSH provides IBKR with corporate event datasets, including earnings dates, dividend dates, options expiration dates, splits, spinoffs and a wide variety of investor-related conferences.  Data Classes and Fields PDF",
    "The function IBApi.EClient.reqWshMetaData is used to request available event types, or supported filter values, that may be used in the call for EClient.reqWshEventData() filter field. Regardless of whether or not you are aware of the Meta Data filters, this request must always be called once per session prior to the EClient.reqWshEventData() function.",
    "While this list contains an array of Meta Data filters that may be used, please be aware that new values may be made available or removed without notice. In addition to the EClient.reqWshMetaData field being mandatory prior to the EClient.reqWshEventData() function, the JSON content will also return the appropriate column values that are returned along with the function.  Event Type Name Event Type Tag Board of Directors Meeting wshe_bod Buyback wshe_bybk BuyBack Modification wshe_bybkmod Conference Call wshe_cc FDA Advisory Committee Meeting wshe_fda_adv_comm Future Quarter wshe_fq Investors Conference wshe_ic Index Change wshe_idx Interim Dates wshe_interim_dates Initial Public Offering wshe_ipo Movie Release wshe_movies Option Expiration Date wshe_option Merger and Acquistion wshe_merg_acq Quarter End wshe_qe Secondary Offering wshe_secondary Video Release wshe_videos Splits wshe_splits Spinoff wshe_spinoffs Shareholder Meeting wshe_sh Filing Due Date wshe_sec WSHE Dividend wshe_div Dividends Suspend/Resume wshe_divsr Earnings Date wshe_ed Earnings Report wshe_eps",
    "EClient.reqWshMetaData (requestId: int. Request identifier used to track data.) Requests metadata from the WSH calendar.",
    "EWrapper.wshEventData (requestId: int. Request identifier used to track data. dataJson: String. metadata in json format.) Returns meta data from the WSH calendar  Once the json content has been received, the specific event types used to filter EClient.reqWshEventData() are listed under 'meta_data' -> 'event_types'. The 'name' field will express what the filter will return, such as 'Board of Directors Meeting' The 'tag' field will return the filter used in your JSON query. The related example would be 'wshe_bod'.",
    "EClient.cancelWshMetaData (requestId: int. Request identifier used to track data.) Cancels pending request for WSH metadata.",
    "The function EClient.reqWshEventData is used to request various calendar events from Wall Street Horizon. The event data is then received via the callback EWrapper.wshEventData. Pending event data requests can be canceled with the function IBApi.EClient.cancelWshEventData. Note: Prior to sending this message, the API client must make a request for metadata via EClient.reqWshMetaData. Also note that TWS will not support multiple concurrent requests. Previous request should succeed, fail, or be cancelled by client before next one. TWS will reject such requests with text 'Duplicate WSH meta-data request' or 'Duplicate WSH event request'.",
    "When making a request to the Wall Street Horizons Event Calendar with the API, users must create a wshEventData Object. This object contains several fields, along with a filter field, which takes a json-formatted string. The filter values are returned from WSH Meta Data requests. When creating the object, users are able to specify either the WshEventData.conId, WshEventData.startDate, and WshEventData.endDate, or they may choose to use the WshEventData.filter value. Attempting to use both will result in an error. Only one Event Type tag may be passed per request. Multiple submitted filters will be ignored beyond the final request.  WshEventData() conId: String. Specify the contract identifier for the event request. startDate: String. Specify the start date of the event requests. Formatted as 'YYYYMMDD' endDate: String. Specify the end date of the event requests. Formatted as 'YYYYMMDD' fillCompetitors: bool. Automatically fill in competitor values of existing positions. fillPortfolio: bool. Automatically fill in portfolio values. fillWatchlist: bool. Automatically fill in watchlist values. totalLimit: int. Maximum of 100. filter: String. Json-formatted string containing all filter values. Some available values include: watchlist: Array of string. Takes a single conid. country: String. Specify a country code, or 'All'. EClient.reqWshMetaData() responses will include an Event Type tag which can be used to filter the Event Data's response. The Json field is a boolean that can only take true to filter the given value",
    "EClient.reqWshEventData (requestId: int. Request identifier used to track data. wshEventData: WshEventData. Unique object used to track all parameters for the event data request. See WshEventData Object for more details.) MIN_SERVER_VER_WSH_EVENT_DATA_FILTERS_DATE: *Only passed in the Python implementation. Server version of the API implementationmust be passed. This can be accomplished with the EClient.serverVersion() function call. Requests event data from the WSH calendar.",
    "EWrapper.wshEventData (requestId: int. Request identifier used to track data. dataJson: String. Event data json format.) Returns calendar events from the WSH.",
    "EClient.cancelWshEventData (requestId: int. Request identifier used to track data.) Cancels pending WSH event data request."
]